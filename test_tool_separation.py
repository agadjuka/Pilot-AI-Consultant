#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏–Ω—Ç–µ–∑–∞.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.tool_definitions import read_only_tools, write_tools, read_only_tools_obj, write_tools_obj
from app.services.prompt_builder_service import PromptBuilderService

def test_tool_separation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ read_only –∏ write."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ read_only_tools —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    read_only_names = [tool.name for tool in read_only_tools]
    print(f"üìñ Read-only –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {read_only_names}")
    
    expected_read_only = [
        'get_all_services',
        'get_masters_for_service', 
        'get_available_slots',
        'get_my_appointments',
        'get_full_history'
    ]
    
    for expected in expected_read_only:
        assert expected in read_only_names, f"‚ùå {expected} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ read_only_tools"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ write_tools —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    write_names = [tool.name for tool in write_tools]
    print(f"‚úèÔ∏è Write –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {write_names}")
    
    expected_write = [
        'create_appointment',
        'cancel_appointment_by_id',
        'reschedule_appointment_by_id',
        'call_manager'
    ]
    
    for expected in expected_write:
        assert expected in write_names, f"‚ùå {expected} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ write_tools"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ create_appointment –ù–ï –≤ read_only_tools
    assert 'create_appointment' not in read_only_names, "‚ùå create_appointment –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ read_only_tools"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_all_services –ù–ï –≤ write_tools
    assert 'get_all_services' not in write_names, "‚ùå get_all_services –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ write_tools"
    
    print("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def test_prompt_builder():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç PromptBuilderService –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PromptBuilderService...")
    
    prompt_builder = PromptBuilderService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –º—ã—à–ª–µ–Ω–∏—è
    thinking_prompt = prompt_builder.build_thinking_prompt(
        stage_name="greeting",
        history=[],
        user_message="–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—Ä–æ–º–ø—Ç–µ –º—ã—à–ª–µ–Ω–∏—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ read_only –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    for tool_name in ['get_all_services', 'get_available_slots']:
        assert tool_name in thinking_prompt, f"‚ùå {tool_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ –º—ã—à–ª–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—Ä–æ–º–ø—Ç–µ –º—ã—à–ª–µ–Ω–∏—è –ù–ï–¢ write –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    for tool_name in ['create_appointment', 'cancel_appointment_by_id']:
        assert tool_name not in thinking_prompt, f"‚ùå {tool_name} –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ –º—ã—à–ª–µ–Ω–∏—è"
    
    print("‚úÖ –ü—Ä–æ–º–ø—Ç –º—ã—à–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ read_only –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å–∏–Ω—Ç–µ–∑–∞
    synthesis_prompt = prompt_builder.build_synthesis_prompt(
        stage_name="greeting",
        history=[],
        user_message="–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä",
        tool_results="–†–µ–∑—É–ª—å—Ç–∞—Ç get_all_services: –ú–∞–Ω–∏–∫—é—Ä - 2000 —Ä—É–±, 60 –º–∏–Ω"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—Ä–æ–º–ø—Ç–µ —Å–∏–Ω—Ç–µ–∑–∞ –µ—Å—Ç—å write –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    for tool_name in ['create_appointment', 'cancel_appointment_by_id']:
        assert tool_name in synthesis_prompt, f"‚ùå {tool_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ —Å–∏–Ω—Ç–µ–∑–∞"
    
    print("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–∏–Ω—Ç–µ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç write –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!")

if __name__ == "__main__":
    try:
        test_tool_separation()
        test_prompt_builder()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        sys.exit(1)
