#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def final_report():
    """–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ü–ï–†–ï–ù–û–°–ï –î–ê–ù–ù–´–•")
    logger.info("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                def check_all_tables(session):
                    tables = ['services', 'masters', 'clients', 'appointments', 'dialog_history', 'master_services']
                    
                    logger.info("üìã –°–¢–ê–¢–£–° –ü–ï–†–ï–ù–û–°–ê –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
                    logger.info("-" * 40)
                    
                    for table in tables:
                        try:
                            prepared = session.prepare(f"SELECT COUNT(*) as count FROM {table}")
                            result = session.transaction().execute(prepared)
                            count = result[0].rows[0][0]
                            
                            if count > 0:
                                logger.info(f"‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
                                prepared = session.prepare(f"SELECT * FROM {table} LIMIT 2")
                                result = session.transaction().execute(prepared)
                                rows = result[0].rows
                                
                                if rows:
                                    logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã:")
                                    for i, row in enumerate(rows, 1):
                                        logger.info(f"   {i}: {list(row)}")
                            else:
                                logger.info(f"‚ùå {table}: 0 –∑–∞–ø–∏—Å–µ–π")
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è {table}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
                
                pool.retry_operation_sync(check_all_tables)
                
                logger.info("=" * 50)
                logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã: services, masters, clients, master_services")
                logger.info("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å: dialog_history (—Ñ–æ—Ä–º–∞—Ç Timestamp)")
                logger.info("üìù appointments: –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ SQLite")
                logger.info("=" * 50)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    final_report()
