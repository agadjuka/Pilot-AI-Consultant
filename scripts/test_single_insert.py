#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–î–ù–û–ô –∑–∞–ø–∏—Å–∏ –≤ YDB
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_single_insert():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∑–∞–ø–∏—Å–∏"""
    
    logger.info("üß™ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–î–ù–û–ô –∑–∞–ø–∏—Å–∏ –≤ services...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                def insert_one_service(session):
                    # –î–æ–±–∞–≤–ª—è–µ–º –û–î–ù–£ –∑–∞–ø–∏—Å—å
                    query = """
                        UPSERT INTO services (id, name, description, price, duration_minutes)
                        VALUES (999, '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏', 1000.0, 60)
                    """
                    prepared = session.prepare(query)
                    session.transaction().execute(prepared)
                    logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞!")
                
                pool.retry_operation_sync(insert_one_service)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–∏–ª–∞—Å—å
                def check_insert(session):
                    prepared = session.prepare("SELECT COUNT(*) as count FROM services")
                    result = session.transaction().execute(prepared)
                    count = result[0].rows[0][0]
                    logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ services: {count}")
                    
                    if count > 0:
                        prepared = session.prepare("SELECT * FROM services WHERE id = 999")
                        result = session.transaction().execute(prepared)
                        rows = result[0].rows
                        if rows:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {list(rows[0])}")
                        else:
                            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                pool.retry_operation_sync(check_insert)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    test_single_insert()
