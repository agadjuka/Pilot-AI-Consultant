#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π YDB —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π YDB –¥—Ä–∞–π–≤–µ—Ä
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å SQLAlchemy + YDB
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_migrations_with_ydb():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π YDB –¥—Ä–∞–π–≤–µ—Ä"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ YDB —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π –¥—Ä–∞–π–≤–µ—Ä...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É: {endpoint}")
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        if not os.path.exists(key_file_path):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–ª—é—á–∞ {service_account_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞: {os.path.abspath(key_file_path)}")
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ YQL
            with ydb.SessionPool(driver) as pool:
                
                def create_tables(session):
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã services
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS services (
                            id Int32,
                            name String,
                            description Text,
                            price Double,
                            duration_minutes Int32,
                            PRIMARY KEY (id)
                        )
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã masters
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS masters (
                            id Int32,
                            name String,
                            specialization String,
                            PRIMARY KEY (id)
                        )
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã master_services
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS master_services (
                            master_id Int32,
                            service_id Int32,
                            PRIMARY KEY (master_id, service_id)
                        )
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS clients (
                            id Int32,
                            telegram_id Int64,
                            first_name String,
                            phone_number String,
                            PRIMARY KEY (id)
                        )
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã appointments
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS appointments (
                            id Int32,
                            user_telegram_id Int64,
                            master_id Int32,
                            service_id Int32,
                            start_time Timestamp,
                            end_time Timestamp,
                            PRIMARY KEY (id)
                        )
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã dialog_history
                    session.execute_scheme("""
                        CREATE TABLE IF NOT EXISTS dialog_history (
                            id Int32,
                            user_id Int64,
                            role String,
                            message_text Text,
                            timestamp Timestamp,
                            PRIMARY KEY (id)
                        )
                    """)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                pool.retry_operation_sync(create_tables)
                logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        raise

if __name__ == "__main__":
    run_migrations_with_ydb()
