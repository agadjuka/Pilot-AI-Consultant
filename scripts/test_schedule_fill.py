"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 20 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞,
–æ—Å—Ç–∞–≤–ª—è—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.
"""

import sys
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append('.')

from app.core.database import init_database, execute_query, upsert_record, delete_record
from app.repositories.appointment_repository import AppointmentRepository


def get_manicure_service_id():
    """–ü–æ–ª—É—á–∞–µ—Ç ID —É—Å–ª—É–≥–∏ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'"""
    query = "SELECT id FROM services WHERE name = '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'"
    rows = execute_query(query)
    
    if not rows:
        raise ValueError("–£—Å–ª—É–≥–∞ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    return rows[0][0]


def clear_existing_appointments(target_date: date, master_ids: list):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É"""
    print(f"–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ {target_date} –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ {master_ids}...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    master_ids_str = ', '.join(map(str, master_ids))
    date_str = target_date.strftime('%Y-%m-%d')
    
    query = f"""
        DELETE FROM appointments 
        WHERE master_id IN ({master_ids_str})
        AND CAST(start_time AS Date) = CAST('{date_str}' AS Date)
    """
    
    try:
        delete_record("appointments", f"master_id IN ({master_ids_str}) AND CAST(start_time AS Date) = CAST('{date_str}' AS Date)")
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")


def create_appointment(master_id: int, service_id: int, start_time: datetime, end_time: datetime, user_telegram_id: int = 999999999):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    try:
        repo = AppointmentRepository()
        appointment_data = {
            'user_telegram_id': user_telegram_id,
            'master_id': master_id,
            'service_id': service_id,
            'start_time': start_time,
            'end_time': end_time
        }
        repo.create(appointment_data)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
        return False


def create_morning_wall(target_date: date, service_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é '—Å—Ç–µ–Ω—É' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (9:00-12:30)"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–π '—Å—Ç–µ–Ω—ã' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤...")
    
    morning_appointments = [
        # –ú–∞—Å—Ç–µ—Ä 10: 09:00-11:00
        (10, datetime.combine(target_date, datetime.min.time().replace(hour=9, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=11, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 9: 09:00-12:00
        (9, datetime.combine(target_date, datetime.min.time().replace(hour=9, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=12, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 8: 09:30-11:30
        (8, datetime.combine(target_date, datetime.min.time().replace(hour=9, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=11, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 7: 10:00-12:30
        (7, datetime.combine(target_date, datetime.min.time().replace(hour=10, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=12, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 6: 09:00-11:30
        (6, datetime.combine(target_date, datetime.min.time().replace(hour=9, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=11, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 5: 09:00-12:30
        (5, datetime.combine(target_date, datetime.min.time().replace(hour=9, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=12, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 3: 10:30-12:30
        (3, datetime.combine(target_date, datetime.min.time().replace(hour=10, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=12, minute=30))),
    ]
    
    created_count = 0
    for master_id, start_time, end_time in morning_appointments:
        if create_appointment(master_id, service_id, start_time, end_time):
            created_count += 1
            print(f"  ‚úÖ –ú–∞—Å—Ç–µ—Ä {master_id}: {start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}")
    
    print(f"–£—Ç—Ä–µ–Ω–Ω—è—è '—Å—Ç–µ–Ω–∞' —Å–æ–∑–¥–∞–Ω–∞: {created_count}/{len(morning_appointments)} –∑–∞–ø–∏—Å–µ–π")
    return created_count


def create_afternoon_wall(target_date: date, service_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é '—Å—Ç–µ–Ω—É' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (14:30-17:00)"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π '—Å—Ç–µ–Ω—ã' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤...")
    
    afternoon_appointments = [
        # –ú–∞—Å—Ç–µ—Ä 10: 14:30-16:30
        (10, datetime.combine(target_date, datetime.min.time().replace(hour=14, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=16, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 9: 15:00-17:00
        (9, datetime.combine(target_date, datetime.min.time().replace(hour=15, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=17, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 8: 14:30-16:00
        (8, datetime.combine(target_date, datetime.min.time().replace(hour=14, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=16, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 7: 14:30-17:00
        (7, datetime.combine(target_date, datetime.min.time().replace(hour=14, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=17, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 6: 15:30-17:00
        (6, datetime.combine(target_date, datetime.min.time().replace(hour=15, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=17, minute=0))),
        
        # –ú–∞—Å—Ç–µ—Ä 5: 14:30-16:30
        (5, datetime.combine(target_date, datetime.min.time().replace(hour=14, minute=30)),
         datetime.combine(target_date, datetime.min.time().replace(hour=16, minute=30))),
        
        # –ú–∞—Å—Ç–µ—Ä 3: 15:00-17:00
        (3, datetime.combine(target_date, datetime.min.time().replace(hour=15, minute=0)),
         datetime.combine(target_date, datetime.min.time().replace(hour=17, minute=0))),
    ]
    
    created_count = 0
    for master_id, start_time, end_time in afternoon_appointments:
        if create_appointment(master_id, service_id, start_time, end_time):
            created_count += 1
            print(f"  ‚úÖ –ú–∞—Å—Ç–µ—Ä {master_id}: {start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}")
    
    print(f"–î–Ω–µ–≤–Ω–∞—è '—Å—Ç–µ–Ω–∞' —Å–æ–∑–¥–∞–Ω–∞: {created_count}/{len(afternoon_appointments)} –∑–∞–ø–∏—Å–µ–π")
    return created_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YDB...")
        init_database()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target_date = date(2025, 10, 20)  # 20 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞
        master_ids = [10, 9, 8, 7, 6, 5, 3]  # ID –º–∞—Å—Ç–µ—Ä–æ–≤ –º–∞–Ω–∏–∫—é—Ä–∞
        
        print(f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date}")
        print(f"üë• –ú–∞—Å—Ç–µ—Ä–∞ –º–∞–Ω–∏–∫—é—Ä–∞: {master_ids}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —É—Å–ª—É–≥–∏
        print("–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'...")
        service_id = get_manicure_service_id()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID —É—Å–ª—É–≥–∏: {service_id}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        clear_existing_appointments(target_date, master_ids)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        print("\n" + "=" * 60)
        print("–°–û–ó–î–ê–ù–ò–ï –ó–ê–ù–Ø–¢–´–• –°–õ–û–¢–û–í")
        print("=" * 60)
        
        morning_count = create_morning_wall(target_date, service_id)
        afternoon_count = create_afternoon_wall(target_date, service_id)
        
        total_created = morning_count + afternoon_count
        expected_total = 14  # 7 –º–∞—Å—Ç–µ—Ä–æ–≤ √ó 2 —Å–ª–æ—Ç–∞
        
        print("\n" + "=" * 60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}/{expected_total}")
        print(f"üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è '—Å—Ç–µ–Ω–∞' (9:00-12:30): {morning_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"üåÜ –î–Ω–µ–≤–Ω–∞—è '—Å—Ç–µ–Ω–∞' (14:30-17:00): {afternoon_count} –∑–∞–ø–∏—Å–µ–π")
        
        if total_created == expected_total:
            print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 20 –æ–∫—Ç—è–±—Ä—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
            print("üìã –û–∂–∏–¥–∞–µ–º—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞:")
            print("   ‚Ä¢ 12:30-14:30 (–æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤)")
            print("   ‚Ä¢ 17:00-18:30 (–≤–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã)")
        else:
            print(f"\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ {total_created} –∏–∑ {expected_total} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    main()
