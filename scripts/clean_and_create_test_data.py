"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 20 –æ–∫—Ç—è–±—Ä—è 2025.
–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import sys
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append('.')

from app.core.database import init_database, execute_query, upsert_record, delete_record
from app.repositories.appointment_repository import AppointmentRepository


def get_manicure_service_id():
    """–ü–æ–ª—É—á–∞–µ—Ç ID —É—Å–ª—É–≥–∏ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'"""
    query = "SELECT id FROM services WHERE name = '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'"
    rows = execute_query(query)
    
    if not rows:
        raise ValueError("–£—Å–ª—É–≥–∞ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    return rows[0][0]


def clear_ALL_appointments_on_date(target_date: date):
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É"""
    print(f"üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ {target_date}")
    print("=" * 60)
    
    date_str = target_date.strftime('%Y-%m-%d')
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –µ—Å—Ç—å
        count_query = f"SELECT COUNT(*) FROM appointments WHERE CAST(start_time AS Date) = CAST('{date_str}' AS Date)"
        count_rows = execute_query(count_query)
        existing_count = count_rows[0][0] if count_rows else 0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ {target_date}: {existing_count}")
        
        if existing_count == 0:
            print("‚úÖ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        delete_query = f"DELETE FROM appointments WHERE CAST(start_time AS Date) = CAST('{date_str}' AS Date)"
        delete_record("appointments", f"CAST(start_time AS Date) = CAST('{date_str}' AS Date)")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {existing_count} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        raise


def create_appointment_with_debug(master_id: int, service_id: int, start_time: datetime, end_time: datetime, user_telegram_id: int = 999999999):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        repo = AppointmentRepository()
        appointment_data = {
            'user_telegram_id': user_telegram_id,
            'master_id': master_id,
            'service_id': service_id,
            'start_time': start_time,
            'end_time': end_time
        }
        
        print(f"   üîß –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}")
        result = repo.create(appointment_data)
        
        if result:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å ID: {result['id']}")
            return True
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
        return False


def create_morning_wall(target_date: date, service_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é '—Å—Ç–µ–Ω—É' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (9:00-12:30)"""
    print("\nüåÖ –°–û–ó–î–ê–ù–ò–ï –£–¢–†–ï–ù–ù–ï–ô '–°–¢–ï–ù–´' (9:00-12:30)")
    print("-" * 50)
    
    morning_appointments = [
        # –ú–∞—Å—Ç–µ—Ä 10: 09:00-11:00
        (10, datetime(2025, 10, 20, 9, 0), datetime(2025, 10, 20, 11, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 9: 09:00-12:00
        (9, datetime(2025, 10, 20, 9, 0), datetime(2025, 10, 20, 12, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 8: 09:30-11:30
        (8, datetime(2025, 10, 20, 9, 30), datetime(2025, 10, 20, 11, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 7: 10:00-12:30
        (7, datetime(2025, 10, 20, 10, 0), datetime(2025, 10, 20, 12, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 6: 09:00-11:30
        (6, datetime(2025, 10, 20, 9, 0), datetime(2025, 10, 20, 11, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 5: 09:00-12:30
        (5, datetime(2025, 10, 20, 9, 0), datetime(2025, 10, 20, 12, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 3: 10:30-12:30
        (3, datetime(2025, 10, 20, 10, 30), datetime(2025, 10, 20, 12, 30)),
    ]
    
    created_count = 0
    for master_id, start_time, end_time in morning_appointments:
        if create_appointment_with_debug(master_id, service_id, start_time, end_time):
            created_count += 1
    
    print(f"\nüìä –£—Ç—Ä–µ–Ω–Ω—è—è '—Å—Ç–µ–Ω–∞' —Å–æ–∑–¥–∞–Ω–∞: {created_count}/{len(morning_appointments)} –∑–∞–ø–∏—Å–µ–π")
    return created_count


def create_afternoon_wall(target_date: date, service_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é '—Å—Ç–µ–Ω—É' –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (14:30-17:00)"""
    print("\nüåÜ –°–û–ó–î–ê–ù–ò–ï –î–ù–ï–í–ù–û–ô '–°–¢–ï–ù–´' (14:30-17:00)")
    print("-" * 50)
    
    afternoon_appointments = [
        # –ú–∞—Å—Ç–µ—Ä 10: 14:30-16:30
        (10, datetime(2025, 10, 20, 14, 30), datetime(2025, 10, 20, 16, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 9: 15:00-17:00
        (9, datetime(2025, 10, 20, 15, 0), datetime(2025, 10, 20, 17, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 8: 14:30-16:00
        (8, datetime(2025, 10, 20, 14, 30), datetime(2025, 10, 20, 16, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 7: 14:30-17:00
        (7, datetime(2025, 10, 20, 14, 30), datetime(2025, 10, 20, 17, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 6: 15:30-17:00
        (6, datetime(2025, 10, 20, 15, 30), datetime(2025, 10, 20, 17, 0)),
        
        # –ú–∞—Å—Ç–µ—Ä 5: 14:30-16:30
        (5, datetime(2025, 10, 20, 14, 30), datetime(2025, 10, 20, 16, 30)),
        
        # –ú–∞—Å—Ç–µ—Ä 3: 15:00-17:00
        (3, datetime(2025, 10, 20, 15, 0), datetime(2025, 10, 20, 17, 0)),
    ]
    
    created_count = 0
    for master_id, start_time, end_time in afternoon_appointments:
        if create_appointment_with_debug(master_id, service_id, start_time, end_time):
            created_count += 1
    
    print(f"\nüìä –î–Ω–µ–≤–Ω–∞—è '—Å—Ç–µ–Ω–∞' —Å–æ–∑–¥–∞–Ω–∞: {created_count}/{len(afternoon_appointments)} –∑–∞–ø–∏—Å–µ–π")
    return created_count


def verify_created_data(target_date: date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        repo = AppointmentRepository()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
        start_datetime = datetime.combine(target_date, datetime.min.time())
        end_datetime = datetime.combine(target_date, datetime.max.time())
        
        appointments = repo.get_appointments_by_date_range(start_datetime, end_datetime)
        
        if not appointments:
            print("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(appointments)} –∑–∞–ø–∏—Å–µ–π:")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        morning_slots = []
        afternoon_slots = []
        other_slots = []
        
        for appointment in appointments:
            start_time = appointment['start_time']
            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            
            hour = start_time.hour
            
            if 9 <= hour < 13:
                morning_slots.append(appointment)
            elif 14 <= hour < 18:
                afternoon_slots.append(appointment)
            else:
                other_slots.append(appointment)
        
        print(f"üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã (9:00-12:59): {len(morning_slots)} –∑–∞–ø–∏—Å–µ–π")
        for slot in morning_slots:
            start_time = slot['start_time']
            end_time = slot['end_time']
            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            if isinstance(end_time, str):
                end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            print(f"   –ú–∞—Å—Ç–µ—Ä {slot['master_id']}: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}")
        
        print(f"\nüåÜ –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã (14:00-17:59): {len(afternoon_slots)} –∑–∞–ø–∏—Å–µ–π")
        for slot in afternoon_slots:
            start_time = slot['start_time']
            end_time = slot['end_time']
            if isinstance(start_time, str):
                start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            if isinstance(end_time, str):
                end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            print(f"   –ú–∞—Å—Ç–µ—Ä {slot['master_id']}: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}")
        
        if other_slots:
            print(f"\n‚ö†Ô∏è –î—Ä—É–≥–∏–µ —Å–ª–æ—Ç—ã: {len(other_slots)} –∑–∞–ø–∏—Å–µ–π")
            for slot in other_slots:
                start_time = slot['start_time']
                end_time = slot['end_time']
                if isinstance(start_time, str):
                    start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                if isinstance(end_time, str):
                    end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
                print(f"   –ú–∞—Å—Ç–µ—Ä {slot['master_id']}: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YDB...")
        init_database()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target_date = date(2025, 10, 20)  # 20 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞
        
        print(f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —É—Å–ª—É–≥–∏
        print("\n–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'...")
        service_id = get_manicure_service_id()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID —É—Å–ª—É–≥–∏: {service_id}")
        
        # –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        clear_ALL_appointments_on_date(target_date)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n" + "=" * 60)
        print("–°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        morning_count = create_morning_wall(target_date, service_id)
        afternoon_count = create_afternoon_wall(target_date, service_id)
        
        total_created = morning_count + afternoon_count
        expected_total = 14  # 7 –º–∞—Å—Ç–µ—Ä–æ–≤ √ó 2 —Å–ª–æ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        verify_created_data(target_date)
        
        print("\n" + "=" * 60)
        print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}/{expected_total}")
        print(f"üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è '—Å—Ç–µ–Ω–∞' (9:00-12:30): {morning_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"üåÜ –î–Ω–µ–≤–Ω–∞—è '—Å—Ç–µ–Ω–∞' (14:30-17:00): {afternoon_count} –∑–∞–ø–∏—Å–µ–π")
        
        if total_created == expected_total:
            print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 20 –æ–∫—Ç—è–±—Ä—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            print("üìã –û–∂–∏–¥–∞–µ–º—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞:")
            print("   ‚Ä¢ 12:30-14:30 (–æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤)")
            print("   ‚Ä¢ 17:00-18:30 (–≤–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã)")
            print("\nüéØ –¢–µ–ø–µ—Ä—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ {total_created} –∏–∑ {expected_total} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    main()
