#!/usr/bin/env python3
"""
–ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥.

–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–¥–µ:
- –ö–∞–∂–¥—ã–π –º–∞—Å—Ç–µ—Ä –∑–∞–Ω—è—Ç –æ–¥–Ω–æ–π —É—Å–ª—É–≥–æ–π —Å 10:00 –¥–æ 18:00
- –£ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
- –ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ 3 —á–∞—Å–∞
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø –∏–∑ test_schedule_scenario.py
"""

import sys
import os
import random
from datetime import date, datetime, time, timedelta
from typing import List, Dict, Any, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from app.core.database import (
    get_session_pool, 
    execute_query, 
    upsert_record, 
    delete_record,
    init_database,
    close_database
)


class WeeklyScheduleGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    
    def __init__(self):
        self.fake_user_telegram_id = 999999999
        self.start_date = date.today() + timedelta(days=1)  # –ó–∞–≤—Ç—Ä–∞
        self.end_date = self.start_date + timedelta(days=6)  # –ù–µ–¥–µ–ª—è
        
    def get_all_services(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        query = "SELECT id, name, duration_minutes FROM services ORDER BY id"
        result = execute_query(query)
        
        services = []
        for row in result:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –æ–Ω–æ –≤ –±–∞–π—Ç–∞—Ö
            name = row[1]
            if isinstance(name, bytes):
                name = name.decode('utf-8')
            
            services.append({
                'id': row[0],
                'name': name,
                'duration_minutes': row[2]
            })
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")
        for service in services:
            print(f"   - {service['name']} (ID: {service['id']}, {service['duration_minutes']} –º–∏–Ω)")
        
        return services
    
    def get_all_masters(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        query = "SELECT id, name, specialization FROM masters ORDER BY id"
        result = execute_query(query)
        
        masters = []
        for row in result:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∏ –≤ –±–∞–π—Ç–∞—Ö
            name = row[1]
            if isinstance(name, bytes):
                name = name.decode('utf-8')
            
            specialization = row[2]
            if isinstance(specialization, bytes):
                specialization = specialization.decode('utf-8')
            
            masters.append({
                'id': row[0],
                'name': name,
                'specialization': specialization
            })
        
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}")
        for master in masters:
            print(f"   - {master['name']} (ID: {master['id']}, {master['specialization']})")
        
        return masters
    
    def get_master_services(self, master_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"""
        query = f"SELECT service_id FROM master_services WHERE master_id = {master_id}"
        result = execute_query(query)
        
        service_ids = [row[0] for row in result]
        return service_ids
    
    def clear_weekly_data(self):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print("üóÑÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            appointments_query = f"""
                SELECT id FROM appointments 
                WHERE CAST(start_time AS Date) >= CAST('{self.start_date}' AS Date) 
                AND CAST(start_time AS Date) <= CAST('{self.end_date}' AS Date)
            """
            appointment_ids = execute_query(appointments_query)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π
            for row in appointment_ids:
                delete_record("appointments", f"id = {row[0]}")
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(appointment_ids)}")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            schedules_query = f"""
                SELECT id FROM master_schedules 
                WHERE CAST(date AS Date) >= CAST('{self.start_date}' AS Date) 
                AND CAST(date AS Date) <= CAST('{self.end_date}' AS Date)
            """
            schedule_ids = execute_query(schedules_query)
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É
            for row in schedule_ids:
                delete_record("master_schedules", f"id = {row[0]}")
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã: {len(schedule_ids)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            raise
    
    def create_master_schedules(self, masters: List[Dict]):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
            max_id_query = "SELECT MAX(id) as max_id FROM master_schedules"
            max_id_result = execute_query(max_id_query)
            max_id = max_id_result[0][0] if max_id_result[0][0] is not None else 0
            
            current_date = self.start_date
            schedule_id = max_id + 1
            
            while current_date <= self.end_date:
                for master in masters:
                    schedule_data = {
                        'id': schedule_id,
                        'master_id': master['id'],
                        'date': current_date,
                        'start_time': time(10, 0),  # 10:00
                        'end_time': time(18, 0)     # 18:00
                    }
                    
                    upsert_record('master_schedules', schedule_data)
                    schedule_id += 1
                
                current_date += timedelta(days=1)
            
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            raise
    
    def generate_time_patterns(self, services: List[Dict], masters: List[Dict]) -> Dict[Tuple[int, date], List[Tuple[time, time]]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
        print("‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–∏...")
        
        patterns = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        base_intervals = [
            (time(10, 0), time(13, 0)),  # 3 —á–∞—Å–∞
            (time(13, 0), time(16, 0)),  # 3 —á–∞—Å–∞  
            (time(16, 0), time(18, 0)),  # 2 —á–∞—Å–∞
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        extended_intervals = [
            (time(10, 0), time(14, 0)),  # 4 —á–∞—Å–∞
            (time(14, 0), time(18, 0)),  # 4 —á–∞—Å–∞
            (time(10, 0), time(12, 0)),  # 2 —á–∞—Å–∞
            (time(12, 0), time(15, 0)),  # 3 —á–∞—Å–∞
            (time(15, 0), time(18, 0)),  # 3 —á–∞—Å–∞
        ]
        
        current_date = self.start_date
        
        while current_date <= self.end_date:
            for service in services:
                # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (3 —á–∞—Å–∞)
                    free_start_hour = random.randint(10, 15)  # –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å 10 –¥–æ 15
                    free_start = time(free_start_hour, 0)
                    free_end = time(free_start_hour + 3, 0)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–æ–∫—Ä—É–≥ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                    intervals = []
                    
                    if free_start_hour > 10:
                        intervals.append((time(10, 0), free_start))
                    
                    if free_start_hour + 3 < 18:
                        intervals.append((free_end, time(18, 0)))
                    
                    patterns[(service['id'], current_date)] = intervals
                else:
                    # –û–±—ã—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω - –º–∞—Å—Ç–µ—Ä –∑–∞–Ω—è—Ç –≤–µ—Å—å –¥–µ–Ω—å
                    if random.random() < 0.5:
                        intervals = random.choice(base_intervals)
                        patterns[(service['id'], current_date)] = [intervals]
                    else:
                        intervals = random.choice(extended_intervals)
                        patterns[(service['id'], current_date)] = [intervals]
            
            current_date += timedelta(days=1)
        
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return patterns
    
    def create_appointments(self, services: List[Dict], masters: List[Dict], patterns: Dict[Tuple[int, date], List[Tuple[time, time]]]):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
            max_id_query = "SELECT MAX(id) as max_id FROM appointments"
            max_id_result = execute_query(max_id_query)
            max_id = max_id_result[0][0] if max_id_result[0][0] is not None else 0
            
            appointment_id = max_id + 1
            appointments_created = 0
            
            current_date = self.start_date
            
            while current_date <= self.end_date:
                for service in services:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    pattern_key = (service['id'], current_date)
                    if pattern_key not in patterns:
                        continue
                    
                    intervals = patterns[pattern_key]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É
                    available_masters = []
                    for master in masters:
                        master_services = self.get_master_services(master['id'])
                        if service['id'] in master_services:
                            available_masters.append(master)
                    
                    if not available_masters:
                        continue
                    
                    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
                    selected_master = random.choice(available_masters)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    for start_time, end_time in intervals:
                        appointment_data = {
                            'id': appointment_id,
                            'user_telegram_id': self.fake_user_telegram_id,
                            'master_id': selected_master['id'],
                            'service_id': service['id'],
                            'start_time': datetime.combine(current_date, start_time),
                            'end_time': datetime.combine(current_date, end_time)
                        }
                        
                        upsert_record('appointments', appointment_data)
                        appointments_created += 1
                        
                        print(f"‚úÖ –ó–∞–ø–∏—Å—å {appointments_created}: {service['name']} - "
                              f"–ú–∞—Å—Ç–µ—Ä {selected_master['name']} - "
                              f"{current_date} {start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}")
                        
                        appointment_id += 1
                
                current_date += timedelta(days=1)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {appointments_created}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise
    
    def verify_generated_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é
            appointments_query = f"""
                SELECT COUNT(*) FROM appointments 
                WHERE CAST(start_time AS Date) >= CAST('{self.start_date}' AS Date) 
                AND CAST(start_time AS Date) <= CAST('{self.end_date}' AS Date)
            """
            appointments_count = execute_query(appointments_query)[0][0]
            print(f"üìù –ó–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ: {appointments_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã
            schedules_query = f"""
                SELECT COUNT(*) FROM master_schedules 
                WHERE CAST(date AS Date) >= CAST('{self.start_date}' AS Date) 
                AND CAST(date AS Date) <= CAST('{self.end_date}' AS Date)
            """
            schedules_count = execute_query(schedules_query)[0][0]
            print(f"üìÖ –ì—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–æ: {schedules_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:")
            current_date = self.start_date
            while current_date <= self.end_date:
                day_appointments_query = f"""
                    SELECT COUNT(*) FROM appointments 
                    WHERE CAST(start_time AS Date) = CAST('{current_date}' AS Date)
                """
                day_count = execute_query(day_appointments_query)[0][0]
                print(f"   {current_date.strftime('%Y-%m-%d (%A)')}: {day_count} –∑–∞–ø–∏—Å–µ–π")
                current_date += timedelta(days=1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def generate_weekly_schedule(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.start_date} - {self.end_date}")
        print("-" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            services = self.get_all_services()
            masters = self.get_all_masters()
            
            if not services:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return 1
            
            if not masters:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return 1
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.clear_weekly_data()
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
            self.create_master_schedules(masters)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
            patterns = self.generate_time_patterns(services, masters)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
            self.create_appointments(services, masters, patterns)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.verify_generated_data()
            
            print("\n" + "=" * 60)
            print("üéâ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ –°–û–ó–î–ê–ù–û!")
            print("=" * 60)
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.start_date} - {self.end_date}")
            print(f"üìã –£—Å–ª—É–≥: {len(services)}")
            print(f"üë• –ú–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}")
            print("\n‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
            print("   ‚Ä¢ –ö–∞–∂–¥—ã–π –º–∞—Å—Ç–µ—Ä –∑–∞–Ω—è—Ç –æ–¥–Ω–æ–π —É—Å–ª—É–≥–æ–π —Å 10:00 –¥–æ 18:00")
            print("   ‚Ä¢ –£ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è")
            print("   ‚Ä¢ –ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ 3 —á–∞—Å–∞")
            print("   ‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
            print("=" * 60)
            
            return 0
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return 1


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    generator = WeeklyScheduleGenerator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        init_database()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        exit_code = generator.generate_weekly_schedule()
        
        return exit_code
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        close_database()


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
