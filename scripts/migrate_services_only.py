#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã services –∏–∑ SQLite –≤ YDB
"""

import os
import sys
import sqlite3
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_services_only():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É services –∏–∑ SQLite –≤ YDB"""
    
    logger.info("üöÄ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É services...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqlite_conn = sqlite3.connect("beauty_salon.db")
    sqlite_cursor = sqlite_conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ services –∏–∑ SQLite
        sqlite_cursor.execute("SELECT id, name, description, price, duration_minutes FROM services")
        services_data = sqlite_cursor.fetchall()
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(services_data)} —É—Å–ª—É–≥ –≤ SQLite")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                def insert_services(session):
                    for service in services_data:
                        # –ü—Ä–æ—Å—Ç–æ–π INSERT –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        query = f"""
                            INSERT INTO services (id, name, description, price, duration_minutes)
                            VALUES ({service[0]}, '{service[1].replace("'", "''")}', '{service[2].replace("'", "''") if service[2] else ""}', {service[3]}, {service[4]})
                        """
                        prepared = session.prepare(query)
                        session.transaction().execute(prepared)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service[1]}")
                
                pool.retry_operation_sync(insert_services)
                logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(services_data)} —É—Å–ª—É–≥!")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        sqlite_conn.close()

if __name__ == "__main__":
    migrate_services_only()
