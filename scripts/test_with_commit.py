#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —è–≤–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_with_commit():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º"""
    
    logger.info("üß™ –¢–µ—Å—Ç —Å —è–≤–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                def insert_with_commit(session):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π –∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx = session.transaction()
                    try:
                        query = """
                            UPSERT INTO services (id, name, description, price, duration_minutes)
                            VALUES (888, '–¢–µ—Å—Ç —Å –∫–æ–º–º–∏—Ç–æ–º', '–û–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–º–º–∏—Ç–æ–º', 2000.0, 90)
                        """
                        prepared = session.prepare(query)
                        tx.execute(prepared)
                        tx.commit()
                        logger.info("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞!")
                    except Exception as e:
                        tx.rollback()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞, –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                        raise
                
                pool.retry_operation_sync(insert_with_commit)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                def check_result(session):
                    prepared = session.prepare("SELECT COUNT(*) as count FROM services")
                    result = session.transaction().execute(prepared)
                    count = result[0].rows[0][0]
                    logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ services: {count}")
                    
                    if count > 0:
                        prepared = session.prepare("SELECT * FROM services WHERE id = 888")
                        result = session.transaction().execute(prepared)
                        rows = result[0].rows
                        if rows:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {list(rows[0])}")
                        else:
                            logger.warning("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                pool.retry_operation_sync(check_result)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    test_with_commit()
