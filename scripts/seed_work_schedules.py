"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ YDB
"""

import os
import sys
import logging
import time
import random
from datetime import time as dt_time, date
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import execute_query, upsert_record, delete_record

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.getenv("ENV_FILE", ".env"))


def cleanup_old_data():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    try:
        logger.info("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã...")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        delete_record('work_schedules', '1=1')  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        delete_record('schedule_exceptions', '1=1')  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def get_random_schedule():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 10:00-20:00"""
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (10:00-11:00)
    start_hour = random.randint(10, 11)
    start_minute = random.choice([0, 30])
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (18:00-20:00)
    end_hour = random.randint(18, 20)
    end_minute = random.choice([0, 30])
    
    # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–µ–Ω—å
    if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–Ω—è
        end_hour = random.randint(16, 18)
    
    start_time = f"{start_hour:02d}:{start_minute:02d}:00"
    end_time = f"{end_hour:02d}:{end_minute:02d}:00"
    
    return start_time, end_time


def seed_work_schedules():
    """–ù–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    try:
        logger.info("üóÑÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã...")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_old_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters_query = "SELECT id FROM masters ORDER BY id"
        masters_rows = execute_query(masters_query)
        
        if not masters_rows:
            logger.warning("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π seed.py")
            return
        
        masters = [row[0] for row in masters_rows]
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(masters)} –º–∞—Å—Ç–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        schedules_created = 0
        
        for master_id in masters:
            logger.info(f"üìÖ –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            start_time, end_time = get_random_schedule()
            logger.info(f"üïê –ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {start_time} - {end_time}")
            
            # –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç 5/2 —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É
            for day in range(5):  # –ü–Ω-–ü—Ç (0-4)
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
                id_query = "SELECT MAX(id) as max_id FROM work_schedules"
                id_rows = execute_query(id_query)
                max_id = id_rows[0][0] if id_rows[0][0] is not None else 0
                new_id = max_id + 1
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
                schedule_data = {
                    'id': new_id,
                    'master_id': master_id,
                    'day_of_week': day,
                    'start_time': start_time,
                    'end_time': end_time
                }
                
                try:
                    upsert_record('work_schedules', schedule_data)
                    schedules_created += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}, –¥–µ–Ω—å {day}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}, –¥–µ–Ω—å {day}: {e}")
                    continue
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {schedules_created} –∑–∞–ø–∏—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        exceptions_created = 0
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        masters_for_exceptions = masters[:3]  # –ü–µ—Ä–≤—ã–µ 3 –º–∞—Å—Ç–µ—Ä–∞
        
        for master_id in masters_for_exceptions:
            logger.info(f"üìÖ –°–æ–∑–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            exceptions = [
                {
                    'date': date(2024, 12, 31),  # –ù–æ–≤—ã–π –≥–æ–¥ - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å
                    'is_day_off': False,
                    'start_time': '10:00:00',
                    'end_time': '15:00:00'
                },
                {
                    'date': date(2025, 1, 1),  # –ù–æ–≤—ã–π –≥–æ–¥ - –≤—ã—Ö–æ–¥–Ω–æ–π
                    'is_day_off': True,
                    'start_time': None,
                    'end_time': None
                }
            ]
            
            for exception in exceptions:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
                id_query = "SELECT MAX(id) as max_id FROM schedule_exceptions"
                id_rows = execute_query(id_query)
                max_id = id_rows[0][0] if id_rows[0][0] is not None else 0
                new_id = max_id + 1
                
                # –°–æ–∑–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                exception_data = {
                    'id': new_id,
                    'master_id': master_id,
                    'date': exception['date'],
                    'is_day_off': exception['is_day_off'],
                    'start_time': exception['start_time'],
                    'end_time': exception['end_time']
                }
                
                try:
                    upsert_record('schedule_exceptions', exception_data)
                    exceptions_created += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {exception['date']}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
                    continue
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {exceptions_created} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞")
        logger.info("üéâ –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        raise


if __name__ == "__main__":
    try:
        seed_work_schedules()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)