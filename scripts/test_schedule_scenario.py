#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.

–°–æ–∑–¥–∞–µ—Ç "—á–∏—Å—Ç—É—é" —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.
"""

import sys
import os
from datetime import date, datetime, time
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from app.core.database import (
    get_session_pool, 
    execute_query, 
    upsert_record, 
    delete_record,
    init_database,
    close_database
)


# –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ç–µ—Å—Ç–∞
TEST_DATE = date(2025, 10, 20)
MANICURE_MASTERS_IDS = [10, 9, 8, 7, 6, 5, 3]
MANICURE_SERVICE_ID = 6  # ID —É—Å–ª—É–≥–∏ "–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫"
FAKE_USER_TELEGRAM_ID = 999999999


def clear_tables():
    """–®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü."""
    print("üóÑÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...")
    
    try:
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É appointments
        delete_record("appointments", "1=1")  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ appointments –æ—á–∏—â–µ–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É master_schedules
        delete_record("master_schedules", "1=1")  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ master_schedules –æ—á–∏—â–µ–Ω–∞")
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        raise


def create_master_schedules():
    """–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã."""
    print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö
        max_id_query = "SELECT MAX(id) as max_id FROM master_schedules"
        max_id_result = execute_query(max_id_query)
        max_id = max_id_result[0][0] if max_id_result[0][0] is not None else 0
        
        for i, master_id in enumerate(MANICURE_MASTERS_IDS, 1):
            schedule_data = {
                'id': max_id + i,  # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                'master_id': master_id,
                'date': TEST_DATE,
                'start_time': time(10, 0),  # 10:00
                'end_time': time(18, 0)     # 18:00
            }
            
            upsert_record('master_schedules', schedule_data)
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {TEST_DATE} (10:00-18:00)")
        
        print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        raise


def create_test_appointments():
    """–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (appointments)."""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö
        max_id_query = "SELECT MAX(id) as max_id FROM appointments"
        max_id_result = execute_query(max_id_query)
        max_id = max_id_result[0][0] if max_id_result[0][0] is not None else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        appointments_data = []
        appointment_id = max_id + 1
        
        # –ú–∞—Å—Ç–µ—Ä–∞ —Å ID 10, 9, 8, 7, 6: –¥–≤–µ –∑–∞–ø–∏—Å–∏, —Å 10:00 –¥–æ 12:30 –∏ —Å 14:00 –¥–æ 16:00
        for master_id in [10, 9, 8, 7, 6]:
            # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: 10:00-12:30
            appointments_data.append({
                'id': appointment_id,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': master_id,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(10, 0)),
                'end_time': datetime.combine(TEST_DATE, time(12, 30))
            })
            appointment_id += 1
            
            # –í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å: 14:00-16:00
            appointments_data.append({
                'id': appointment_id,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': master_id,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(14, 0)),
                'end_time': datetime.combine(TEST_DATE, time(16, 0))
            })
            appointment_id += 1
        
        # –ú–∞—Å—Ç–µ—Ä —Å ID 5: –¥–≤–µ –∑–∞–ø–∏—Å–∏, —Å 10:00 –¥–æ 12:30 –∏ —Å 16:00 –¥–æ 17:30
        master_5_appointments = [
            {
                'id': appointment_id,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': 5,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(10, 0)),
                'end_time': datetime.combine(TEST_DATE, time(12, 30))
            },
            {
                'id': appointment_id + 1,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': 5,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(16, 0)),
                'end_time': datetime.combine(TEST_DATE, time(17, 30))
            }
        ]
        appointments_data.extend(master_5_appointments)
        appointment_id += 2
        
        # –ú–∞—Å—Ç–µ—Ä —Å ID 3: –¥–≤–µ –∑–∞–ø–∏—Å–∏, —Å 12:30 –¥–æ 14:00 –∏ —Å 14:00 –¥–æ 16:00
        master_3_appointments = [
            {
                'id': appointment_id,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': 3,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(12, 30)),
                'end_time': datetime.combine(TEST_DATE, time(14, 0))
            },
            {
                'id': appointment_id + 1,
                'user_telegram_id': FAKE_USER_TELEGRAM_ID,
                'master_id': 3,
                'service_id': MANICURE_SERVICE_ID,
                'start_time': datetime.combine(TEST_DATE, time(14, 0)),
                'end_time': datetime.combine(TEST_DATE, time(16, 0))
            }
        ]
        appointments_data.extend(master_3_appointments)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        for i, appointment in enumerate(appointments_data, 1):
            upsert_record('appointments', appointment)
            print(f"‚úÖ –ó–∞–ø–∏—Å—å {i} —Å–æ–∑–¥–∞–Ω–∞: –º–∞—Å—Ç–µ—Ä {appointment['master_id']}, "
                  f"{appointment['start_time'].strftime('%H:%M')}-{appointment['end_time'].strftime('%H:%M')}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        raise


def verify_test_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ master_schedules
        schedules_query = f"SELECT COUNT(*) FROM master_schedules WHERE date = Date('{TEST_DATE}')"
        schedules_count = execute_query(schedules_query)[0][0]
        print(f"üìÖ –ì—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–æ: {schedules_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ appointments
        appointments_query = f"""
            SELECT COUNT(*) FROM appointments 
            WHERE DATE(start_time) = Date('{TEST_DATE}') 
            AND service_id = {MANICURE_SERVICE_ID}
        """
        appointments_count = execute_query(appointments_query)[0][0]
        print(f"üìù –ó–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ: {appointments_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        print("\nüìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º:")
        for master_id in MANICURE_MASTERS_IDS:
            master_appointments_query = f"""
                SELECT start_time, end_time FROM appointments 
                WHERE master_id = {master_id} 
                AND DATE(start_time) = Date('{TEST_DATE}')
                ORDER BY start_time
            """
            master_appointments = execute_query(master_appointments_query)
            
            print(f"–ú–∞—Å—Ç–µ—Ä {master_id}:")
            for appointment in master_appointments:
                start_time = appointment[0].strftime('%H:%M')
                end_time = appointment[1].strftime('%H:%M')
                print(f"  - {start_time}-{end_time}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    print(f"üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {TEST_DATE}")
    print(f"üë• –ú–∞—Å—Ç–µ—Ä–∞ –º–∞–Ω–∏–∫—é—Ä–∞: {MANICURE_MASTERS_IDS}")
    print(f"üíÖ ID —É—Å–ª—É–≥–∏ –º–∞–Ω–∏–∫—é—Ä–∞: {MANICURE_SERVICE_ID}")
    print("-" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        init_database()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
        clear_tables()
        create_master_schedules()
        create_test_appointments()
        verify_test_data()
        
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê –ì–û–¢–û–í–ê!")
        print("=" * 60)
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {TEST_DATE}")
        print("üíÖ –£—Å–ª—É–≥–∞: –ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫ (90 –º–∏–Ω—É—Ç)")
        print("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 20.10.2025:")
        print("   –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: 12:30-14:00, 16:00-17:30")
        print("\nüìä –°—Ö–µ–º–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:")
        print("   –ú–∞—Å—Ç–µ—Ä–∞ 10,9,8,7,6: 10:00-12:30, 14:00-16:00")
        print("   –ú–∞—Å—Ç–µ—Ä 5: 10:00-12:30, 16:00-17:30")
        print("   –ú–∞—Å—Ç–µ—Ä 3: 12:30-14:00, 14:00-16:00")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        close_database()
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
