"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ YDB
"""

import ydb
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.getenv("ENV_FILE", ".env"))


def create_schedule_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ YDB"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    endpoint = os.getenv('YDB_ENDPOINT')
    database = os.getenv('YDB_DATABASE')
    service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
    
    if not endpoint or not database:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YDB_ENDPOINT –∏ YDB_DATABASE")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞
    key_file_path = service_account_key_file
    if not os.path.exists(key_file_path):
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        key_file_path = os.path.join(project_root, service_account_key_file)
    
    if not os.path.exists(key_file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –∫–ª—é—á–∞ {service_account_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
    driver_config = ydb.DriverConfig(
        endpoint=endpoint,
        database=database,
        credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
    )
    
    with ydb.Driver(driver_config) as driver:
        driver.wait(timeout=5, fail_fast=True)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        with ydb.SessionPool(driver) as pool:
            
            def create_work_schedules_table(session):
                """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É work_schedules"""
                query = """
                CREATE TABLE work_schedules (
                    id Int32,
                    master_id Int32,
                    day_of_week Int32,
                    start_time String,
                    end_time String,
                    PRIMARY KEY (id)
                )
                """
                session.execute_scheme(query)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ work_schedules —Å–æ–∑–¥–∞–Ω–∞")
            
            def create_schedule_exceptions_table(session):
                """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É schedule_exceptions"""
                query = """
                CREATE TABLE schedule_exceptions (
                    id Int32,
                    master_id Int32,
                    date Date,
                    is_day_off Bool,
                    start_time String,
                    end_time String,
                    PRIMARY KEY (id)
                )
                """
                session.execute_scheme(query)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ schedule_exceptions —Å–æ–∑–¥–∞–Ω–∞")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                pool.retry_operation_sync(create_work_schedules_table)
                pool.retry_operation_sync(create_schedule_exceptions_table)
                
                logger.info("üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
                
            except Exception as e:
                if "already exists" in str(e).lower():
                    logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
                    raise


if __name__ == "__main__":
    try:
        create_schedule_tables()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
