#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è ChromaDB –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª–∏—Ç–∏–∫.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.getenv("ENV_FILE", ".env"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
from app.core.vector_store_client import chroma_client


def seed_knowledge_base():
    """–ù–∞–ø–æ–ª–Ω—è–µ—Ç ChromaDB –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª–∏—Ç–∏–∫."""
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB...")
    
    print("üìö –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'salon_policies'...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collection = chroma_client.get_or_create_collection(
        name="salon_policies",
        metadata={"description": "–ü–æ–ª–∏—Ç–∏–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã"}
    )
    
    print("üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª–∏—Ç–∏–∫...")
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
    knowledge_base_path = Path("knowledge_base")
    
    if not knowledge_base_path.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è knowledge_base –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö .txt —Ñ–∞–π–ª–æ–≤
    txt_files = list(knowledge_base_path.glob("*.txt"))
    
    if not txt_files:
        print("‚ùå –§–∞–π–ª—ã –ø–æ–ª–∏—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ knowledge_base!")
        return
    
    documents = []
    ids = []
    
    for file_path in txt_files:
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path.name}")
        
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read().strip()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) –∫–∞–∫ ID
        file_id = file_path.stem
        
        documents.append(content)
        ids.append(file_id)
    
    print("üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ ChromaDB...")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection.add(
        documents=documents,
        ids=ids
    )
    
    print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞!")
    print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
    print("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫:")
    for i, doc_id in enumerate(ids, 1):
        print(f"   {i}. {doc_id}")
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! ChromaDB –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")


if __name__ == "__main__":
    try:
        seed_knowledge_base()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChromaDB –≤ .env —Ñ–∞–π–ª–µ")
