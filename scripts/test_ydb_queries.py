#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç YDB –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ydb_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ YDB"""
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º YDB –∑–∞–ø—Ä–æ—Å—ã...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                def test_query_methods(session):
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —É session
                    logger.info("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã session:")
                    methods = [method for method in dir(session) if not method.startswith('_')]
                    logger.info(f"–ú–µ—Ç–æ–¥—ã: {methods}")
                    
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º execute_query
                        logger.info("üîç –ü—Ä–æ–±—É–µ–º execute_query")
                        result = session.execute_query("SELECT COUNT(*) as count FROM services")
                        count = result[0].rows[0][0]
                        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {count} –∑–∞–ø–∏—Å–µ–π –≤ services")
                        
                    except Exception as e:
                        logger.error(f"‚ùå execute_query –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º execute
                        logger.info("üîç –ü—Ä–æ–±—É–µ–º execute")
                        result = session.execute("SELECT COUNT(*) as count FROM services")
                        count = result[0].rows[0][0]
                        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {count} –∑–∞–ø–∏—Å–µ–π –≤ services")
                        
                    except Exception as e:
                        logger.error(f"‚ùå execute –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        logger.info("üîç –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                        def query_func():
                            return session.execute_query("SELECT COUNT(*) as count FROM services")
                        
                        result = session.transaction().execute(query_func)
                        count = result[0].rows[0][0]
                        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {count} –∑–∞–ø–∏—Å–µ–π –≤ services")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ prepare
                        logger.info("üîç –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ prepare")
                        prepared = session.prepare("SELECT COUNT(*) as count FROM services")
                        result = session.transaction().execute(prepared)
                        count = result[0].rows[0][0]
                        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {count} –∑–∞–ø–∏—Å–µ–π –≤ services")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Prepare –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                
                pool.retry_operation_sync(test_query_methods)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    test_ydb_queries()
