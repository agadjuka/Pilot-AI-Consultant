"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import sys
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append('.')

from app.core.database import init_database, execute_query


def check_raw_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—ã–≤–æ–¥–∏—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–• (–°–´–†–´–ï –î–ê–ù–ù–´–ï)")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        query = """
            SELECT id, master_id, service_id, start_time, end_time
            FROM appointments
            WHERE CAST(start_time AS Date) = CAST('2025-10-20' AS Date)
            ORDER BY master_id, start_time
        """
        
        rows = execute_query(query)
        
        if not rows:
            print("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π:")
        print()
        
        for i, row in enumerate(rows, 1):
            appointment_id, master_id, service_id, start_time, end_time = row
            print(f"{i:2d}. ID: {appointment_id}")
            print(f"    –ú–∞—Å—Ç–µ—Ä: {master_id}")
            print(f"    –£—Å–ª—É–≥–∞: {service_id}")
            print(f"    –ù–∞—á–∞–ª–æ: {start_time}")
            print(f"    –ö–æ–Ω–µ—Ü: {end_time}")
            print()
        
        print(f"üìä –ò–¢–û–ì–û: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        morning_count = 0
        afternoon_count = 0
        other_count = 0
        
        for row in rows:
            start_time = str(row[3])  # start_time
            if '09:' in start_time or '10:' in start_time or '11:' in start_time or '12:' in start_time:
                morning_count += 1
            elif '14:' in start_time or '15:' in start_time or '16:' in start_time or '17:' in start_time:
                afternoon_count += 1
            else:
                other_count += 1
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –í–†–ï–ú–ï–ù–ò:")
        print(f"   üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã (9-12): {morning_count}")
        print(f"   üåÜ –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã (14-17): {afternoon_count}")
        print(f"   ‚ö†Ô∏è –î—Ä—É–≥–∏–µ —Å–ª–æ—Ç—ã: {other_count}")
        
        if morning_count >= 6 and afternoon_count >= 6:
            print(f"\n‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –ü–†–ê–í–ò–õ–¨–ù–û!")
            print(f"üìã –û–∂–∏–¥–∞–µ–º—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
            print(f"   ‚Ä¢ 12:30-14:30 (–æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤)")
            print(f"   ‚Ä¢ 17:00-18:30 (–≤–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã)")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YDB...")
        init_database()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        check_raw_data()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    main()
