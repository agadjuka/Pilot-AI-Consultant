#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã master_services.
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —É—Å–ª—É–≥—É —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import sys
import os
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from app.core.database import (
    get_session_pool, 
    execute_query, 
    upsert_record, 
    delete_record,
    init_database,
    close_database
)


def get_all_masters() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...")
    
    query = "SELECT id, name, specialization FROM masters ORDER BY id"
    rows = execute_query(query)
    
    masters = []
    for row in rows:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –±–∞–π—Ç–∞—Ö
        name = row[1].decode('utf-8') if isinstance(row[1], bytes) else str(row[1])
        specialization = row[2].decode('utf-8') if isinstance(row[2], bytes) else str(row[2]) if row[2] else ""
        
        masters.append({
            'id': row[0],
            'name': name,
            'specialization': specialization
        })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}")
    for master in masters:
        print(f"   - {master['name']} (ID: {master['id']}, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master['specialization']})")
    
    return masters


def get_all_services() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüíÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥...")
    
    query = "SELECT id, name, description FROM services ORDER BY id"
    rows = execute_query(query)
    
    services = []
    for row in rows:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –±–∞–π—Ç–∞—Ö
        name = row[1].decode('utf-8') if isinstance(row[1], bytes) else str(row[1])
        description = row[2].decode('utf-8') if isinstance(row[2], bytes) else str(row[2]) if row[2] else ""
        
        services.append({
            'id': row[0],
            'name': name,
            'description': description
        })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")
    for service in services:
        print(f"   - {service['name']} (ID: {service['id']})")
    
    return services


def clear_master_services():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É master_services."""
    print("\nüóÑÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã master_services...")
    
    try:
        delete_record("master_services", "1=1")  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ master_services –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        raise


def assign_services_to_masters(masters: List[Dict[str, Any]], services: List[Dict[str, Any]]):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥."""
    print("\nüîó –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —É—Å–ª—É–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    services_dict = {service['name'].lower(): service for service in services}
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –Ω–∞ —É—Å–ª—É–≥–∏
    specialization_mapping = {
        '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥': ['—á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞', '–º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞'],
        '–º–∞—Å—Ç–µ—Ä –ø–æ –±—Ä–æ–≤—è–º': ['–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π'],
        '–º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞': ['–º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫', '–ø–µ–¥–∏–∫—é—Ä', '–Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π'],
        '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': ['–∂–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π', '—Å–ª–æ–∂–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', '—É–∫–ª–∞–¥–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è'],
        '–º–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º': ['–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü']
    }
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    assigned_services = set()
    assigned_count = 0
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –Ω–∞–∑–Ω–∞—á–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    for master in masters:
        specialization = master['specialization'].lower() if master['specialization'] else ""
        master_name = master['name'].lower()
        
        assigned_services_for_master = []
        
        # –ò—â–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if specialization in specialization_mapping:
            for service_name in specialization_mapping[specialization]:
                if service_name in services_dict:
                    service = services_dict[service_name]
                    if service['id'] not in assigned_services:
                        assigned_services_for_master.append(service)
                        assigned_services.add(service['id'])
                        break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not assigned_services_for_master:
            for spec_key, service_names in specialization_mapping.items():
                if spec_key in specialization or spec_key in master_name:
                    for service_name in service_names:
                        if service_name in services_dict:
                            service = services_dict[service_name]
                            if service['id'] not in assigned_services:
                                assigned_services_for_master.append(service)
                                assigned_services.add(service['id'])
                                break
                    if assigned_services_for_master:
                        break
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä—É
        for service in assigned_services_for_master:
            master_service_data = {
                'master_id': master['id'],
                'service_id': service['id']
            }
            upsert_record('master_services', master_service_data)
            print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master['name']} (ID: {master['id']}) -> {service['name']} (ID: {service['id']})")
            assigned_count += 1
    
    # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –º–∞—Å—Ç–µ—Ä–∞–º
    print("\nüîÑ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥...")
    
    # –ú–∞—Å—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    multi_service_masters = []
    for master in masters:
        specialization = master['specialization'].lower() if master['specialization'] else ""
        if specialization in ['–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥', '–º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä']:
            multi_service_masters.append(master)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    for master in multi_service_masters[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 3 –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
        specialization = master['specialization'].lower()
        additional_services = []
        
        if specialization == '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥':
            additional_services = ['–º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞']
        elif specialization == '–º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞':
            additional_services = ['–ø–µ–¥–∏–∫—é—Ä', '–Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π']
        elif specialization == '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä':
            additional_services = ['—É–∫–ª–∞–¥–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è', '—Å–ª–æ–∂–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ']
        
        for service_name in additional_services:
            if service_name in services_dict:
                service = services_dict[service_name]
                if service['id'] not in assigned_services:
                    master_service_data = {
                        'master_id': master['id'],
                        'service_id': service['id']
                    }
                    upsert_record('master_services', master_service_data)
                    print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master['name']} (ID: {master['id']}) -> {service['name']} (ID: {service['id']}) [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è]")
                    assigned_services.add(service['id'])
                    assigned_count += 1
                    break
    
    # –¢—Ä–µ—Ç–∏–π –ø—Ä–æ—Ö–æ–¥: –ø–æ–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Å–ª—É–≥–∏
    print("\nüéØ –ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Å–ª—É–≥...")
    
    uncovered_services = [service for service in services if service['id'] not in assigned_services]
    
    if uncovered_services:
        print(f"üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Å–ª—É–≥–∏: {len(uncovered_services)}")
        for service in uncovered_services:
            print(f"   - {service['name']} (ID: {service['id']})")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞–º
        for i, service in enumerate(uncovered_services):
            if i < len(masters):
                master = masters[i]
                master_service_data = {
                    'master_id': master['id'],
                    'service_id': service['id']
                }
                upsert_record('master_services', master_service_data)
                print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master['name']} (ID: {master['id']}) -> {service['name']} (ID: {service['id']}) [–ø–æ–∫—Ä—ã—Ç–∏–µ]")
                assigned_count += 1
    
    print(f"\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —É—Å–ª—É–≥: {assigned_count}")
    print(f"‚úÖ –ü–æ–∫—Ä—ã—Ç–æ —É—Å–ª—É–≥: {len(assigned_services)} –∏–∑ {len(services)}")


def verify_assignments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ª—É–≥."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        query = """
            SELECT m.id, m.name, m.specialization, s.id as service_id, s.name as service_name
            FROM masters m
            JOIN master_services ms ON m.id = ms.master_id
            JOIN services s ON ms.service_id = s.id
            ORDER BY m.id
        """
        rows = execute_query(query)
        
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(rows)}")
        print("\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        masters_dict = {}
        for row in rows:
            master_id = row[0]
            master_name = row[1].decode('utf-8') if isinstance(row[1], bytes) else str(row[1])
            specialization = row[2].decode('utf-8') if isinstance(row[2], bytes) else str(row[2]) if row[2] else ""
            service_id = row[3]
            service_name = row[4].decode('utf-8') if isinstance(row[4], bytes) else str(row[4])
            
            if master_id not in masters_dict:
                masters_dict[master_id] = {
                    'name': master_name,
                    'specialization': specialization,
                    'services': []
                }
            
            masters_dict[master_id]['services'].append({
                'id': service_id,
                'name': service_name
            })
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        for master_id, master_info in masters_dict.items():
            services_str = ", ".join([f"{s['name']} (ID: {s['id']})" for s in master_info['services']])
            print(f"   –ú–∞—Å—Ç–µ—Ä {master_id}: {master_info['name']} ({master_info['specialization']}) -> {services_str}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º:")
        services_coverage = {}
        for row in rows:
            service_id = row[3]
            service_name = row[4].decode('utf-8') if isinstance(row[4], bytes) else str(row[4])
            if service_id not in services_coverage:
                services_coverage[service_id] = {'name': service_name, 'masters': 0}
            services_coverage[service_id]['masters'] += 1
        
        for service_id, info in services_coverage.items():
            print(f"   {info['name']} (ID: {service_id}): {info['masters']} –º–∞—Å—Ç–µ—Ä(–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥
        all_services_query = "SELECT id, name FROM services ORDER BY id"
        all_services_rows = execute_query(all_services_query)
        all_service_ids = {row[0] for row in all_services_rows}
        covered_service_ids = set(services_coverage.keys())
        uncovered_services = all_service_ids - covered_service_ids
        
        if uncovered_services:
            print(f"\n‚ö†Ô∏è –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —É—Å–ª—É–≥–∏: {len(uncovered_services)}")
            for service_id in uncovered_services:
                service_name = next(row[1].decode('utf-8') if isinstance(row[1], bytes) else str(row[1]) 
                                 for row in all_services_rows if row[0] == service_id)
                print(f"   - {service_name} (ID: {service_id})")
        else:
            print("\n‚úÖ –í—Å–µ —É—Å–ª—É–≥–∏ –ø–æ–∫—Ä—ã—Ç—ã –º–∞—Å—Ç–µ—Ä–∞–º–∏")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        masters_with_multiple_services = [master_id for master_id, master_info in masters_dict.items() 
                                        if len(master_info['services']) > 1]
        
        if masters_with_multiple_services:
            print(f"\n‚úÖ –ú–∞—Å—Ç–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏: {len(masters_with_multiple_services)}")
            for master_id in masters_with_multiple_services:
                master_info = masters_dict[master_id]
                services_count = len(master_info['services'])
                print(f"   - {master_info['name']}: {services_count} —É—Å–ª—É–≥")
        else:
            print("\nüìù –£ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ master_services")
    print("üéØ –¶–µ–ª—å: –ø–æ–∫—Ä—ã—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –º–∞—Å—Ç–µ—Ä–∞–º –¥–∞—Ç—å –ø–æ 2 —É—Å–ª—É–≥–∏")
    print("-" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        init_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        masters = get_all_masters()
        services = get_all_services()
        
        if not masters:
            print("‚ùå –ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
        if not services:
            print("‚ùå –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        clear_master_services()
        assign_services_to_masters(masters, services)
        verify_assignments()
        
        print("\n" + "=" * 60)
        print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print("‚úÖ –í—Å–µ —É—Å–ª—É–≥–∏ –ø–æ–∫—Ä—ã—Ç—ã –º–∞—Å—Ç–µ—Ä–∞–º–∏")
        print("‚úÖ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–º–µ—é—Ç –ø–æ 2 —É—Å–ª—É–≥–∏")
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ master_services –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        close_database()
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
