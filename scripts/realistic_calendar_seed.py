"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Google Calendar —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
"""
import random
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .env
os.chdir(project_root)

from app.core.database import get_session_local
from app.repositories.master_repository import MasterRepository
from app.repositories.service_repository import ServiceRepository

# –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–µ–∑ __init__.py
import importlib.util
spec = importlib.util.spec_from_file_location(
    "google_calendar_service",
    project_root / "app" / "services" / "google_calendar_service.py"
)
google_calendar_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(google_calendar_module)
GoogleCalendarService = google_calendar_module.GoogleCalendarService


class RealisticCalendarSeeder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–¥–µ—Ä–∞."""
        self.db = get_session_local()()
        self.calendar_service = GoogleCalendarService()
        self.master_repo = MasterRepository(self.db)
        self.service_repo = ServiceRepository(self.db)
        self.moscow_tz = ZoneInfo('Europe/Moscow')
        
        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å–∞–ª–æ–Ω–∞
        self.WORK_START_HOUR = 10
        self.WORK_END_HOUR = 20
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        self.masters = self.master_repo.get_all()
        self.services = self.service_repo.get_all()
        
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(self.masters)}")
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ª—É–≥: {len(self.services)}")
    
    def generate_realistic_schedule(self, start_date: datetime, days: int = 30):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        print(f"\nüìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {days} –¥–Ω–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {(start_date + timedelta(days=days)).strftime('%d.%m.%Y')}")
        
        total_created = 0
        
        for day_offset in range(days):
            current_date = start_date + timedelta(days=day_offset)
            day_created = self._fill_day_realistic(current_date, day_offset)
            total_created += day_created
            
            if day_offset % 7 == 0:  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {day_offset + 1}/{days} –¥–Ω–µ–π, —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}")
        
        print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}")
        return total_created
    
    def _fill_day_realistic(self, date: datetime, day_offset: int) -> int:
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            day_offset: –°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è)
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        created_count = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è
        scenario = self._get_day_scenario(day_offset)
        
        for master in self.masters:
            master_scenario = self._get_master_scenario(master, day_offset, scenario)
            master_records = self._create_master_records(date, master, master_scenario)
            created_count += master_records
        
        return created_count
    
    def _get_day_scenario(self, day_offset: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–Ω—è.
        
        Args:
            day_offset: –°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        
        Returns:
            str: –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è ('busy', 'normal', 'light', 'free')
        """
        if day_offset < 3:
            # –ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è - –æ—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
            return 'busy'
        elif day_offset < 7:
            # –°–ª–µ–¥—É—é—â–∏–µ 4 –¥–Ω—è - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            return 'normal'
        elif day_offset < 14:
            # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è - –ª–µ–≥–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            return 'light'
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏ - —Å–≤–æ–±–æ–¥–Ω—ã–µ
            return 'free'
    
    def _get_master_scenario(self, master, day_offset: int, day_scenario: str) -> dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.
        
        Args:
            master: –û–±—ä–µ–∫—Ç –º–∞—Å—Ç–µ—Ä–∞
            day_offset: –°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
            day_scenario: –û–±—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–Ω—è
        
        Returns:
            dict: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤
        master_id = master.id
        
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –±–æ–ª–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if master_id in [1, 3, 5]:  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
            busy_factor = 1.3
        elif master_id in [2, 4]:  # –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
            busy_factor = 1.0
        else:  # –ú–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
            busy_factor = 0.7
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–Ω—è
        if day_scenario == 'busy':
            base_records = random.randint(6, 8)
        elif day_scenario == 'normal':
            base_records = random.randint(3, 5)
        elif day_scenario == 'light':
            base_records = random.randint(1, 3)
        else:  # free
            base_records = random.randint(0, 1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–∫—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞
        records_count = max(0, int(base_records * busy_factor))
        
        # –ò–Ω–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ–±–æ–¥–µ–Ω
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            records_count = 0
        
        return {
            'records_count': records_count,
            'busy_factor': busy_factor,
            'scenario': day_scenario
        }
    
    def _create_master_records(self, date: datetime, master, scenario: dict) -> int:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            date: –î–∞—Ç–∞
            master: –û–±—ä–µ–∫—Ç –º–∞—Å—Ç–µ—Ä–∞
            scenario: –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        records_count = scenario['records_count']
        if records_count == 0:
            return 0
        
        created = 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        time_slots = self._generate_time_slots(date, records_count)
        
        for i, slot in enumerate(time_slots):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É—Å–ª—É–≥—É
            service = random.choice(self.services)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            start_time = slot['start']
            end_time = slot['end']
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ create_event
                success = self.calendar_service.create_event(
                    master_name=master.name,
                    service_name=service.name,
                    start_time_iso=start_time.isoformat(),
                    end_time_iso=end_time.isoformat()
                )
                
                if success:
                    created += 1
                    print(f"    ‚úì {master.name}: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} ({service.name})")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è {master.name}: {str(e)}")
        
        return created
    
    def _generate_time_slots(self, date: datetime, count: int) -> list:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π.
        
        Args:
            date: –î–∞—Ç–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        """
        slots = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        possible_times = []
        current_time = date.replace(
            hour=self.WORK_START_HOUR,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=self.moscow_tz
        )
        
        work_end = date.replace(
            hour=self.WORK_END_HOUR,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=self.moscow_tz
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
        while current_time < work_end:
            possible_times.append(current_time)
            current_time += timedelta(minutes=30)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        used_times = set()
        
        for _ in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            attempts = 0
            while attempts < 20:  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–ø—ã—Ç–æ–∫
                start_time = random.choice(possible_times)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
                is_conflict = False
                for used_start in used_times:
                    if abs((start_time - used_start).total_seconds()) < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞ —Ä–∞–∑–Ω–∏—Ü—ã
                        is_conflict = True
                        break
                
                if not is_conflict:
                    used_times.add(start_time)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    service = random.choice(self.services)
                    duration_minutes = service.duration_minutes
                    
                    end_time = start_time + timedelta(minutes=duration_minutes)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
                    if end_time <= work_end:
                        slots.append({
                            'start': start_time,
                            'end': end_time,
                            'service': service
                        })
                    break
                
                attempts += 1
        
        return slots
    
    def clear_existing_records(self, start_date: datetime, days: int = 30):
        """
        –û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        """
        end_date = start_date + timedelta(days=days)
        
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
        
        deleted_count = self.calendar_service.clear_calendar(
            time_min=start_date,
            time_max=end_date
        )
        
        print(f"‚úì –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {deleted_count}")
        return deleted_count
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        print("=" * 70)
        print("üé® –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ö–ê–õ–ï–ù–î–ê–†–Ø –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        print("=" * 70)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π)
        now = datetime.now(self.moscow_tz)
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            self.clear_existing_records(start_date, 30)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            total_created = self.generate_realistic_schedule(start_date, 30)
            
            print("\n" + "=" * 70)
            print("‚úÖ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ö–ê–õ–ï–ù–î–ê–†–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}")
            print("üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
            print("   ‚Ä¢ –î–Ω–∏ 1-3: –û—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ (6-8 –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞)")
            print("   ‚Ä¢ –î–Ω–∏ 4-7: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (3-5 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚Ä¢ –î–Ω–∏ 8-14: –õ–µ–≥–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (1-3 –∑–∞–ø–∏—Å–∏)")
            print("   ‚Ä¢ –î–Ω–∏ 15-30: –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏ (0-1 –∑–∞–ø–∏—Å—å)")
            print("=" * 70)
            
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise
        finally:
            self.db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    seeder = RealisticCalendarSeeder()
    seeder.run()


if __name__ == "__main__":
    main()
