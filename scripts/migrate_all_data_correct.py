#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ YDB
"""

import os
import sys
import sqlite3
from datetime import datetime
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

import ydb
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_all_data():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ YDB —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º"""
    
    logger.info("üöÄ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ YDB...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqlite_conn = sqlite3.connect("beauty_salon.db")
    sqlite_cursor = sqlite_conn.cursor()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
        key_file_path = service_account_key_file
        if not os.path.exists(key_file_path):
            key_file_path = os.path.join(project_root, service_account_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä YDB
        driver_config = ydb.DriverConfig(
            endpoint=endpoint,
            database=database,
            credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
        )
        
        with ydb.Driver(driver_config) as driver:
            driver.wait(timeout=5, fail_fast=True)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            with ydb.SessionPool(driver) as pool:
                
                # 1. –ü–µ—Ä–µ–Ω–æ—Å–∏–º services
                logger.info("üìã –ü–µ—Ä–µ–Ω–æ—Å–∏–º services...")
                sqlite_cursor.execute("SELECT id, name, description, price, duration_minutes FROM services")
                services_data = sqlite_cursor.fetchall()
                
                def insert_services(session):
                    tx = session.transaction()
                    try:
                        for service in services_data:
                            query = f"""
                                UPSERT INTO services (id, name, description, price, duration_minutes)
                                VALUES ({service[0]}, '{service[1].replace("'", "''")}', '{service[2].replace("'", "''") if service[2] else ""}', {service[3]}, {service[4]})
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(services_data)} —É—Å–ª—É–≥")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_services)
                
                # 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º masters
                logger.info("üë• –ü–µ—Ä–µ–Ω–æ—Å–∏–º masters...")
                sqlite_cursor.execute("SELECT id, name, specialization FROM masters")
                masters_data = sqlite_cursor.fetchall()
                
                def insert_masters(session):
                    tx = session.transaction()
                    try:
                        for master in masters_data:
                            query = f"""
                                UPSERT INTO masters (id, name, specialization)
                                VALUES ({master[0]}, '{master[1].replace("'", "''")}', '{master[2].replace("'", "''") if master[2] else ""}')
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(masters_data)} –º–∞—Å—Ç–µ—Ä–æ–≤")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_masters)
                
                # 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º master_services
                logger.info("üîó –ü–µ—Ä–µ–Ω–æ—Å–∏–º master_services...")
                sqlite_cursor.execute("SELECT master_id, service_id FROM master_services")
                master_services_data = sqlite_cursor.fetchall()
                
                def insert_master_services(session):
                    tx = session.transaction()
                    try:
                        for ms in master_services_data:
                            query = f"""
                                UPSERT INTO master_services (master_id, service_id)
                                VALUES ({ms[0]}, {ms[1]})
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(master_services_data)} —Å–≤—è–∑–µ–π –º–∞—Å—Ç–µ—Ä-—É—Å–ª—É–≥–∞")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_master_services)
                
                # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º users –∏ clients –≤ clients
                logger.info("üë§ –ü–µ—Ä–µ–Ω–æ—Å–∏–º clients (–æ–±—ä–µ–¥–∏–Ω—è–µ–º users –∏ clients)...")
                
                sqlite_cursor.execute("SELECT id, telegram_id, first_name, phone_number FROM users")
                users_data = sqlite_cursor.fetchall()
                
                sqlite_cursor.execute("SELECT id, telegram_id, first_name, phone_number FROM clients")
                clients_data = sqlite_cursor.fetchall()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                all_clients = {}
                
                for user in users_data:
                    telegram_id = user[1]
                    if telegram_id not in all_clients:
                        all_clients[telegram_id] = {
                            'id': user[0],
                            'telegram_id': telegram_id,
                            'first_name': user[2],
                            'phone_number': user[3]
                        }
                
                for client in clients_data:
                    telegram_id = client[1]
                    all_clients[telegram_id] = {
                        'id': client[0],
                        'telegram_id': telegram_id,
                        'first_name': client[2],
                        'phone_number': client[3]
                    }
                
                def insert_clients(session):
                    tx = session.transaction()
                    try:
                        for client_data in all_clients.values():
                            query = f"""
                                UPSERT INTO clients (id, telegram_id, first_name, phone_number)
                                VALUES ({client_data['id']}, {client_data['telegram_id']}, '{client_data['first_name'].replace("'", "''") if client_data['first_name'] else ""}', '{client_data['phone_number'].replace("'", "''") if client_data['phone_number'] else ""}')
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(all_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_clients)
                
                # 5. –ü–µ—Ä–µ–Ω–æ—Å–∏–º appointments
                logger.info("üìÖ –ü–µ—Ä–µ–Ω–æ—Å–∏–º appointments...")
                sqlite_cursor.execute("SELECT id, user_telegram_id, master_id, service_id, start_time, end_time FROM appointments")
                appointments_data = sqlite_cursor.fetchall()
                
                def insert_appointments(session):
                    tx = session.transaction()
                    try:
                        for appointment in appointments_data:
                            start_time = datetime.fromisoformat(appointment[4].replace('Z', '+00:00'))
                            end_time = datetime.fromisoformat(appointment[5].replace('Z', '+00:00'))
                            
                            query = f"""
                                UPSERT INTO appointments (id, user_telegram_id, master_id, service_id, start_time, end_time)
                                VALUES ({appointment[0]}, {appointment[1]}, {appointment[2]}, {appointment[3]}, '{start_time.isoformat()}', '{end_time.isoformat()}')
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(appointments_data)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_appointments)
                
                # 6. –ü–µ—Ä–µ–Ω–æ—Å–∏–º dialog_history
                logger.info("üí¨ –ü–µ—Ä–µ–Ω–æ—Å–∏–º dialog_history...")
                sqlite_cursor.execute("SELECT id, user_id, role, message_text, timestamp FROM dialog_history")
                dialog_data = sqlite_cursor.fetchall()
                
                def insert_dialog_history(session):
                    tx = session.transaction()
                    try:
                        for dialog in dialog_data:
                            timestamp = datetime.fromisoformat(dialog[4].replace('Z', '+00:00'))
                            
                            query = f"""
                                UPSERT INTO dialog_history (id, user_id, role, message_text, timestamp)
                                VALUES ({dialog[0]}, {dialog[1]}, '{dialog[2]}', '{dialog[3].replace("'", "''")}', '{timestamp.isoformat()}')
                            """
                            prepared = session.prepare(query)
                            tx.execute(prepared)
                        tx.commit()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(dialog_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞")
                    except Exception as e:
                        tx.rollback()
                        raise e
                
                pool.retry_operation_sync(insert_dialog_history)
                
                logger.info("üéâ –ü–µ—Ä–µ–Ω–æ—Å –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        sqlite_conn.close()

if __name__ == "__main__":
    migrate_all_data()
