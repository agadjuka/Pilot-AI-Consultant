import os
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List


class GeminiDebugLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."""
    
    def __init__(self, debug_dir: str = "debug_logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä.
        
        Args:
            debug_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é debug_logs)
        """
        self.debug_dir = Path(debug_dir)
        self._request_counter = 0
    
    def clear_debug_logs(self) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏.
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ.
        """
        if self.debug_dir.exists():
            shutil.rmtree(self.debug_dir)
            print(f"   üóëÔ∏è  –ü–∞–ø–∫–∞ {self.debug_dir} –æ—á–∏—â–µ–Ω–∞")
        
        self.debug_dir.mkdir(parents=True, exist_ok=True)
        self._request_counter = 0
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∞: {self.debug_dir}")
    
    def log_request(
        self, 
        user_message: str, 
        dialog_history: List[Dict[str, str]] = None,
        system_instruction: str = None
    ) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dialog_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            system_instruction: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            
        Returns:
            –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (—Å—á–µ—Ç—á–∏–∫)
        """
        self._request_counter += 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._request_counter:04d}_{timestamp}_request.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"–ó–ê–ü–†–û–° ‚Ññ{self._request_counter} –ö GEMINI")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        if system_instruction:
            content.append("-" * 80)
            content.append("–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            content.append("-" * 80)
            content.append(system_instruction)
            content.append("")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        if dialog_history:
            content.append("-" * 80)
            content.append(f"–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê ({len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
            content.append("-" * 80)
            for i, msg in enumerate(dialog_history, 1):
                role = msg.get("role", "unknown")
                text = msg.get("text", "")
                content.append(f"\n[{i}] {role.upper()}:")
                content.append(text)
            content.append("")
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content.append("-" * 80)
        content.append("–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
        content.append("-" * 80)
        content.append(user_message)
        content.append("")
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: {filename}")
        return self._request_counter
    
    def log_response(self, request_number: int, response_text: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–≤—è–∑–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º)
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{request_number:04d}_{timestamp}_response.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"–û–¢–í–ï–¢ ‚Ññ{request_number} –û–¢ GEMINI")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        content.append(response_text)
        content.append("")
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç: {filename}")
    
    def log_function_calling_cycle(
        self,
        user_id: int,
        user_message: str,
        iterations: List[Dict]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª Function Calling –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            iterations: –°–ø–∏—Å–æ–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
                        –§–æ—Ä–º–∞—Ç: [{"iteration": 1, "request": "...", "response": "...", "function_calls": [...]}]
        """
        self._request_counter += 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._request_counter:04d}_{timestamp}_function_calling.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"FUNCTION CALLING –¶–ò–ö–õ ‚Ññ{self._request_counter}")
        content.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        content.append("-" * 80)
        content.append("–ò–°–•–û–î–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
        content.append("-" * 80)
        content.append(user_message)
        content.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if iterations and iterations[0].get("iteration") == 0:
            init_info = iterations[0].get("request", "")
            if "–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:" in init_info:
                content.append("-" * 80)
                content.append("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ß–ê–¢–ê –° GEMINI:")
                content.append("-" * 80)
                content.append(init_info)
                content.append("")
        
        # –ò—Ç–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é 0 - –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ)
        for iteration_data in iterations:
            iteration = iteration_data.get("iteration", 0)
            if iteration == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                
            content.append("=" * 80)
            content.append(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration}")
            content.append("=" * 80)
            content.append("")
            
            # –ó–∞–ø—Ä–æ—Å
            request = iteration_data.get("request", "")
            if request:
                content.append("-" * 80)
                content.append("–ó–ê–ü–†–û–° –ö GEMINI:")
                content.append("-" * 80)
                content.append(request)
                content.append("")
            
            # –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            response = iteration_data.get("response", "")
            if response:
                content.append("-" * 80)
                content.append("–û–¢–í–ï–¢ –û–¢ GEMINI:")
                content.append("-" * 80)
                content.append(response)
                content.append("")
            
            # –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
            function_calls = iteration_data.get("function_calls", [])
            if function_calls:
                content.append("-" * 80)
                content.append("–í–´–ó–û–í–´ –§–£–ù–ö–¶–ò–ô:")
                content.append("-" * 80)
                for fc in function_calls:
                    function_name = fc.get("name", "unknown")
                    function_args = fc.get("args", {})
                    function_result = fc.get("result", "")
                    
                    content.append(f"\nüìû –§—É–Ω–∫—Ü–∏—è: {function_name}")
                    content.append(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {function_args}")
                    content.append(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                    content.append(f"   {function_result}")
                content.append("")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_answer = iteration_data.get("final_answer", "")
            if final_answer:
                content.append("-" * 80)
                content.append("‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:")
                content.append("-" * 80)
                content.append(final_answer)
                content.append("")
        
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.debug_dir.mkdir(parents=True, exist_ok=True)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω Function Calling —Ü–∏–∫–ª: {filename}")
    
    def _make_json_serializable(self, obj):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (Part, FunctionResponse –∏ —Ç.–ø.) –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—ã—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º.
        """
        try:
            import google.ai.generativelanguage as protos  # type: ignore
        except Exception:
            protos = None  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        # –ü—Ä–∏–º–∏—Ç–∏–≤—ã
        if obj is None or isinstance(obj, (str, int, float, bool)):
            return obj
        # –°–ø–∏—Å–∫–∏/–∫–æ—Ä—Ç–µ–∂–∏
        if isinstance(obj, (list, tuple)):
            return [self._make_json_serializable(x) for x in obj]
        # –°–ª–æ–≤–∞—Ä–∏
        if isinstance(obj, dict):
            return {str(k): self._make_json_serializable(v) for k, v in obj.items()}
        
        # –û–±—ä–µ–∫—Ç—ã Gemini Parts
        text = getattr(obj, 'text', None)
        if text is not None:
            return {"type": "text_part", "text": text}
        
        function_call = getattr(obj, 'function_call', None)
        if function_call is not None:
            try:
                args = dict(getattr(function_call, 'args', {}))
            except Exception:
                args = {}
            return {"type": "function_call", "name": getattr(function_call, 'name', ''), "args": args}
        
        function_response = getattr(obj, 'function_response', None)
        if function_response is not None:
            return {
                "type": "function_response",
                "name": getattr(function_response, 'name', ''),
                "response": getattr(function_response, 'response', {})
            }
        
        # –§–æ–ª–ª–±–µ–∫ ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        try:
            return str(obj)
        except Exception:
            return "<unserializable>"

    def log_provider_call(self, provider: str, history, message) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É (Gemini/Yandex): –ø–æ–ª–Ω–∞—è history –∏ message.
        """
        self._request_counter += 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._request_counter:04d}_{timestamp}_{provider.lower()}_raw_request.json"
        filepath = self.debug_dir / filename
        
        try:
            import json
            payload = {
                "provider": provider,
                "history": self._make_json_serializable(history),
                "message": self._make_json_serializable(message)
            }
            self.debug_dir.mkdir(parents=True, exist_ok=True)
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(payload, f, ensure_ascii=False, indent=2)
            print(f"   üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {filename}")
        except Exception as e:
            print(f"[DEBUG LOGGER] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {e}")
    
    def log_simple_dialog(
        self,
        user_id: int,
        user_message: str,
        system_prompt: str,
        dialog_history: List[Dict],
        gemini_response: str
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ (–±–µ–∑ Function Calling) –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            dialog_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            gemini_response: –û—Ç–≤–µ—Ç –æ—Ç Gemini
        """
        self._request_counter += 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._request_counter:04d}_{timestamp}_simple_dialog.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"–ü–†–û–°–¢–û–ô –î–ò–ê–õ–û–ì ‚Ññ{self._request_counter}")
        content.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if system_prompt:
            content.append("-" * 80)
            content.append("–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:")
            content.append("-" * 80)
            content.append(system_prompt)
            content.append("")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        if dialog_history:
            content.append("-" * 80)
            content.append(f"–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê ({len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
            content.append("-" * 80)
            for i, msg in enumerate(dialog_history, 1):
                role = msg.get("role", "unknown")
                parts = msg.get("parts", [])
                text_content = ""
                for part in parts:
                    if isinstance(part, dict) and "text" in part:
                        text_content += part["text"]
                    elif hasattr(part, 'text'):
                        text_content += part.text
                
                content.append(f"\n[{i}] {role.upper()}:")
                content.append(text_content)
            content.append("")
        
        # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content.append("-" * 80)
        content.append("–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
        content.append("-" * 80)
        content.append(user_message)
        content.append("")
        
        # –û—Ç–≤–µ—Ç –æ—Ç Gemini
        content.append("-" * 80)
        content.append("–û–¢–í–ï–¢ –û–¢ GEMINI:")
        content.append("-" * 80)
        content.append(gemini_response)
        content.append("")
        
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.debug_dir.mkdir(parents=True, exist_ok=True)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥: {filename}")


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
gemini_debug_logger = GeminiDebugLogger()

