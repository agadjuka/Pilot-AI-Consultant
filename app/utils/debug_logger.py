import os
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List


class GeminiDebugLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."""
    
    def __init__(self, debug_dir: str = "debug_logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä.
        
        Args:
            debug_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é debug_logs)
        """
        self.debug_dir = Path(debug_dir)
        self._request_counter = 0
    
    def clear_debug_logs(self) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏.
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ.
        """
        if self.debug_dir.exists():
            shutil.rmtree(self.debug_dir)
            print(f"   üóëÔ∏è  –ü–∞–ø–∫–∞ {self.debug_dir} –æ—á–∏—â–µ–Ω–∞")
        
        self.debug_dir.mkdir(parents=True, exist_ok=True)
        self._request_counter = 0
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∞: {self.debug_dir}")
    
    def log_request(
        self, 
        user_message: str, 
        dialog_history: List[Dict[str, str]] = None,
        system_instruction: str = None
    ) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dialog_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            system_instruction: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            
        Returns:
            –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (—Å—á–µ—Ç—á–∏–∫)
        """
        self._request_counter += 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._request_counter:04d}_{timestamp}_request.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"–ó–ê–ü–†–û–° ‚Ññ{self._request_counter} –ö GEMINI")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        if system_instruction:
            content.append("-" * 80)
            content.append("–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            content.append("-" * 80)
            content.append(system_instruction)
            content.append("")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        if dialog_history:
            content.append("-" * 80)
            content.append(f"–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê ({len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
            content.append("-" * 80)
            for i, msg in enumerate(dialog_history, 1):
                role = msg.get("role", "unknown")
                text = msg.get("text", "")
                content.append(f"\n[{i}] {role.upper()}:")
                content.append(text)
            content.append("")
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content.append("-" * 80)
        content.append("–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
        content.append("-" * 80)
        content.append(user_message)
        content.append("")
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: {filename}")
        return self._request_counter
    
    def log_response(self, request_number: int, response_text: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–≤—è–∑–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º)
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{request_number:04d}_{timestamp}_response.txt"
        filepath = self.debug_dir / filename
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = []
        content.append("=" * 80)
        content.append(f"–û–¢–í–ï–¢ ‚Ññ{request_number} –û–¢ GEMINI")
        content.append(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("=" * 80)
        content.append("")
        content.append(response_text)
        content.append("")
        content.append("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("\n".join(content))
        
        print(f"   üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç: {filename}")


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
gemini_debug_logger = GeminiDebugLogger()

