"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ë–î.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook'–æ–≤ –∫–æ–≥–¥–∞ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.
"""
from fastapi import FastAPI, Request, BackgroundTasks
import logging
from app.core.config import settings
from app.api import telegram_stub
from app.services.dialogue_tracer_service import clear_debug_logs
from app.schemas.telegram import Update
from app.api.telegram_stub import process_telegram_update_stub

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Beauty Salon AI Assistant (STUB Mode)",
    version="0.1.0-stub"
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
app.include_router(telegram_stub.router, prefix="/telegram", tags=["Telegram-Stub"])


@app.on_event("startup")
async def startup_event():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    logger.info("‚ïë üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ó–ê–ì–õ–£–®–ö–ò...")
    logger.info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    logger.info("üîß STUB: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
    logger.info(f"üìä STUB: –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {settings.LOG_MODE}")
    logger.info(f"ü§ñ STUB: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {settings.LLM_PROVIDER}")
    logger.info(f"üì± STUB: Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if settings.TELEGRAM_BOT_TOKEN else '–ù–µ—Ç'}")
    logger.info("üóÑÔ∏è STUB: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –û–¢–ö–õ–Æ–ß–ï–ù–ê (—Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏)")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
    try:
        clear_debug_logs()
        logger.info("üßπ STUB: –ü–∞–ø–∫–∞ debug_logs –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è STUB: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É debug_logs: {e}. –í –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
    
    logger.info("‚úÖ STUB: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
    logger.info("üéØ STUB: Webhook'–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


@app.get("/", tags=["Root"])
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return {
        "status": "OK", 
        "message": "Beauty Salon AI Assistant is running in STUB mode",
        "version": "0.1.0-stub",
        "mode": "stub",
        "database": "disabled"
    }


@app.post("/", tags=["Root"])
async def root_post(request: Request, background_tasks: BackgroundTasks):
    """
    POST –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏.
    –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∏ Telegram webhook.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info("üîî STUB: –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å (—Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏)")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ Telegram webhook
        update_data = await request.json()
        logger.info(f"üì¶ STUB: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {update_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Telegram update
        if "message" in update_data or "callback_query" in update_data:
            logger.info("‚úÖ STUB: –û–±–Ω–∞—Ä—É–∂–µ–Ω Telegram update")
            update = Update.parse_obj(update_data)
            background_tasks.add_task(process_telegram_update_stub, update)
            logger.info("üöÄ STUB: –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å")
            return {"status": "ok"}
        else:
            logger.info("‚ÑπÔ∏è STUB: –≠—Ç–æ –Ω–µ Telegram update, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç")
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Telegram update, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            return {
                "status": "OK", 
                "message": "Beauty Salon AI Assistant is running in STUB mode",
                "version": "0.1.0-stub",
                "mode": "stub",
                "database": "disabled"
            }
    except Exception as e:
        logger.error(f"‚ùå STUB: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "status": "OK", 
            "message": "Beauty Salon AI Assistant is running in STUB mode",
            "version": "0.1.0-stub",
            "mode": "stub",
            "database": "disabled"
        }


@app.get("/healthcheck", tags=["Health Check"])
def health_check():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return {
        "status": "OK",
        "mode": "stub",
        "database": "disabled",
        "webhook": "enabled"
    }
