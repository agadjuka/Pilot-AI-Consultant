"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Database (YDB) —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π –¥—Ä–∞–π–≤–µ—Ä
"""

import ydb
import os
import logging
from typing import Optional, Generator, Any, List, Dict
from contextlib import contextmanager
from dotenv import load_dotenv

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
_driver: Optional[ydb.Driver] = None
_session_pool: Optional[ydb.SessionPool] = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def get_driver() -> ydb.Driver:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä YDB."""
    global _driver
    if _driver is None:
        from app.core.config import settings
        
        endpoint = settings.YDB_ENDPOINT
        database = settings.YDB_DATABASE
        
        logger.info(f"üîó DATABASE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB endpoint={endpoint}, database={database}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ credentials (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
            logger.info("üîó DATABASE: –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
            driver_config = ydb.DriverConfig(
                endpoint=endpoint,
                database=database,
                # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º credentials - SDK —Å–∞–º –ø–æ–ª—É—á–∏—Ç IAM —Ç–æ–∫–µ–Ω
            )
            
            _driver = ydb.Driver(driver_config)
            _driver.wait(timeout=10, fail_fast=True)
            logger.info("‚úÖ DATABASE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)")
            
        except Exception as e1:
            logger.warning(f"‚ö†Ô∏è DATABASE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e1}")
            
            try:
                # Fallback 1: –ø—Ä–æ–±—É–µ–º —Å —è–≤–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                logger.info("üîó DATABASE: –ü—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...")
                driver_config = ydb.DriverConfig(
                    endpoint=endpoint,
                    database=database,
                    credentials=ydb.iam.MetadataUrlCredentials(),
                )
                
                _driver = ydb.Driver(driver_config)
                _driver.wait(timeout=10, fail_fast=True)
                logger.info("‚úÖ DATABASE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)")
                
            except Exception as e2:
                logger.warning(f"‚ö†Ô∏è DATABASE: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
                
                try:
                    # Fallback 2: –ø—Ä–æ–±—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º –∫–ª—é—á–∞
                    logger.info("üîó DATABASE: –ü—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    service_account_key_file = os.getenv("YC_SERVICE_ACCOUNT_KEY_FILE", "key.json")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞
                    key_file_path = service_account_key_file
                    if not os.path.exists(key_file_path):
                        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
                        key_file_path = os.path.join(project_root, service_account_key_file)
                    
                    if not os.path.exists(key_file_path):
                        raise FileNotFoundError(f"–§–∞–π–ª –∫–ª—é—á–∞ {service_account_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    logger.info(f"üîó DATABASE: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞: {key_file_path}")
                    
                    driver_config = ydb.DriverConfig(
                        endpoint=endpoint,
                        database=database,
                        credentials=ydb.iam.ServiceAccountCredentials.from_file(key_file_path),
                    )
                    
                    _driver = ydb.Driver(driver_config)
                    _driver.wait(timeout=10, fail_fast=True)
                    logger.info("‚úÖ DATABASE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)")
                    
                except Exception as e3:
                    logger.error(f"‚ùå DATABASE: –í—Å–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å:")
                    logger.error(f"‚ùå DATABASE: 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è: {e1}")
                    logger.error(f"‚ùå DATABASE: 2. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {e2}")
                    logger.error(f"‚ùå DATABASE: 3. –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: {e3}")
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ YDB –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    return _driver




def get_session_pool() -> ydb.SessionPool:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–µ—Å—Å–∏–π YDB."""
    global _session_pool
    if _session_pool is None:
        driver = get_driver()
        _session_pool = ydb.SessionPool(driver)
    return _session_pool


@contextmanager
def get_db_session():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏.
    """
    pool = get_session_pool()
    
    def get_session():
        return pool.acquire()
    
    session = None
    try:
        session = pool.retry_operation_sync(get_session)
        yield session
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π: {e}")
        raise
    finally:
        if session:
            pool.release(session)


def execute_query(query: str, params: Optional[Dict[str, Any]] = None) -> List[Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    pool = get_session_pool()
    
    def execute(session):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        tx = session.transaction()
        try:
            prepared = session.prepare(query)
            result = tx.execute(prepared)
            tx.commit()
            logger.info(f"‚úÖ DATABASE: SELECT –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return result[0].rows
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                tx.rollback()
            except Exception as rollback_error:
                logger.warning(f"‚ö†Ô∏è DATABASE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise e
    
    try:
        return pool.retry_operation_sync(execute)
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise


def execute_transaction(operations: List[callable]):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.
    
    Args:
        operations: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    pool = get_session_pool()
    
    def execute_all(session):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        tx = session.transaction()
        try:
            results = []
            for operation in operations:
                result = operation(session, tx)
                results.append(result)
            tx.commit()
            logger.info(f"‚úÖ DATABASE: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å {len(operations)} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return results
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                tx.rollback()
            except Exception as rollback_error:
                logger.warning(f"‚ö†Ô∏è DATABASE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise e
    
    try:
        return pool.retry_operation_sync(execute_all)
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        raise


def upsert_record(table: str, data: Dict[str, Any]) -> None:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ.
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    from datetime import datetime
    pool = get_session_pool()
    
    def upsert(session):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        tx = session.transaction()
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å UPSERT
            columns = list(data.keys())
            values = []
            
            for key, value in data.items():
                if isinstance(value, str):
                    escaped_value = value.replace("'", "''")
                    values.append(f"'{escaped_value}'")
                elif isinstance(value, (int, float)):
                    values.append(str(value))
                elif isinstance(value, datetime):
                    # –î–ª—è datetime –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è YDB
                    # YDB —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                    iso_format = value.strftime('%Y-%m-%dT%H:%M:%SZ')
                    values.append(f"Timestamp('{iso_format}')")
                elif isinstance(value, type(datetime.now().date())):
                    # –î–ª—è date –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è YDB
                    date_format = value.strftime('%Y-%m-%d')
                    values.append(f"Date('{date_format}')")
                elif value is None:
                    values.append('NULL')
                else:
                    escaped_value = str(value).replace("'", "''")
                    values.append(f"'{escaped_value}'")
            
            query = f"""
                UPSERT INTO {table} ({', '.join(columns)})
                VALUES ({', '.join(values)})
            """
            
            prepared = session.prepare(query)
            tx.execute(prepared)
            tx.commit()
            logger.info(f"‚úÖ DATABASE: UPSERT –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É {table}")
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                tx.rollback()
            except Exception as rollback_error:
                logger.warning(f"‚ö†Ô∏è DATABASE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ upsert –≤ —Ç–∞–±–ª–∏—Ü—É {table}: {e}")
            raise e
    
    try:
        pool.retry_operation_sync(upsert)
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ upsert –≤ —Ç–∞–±–ª–∏—Ü—É {table}: {e}")
        raise


def delete_record(table: str, where_clause: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        where_clause: –£—Å–ª–æ–≤–∏–µ WHERE
    """
    pool = get_session_pool()
    
    def delete(session):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        tx = session.transaction()
        try:
            query = f"DELETE FROM {table} WHERE {where_clause}"
            prepared = session.prepare(query)
            tx.execute(prepared)
            tx.commit()
            logger.info(f"‚úÖ DATABASE: DELETE –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}")
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                tx.rollback()
            except Exception as rollback_error:
                logger.warning(f"‚ö†Ô∏è DATABASE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
            raise e
    
    try:
        pool.retry_operation_sync(delete)
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        raise


def get_all_services() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    query = "SELECT * FROM services ORDER BY name"
    rows = execute_query(query)
    
    services = []
    for row in rows:
        services.append({
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'price': row[3],
            'duration_minutes': row[4]
        })
    
    return services


def get_all_masters() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    query = "SELECT * FROM masters ORDER BY name"
    rows = execute_query(query)
    
    masters = []
    for row in rows:
        masters.append({
            'id': row[0],
            'name': row[1],
            'specialization': row[2]
        })
    
    return masters


def get_master_services(master_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Å–ª—É–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞."""
    query = f"""
        SELECT s.* FROM services s
        JOIN master_services ms ON s.id = ms.service_id
        WHERE ms.master_id = {master_id}
    """
    rows = execute_query(query)
    
    services = []
    for row in rows:
        services.append({
            'id': row[0],
            'name': row[1],
            'description': row[2],
            'price': row[3],
            'duration_minutes': row[4]
        })
    
    return services


def get_client_by_telegram_id(telegram_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
    query = f"SELECT * FROM clients WHERE telegram_id = {telegram_id}"
    rows = execute_query(query)
    
    if rows:
        row = rows[0]
        return {
            'id': row[0],
            'telegram_id': row[1],
            'first_name': row[2],
            'phone_number': row[3]
        }
    
    return None


def add_client(telegram_id: int, first_name: str = "", phone_number: str = "") -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
    existing_client = get_client_by_telegram_id(telegram_id)
    if existing_client:
        return existing_client['id']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
    query = "SELECT MAX(id) as max_id FROM clients"
    rows = execute_query(query)
    max_id = rows[0][0] if rows[0][0] is not None else 0
    new_id = max_id + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    data = {
        'id': new_id,
        'telegram_id': telegram_id,
        'first_name': first_name,
        'phone_number': phone_number
    }
    
    upsert_record('clients', data)
    return new_id


def add_dialog_message(user_id: int, role: str, message_text: str) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤."""
    from datetime import datetime
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
    query = "SELECT MAX(id) as max_id FROM dialog_history"
    rows = execute_query(query)
    max_id = rows[0][0] if rows[0][0] is not None else 0
    new_id = max_id + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º timestamp –¥–ª—è YDB
    data = {
        'id': new_id,
        'user_id': user_id,
        'role': role,
        'message_text': message_text,
        'timestamp': datetime.now()  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
    }
    
    upsert_record('dialog_history', data)


def init_database():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    """
    try:
        logger.info("üóÑÔ∏è DATABASE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        driver = get_driver()
        logger.info("‚úÖ DATABASE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = ['services', 'masters', 'clients', 'master_services', 'appointments', 'dialog_history', 'master_schedules']
        
        for table in tables_to_check:
            try:
                query = f"SELECT COUNT(*) FROM {table}"
                execute_query(query)
                logger.info(f"‚úÖ DATABASE: –¢–∞–±–ª–∏—Ü–∞ {table} –¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è DATABASE: –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        logger.info("‚úÖ DATABASE: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå DATABASE: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def close_database():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    global _driver, _session_pool
    
    if _session_pool:
        _session_pool.stop()
        _session_pool = None
    
    if _driver:
        _driver.stop()
        _driver = None
    
    logger.info("‚úÖ DATABASE: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")