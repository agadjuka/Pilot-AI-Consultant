"""
–°–µ—Ä–≤–∏—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π –¥–∏–∞–ª–æ–≥–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from typing import List, Dict, Optional
from app.core.dialogue_pattern_loader import dialogue_patterns
from app.services.gemini_service import GeminiService
from app.utils.debug_logger import gemini_debug_logger


class ClassificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Gemini –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏.
    """
    
    def __init__(self, gemini_service: GeminiService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        
        Args:
            gemini_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
        """
        self.gemini_service = gemini_service
    
    async def get_dialogue_stage(self, history: List[Dict], user_message: str, user_id: int = None) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            user_message: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Optional[str]: ID —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
            stages = list(dialogue_patterns.keys())
            stages_list = ", ".join(stages)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –¥–µ—à–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            classification_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–¥–∏–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ü–û–°–õ–ï–î–ù–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ: {stages_list}.

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã—Ä–∞–∂–∞–µ—Ç —è–≤–Ω–æ–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, –∂–∞–ª—É–µ—Ç—Å—è, —É–≥—Ä–æ–∂–∞–µ—Ç –∏–ª–∏ –ø—Ä—è–º–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –ø—Ä–∏—Å–≤–æ–π —Å—Ç–∞–¥–∏—é 'conflict_escalation'. –≠—Ç–æ –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.

–í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û ID —Å—Ç–∞–¥–∏–∏.

–ò—Å—Ç–æ—Ä–∏—è: {history}
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"""
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            classification_history = [
                {
                    "role": "user",
                    "parts": [{"text": classification_prompt}]
                }
            ]
            
            # –í—ã–∑—ã–≤–∞–µ–º Gemini –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            response = await self.gemini_service.generate_response(classification_history)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            if user_id is not None:
                gemini_debug_logger.log_simple_dialog(
                    user_id=user_id,
                    user_message=f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π, –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}",
                    system_prompt=f"–û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑: {stages_list}",
                    dialog_history=[],
                    gemini_response=response
                )
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
            stage_id = response.strip().lower()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"[DEBUG] –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç '{response}' -> –æ—á–∏—â–µ–Ω–Ω—ã–π '{stage_id}'")
            print(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: {list(dialogue_patterns.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
            if stage_id in dialogue_patterns:
                print(f"   üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç–∞–¥–∏—è –¥–∏–∞–ª–æ–≥–∞: {stage_id}")
                return stage_id
            
            # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            print(f"   ‚ùå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: '{response}'")
            return None
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ fallback
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
