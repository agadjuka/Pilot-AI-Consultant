import asyncio
import os
import json
from typing import List, Dict, Optional, TYPE_CHECKING
import google.generativeai as genai
from google.oauth2 import service_account
from app.core.config import settings
from app.utils.debug_logger import gemini_debug_logger
from app.services.tool_definitions import salon_tools

if TYPE_CHECKING:
    from app.services.tool_service import ToolService


class GeminiService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é Gemini —á–µ—Ä–µ–∑ Google AI SDK."""
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Google AI –∏ –º–æ–¥–µ–ª—å Gemini.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_APPLICATION_CREDENTIALS.
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
        credentials = self._load_credentials()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Google AI SDK
        genai.configure(credentials=credentials)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Gemini 2.5 Flash —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        self._model = genai.GenerativeModel("gemini-2.5-flash", tools=[salon_tools])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tools = salon_tools

    def _load_credentials(self) -> service_account.Credentials:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç credentials –¥–ª—è Google Cloud.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ–µ–∫—Ç–µ):
        1. GOOGLE_APPLICATION_CREDENTIALS_JSON - JSON –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        2. GOOGLE_APPLICATION_CREDENTIALS - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞
        3. Application Default Credentials (ADC)
        
        Returns:
            –û–±—ä–µ–∫—Ç Credentials –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        # –í–∞—Ä–∏–∞–Ω—Ç 1: JSON –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Cloud Run)
        credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
        if credentials_json:
            credentials_info = json.loads(credentials_json)
            return service_account.Credentials.from_service_account_info(
                credentials_info,
                scopes=["https://www.googleapis.com/auth/generative-language"]
            )
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É credentials –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞
        credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
        if credentials_path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞
            if os.path.isfile(credentials_path):
                return service_account.Credentials.from_service_account_file(
                    credentials_path,
                    scopes=["https://www.googleapis.com/auth/generative-language"]
                )
            else:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                try:
                    credentials_info = json.loads(credentials_path)
                    return service_account.Credentials.from_service_account_info(
                        credentials_info,
                        scopes=["https://www.googleapis.com/auth/generative-language"]
                    )
                except json.JSONDecodeError:
                    raise ValueError(f"GOOGLE_APPLICATION_CREDENTIALS –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –ø—É—Ç–µ–º –∏–ª–∏ JSON: {credentials_path}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: Application Default Credentials (–¥–ª—è Cloud Run)
        import google.auth
        credentials, _ = google.auth.default(
            scopes=["https://www.googleapis.com/auth/generative-language"]
        )
        return credentials

    def create_chat(self, history: List[Dict]):
        """
        –°–æ–∑–¥–∞–µ—Ç —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        
        Args:
            history: –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Gemini
            
        Returns:
            –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é
        """
        return self._model.start_chat(history=history)
    
    async def send_message_to_chat(self, chat, message, user_id: int = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        
        Args:
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ Parts)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û–±—ä–µ–∫—Ç Content —Å –æ—Ç–≤–µ—Ç–æ–º –º–æ–¥–µ–ª–∏
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∑–∞–ø—Ä–æ—Å
        if user_id is not None:
            request_text = ""
            if isinstance(message, str):
                request_text = message
            elif isinstance(message, list):
                request_text = f"Function Response Parts ({len(message)} parts)"
            else:
                request_text = str(message)
            
            print(f"   üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {request_text[:100]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        loop = asyncio.get_event_loop()
        try:
            response = await loop.run_in_executor(
                None,
                lambda: chat.send_message(message)
            )
        except Exception as e:
            if user_id is not None:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {str(e)}")
            raise
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if user_id is not None:
            response_text = ""
            for part in response.candidates[0].content.parts:
                if hasattr(part, 'text') and part.text:
                    response_text += part.text
                elif hasattr(part, 'function_call') and part.function_call:
                    response_text += f"Function Call: {part.function_call.name}"
            
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {response_text[:100]}...")
        
        return response.candidates[0].content

    async def generate_response(self, history: List[Dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
        –¢–µ–ø–µ—Ä—å GeminiService —è–≤–ª—è–µ—Ç—Å—è "–≥–ª—É–ø—ã–º" –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã.
        
        Args:
            history: –ì–æ—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        """
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –≥–æ—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        chat = self.create_chat(history)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–≤–µ—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        response_content = await self.send_message_to_chat(chat, "–û—Ç–≤–µ—Ç—å")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        for part in response_content.parts:
            if hasattr(part, 'text') and part.text:
                return part.text
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
gemini_service = None

def get_gemini_service() -> GeminiService:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GeminiService —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä GeminiService
    """
    global gemini_service
    if gemini_service is None:
        gemini_service = GeminiService()
    return gemini_service
