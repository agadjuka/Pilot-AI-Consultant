from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.client_repository import ClientRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.service_repository import ServiceRepository
from app.services.google_calendar_service import GoogleCalendarService
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from difflib import SequenceMatcher
import logging

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class AppointmentService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ (appointments).
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è, –æ—Ç–º–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–µ–π.
    """

    def __init__(
        self,
        appointment_repository: AppointmentRepository,
        client_repository: ClientRepository,
        master_repository: MasterRepository,
        service_repository: ServiceRepository,
        google_calendar_service: GoogleCalendarService
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AppointmentService —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.

        Args:
            appointment_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
            client_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            master_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
            service_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
            google_calendar_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar
        """
        self.appointment_repository = appointment_repository
        self.client_repository = client_repository
        self.master_repository = master_repository
        self.service_repository = service_repository
        self.google_calendar_service = google_calendar_service

    def create_appointment(self, master_name: str, service_name: str, date: str, time: str, client_name: str, user_telegram_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏.
        
        Args:
            master_name: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
            time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        logger.info(f"üìù [CREATE APPOINTMENT] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: user_id={user_telegram_id}, master='{master_name}', service='{service_name}', date='{date}', time='{time}', client='{client_name}'")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
            client = self.client_repository.get_or_create_by_telegram_id(user_telegram_id)
            if not client.first_name or not client.phone_number:
                logger.warning(f"‚ö†Ô∏è [CREATE APPOINTMENT] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: user_id={user_telegram_id}, first_name='{client.first_name}', phone='{client.phone_number}'")
                return "–¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞. –ü–µ—Ä–µ–π–¥–∏ –≤ —Å—Ç–∞–¥–∏—é 'contact_info_request'."
            
            logger.info(f"‚úÖ [CREATE APPOINTMENT] –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã: user_id={user_telegram_id}, name='{client.first_name}', phone='{client.phone_number}'")
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –≤ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ—Å—Ç—ã–º –ø–æ–∏—Å–∫–æ–º
            all_services = self.service_repository.get_all()
            service = next((s for s in all_services if service_name.lower() in s.name.lower()), None)
            
            if not service:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —É—Å–ª—É–≥–∏
                similar_services = self._find_similar_services(service_name, all_services)
                logger.warning(f"‚ùå [CREATE APPOINTMENT] –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{service_name}', –ø–æ—Ö–æ–∂–∏–µ: {similar_services}")
                if similar_services:
                    return f"–£—Å–ª—É–≥–∞ '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {', '.join(similar_services)}?"
                return f"–£—Å–ª—É–≥–∞ '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ."
            
            logger.info(f"‚úÖ [CREATE APPOINTMENT] –£—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞: id={service.id}, name='{service.name}', duration={service.duration_minutes} –º–∏–Ω, price={service.price} —Ä—É–±")
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –ë–î
            all_masters = self.master_repository.get_all()
            master = next((m for m in all_masters if master_name.lower() in m.name.lower()), None)
            
            if not master:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
                similar_masters = self._find_similar_masters(master_name, all_masters)
                logger.warning(f"‚ùå [CREATE APPOINTMENT] –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{master_name}', –ø–æ—Ö–æ–∂–∏–µ: {similar_masters}")
                if similar_masters:
                    return f"–ú–∞—Å—Ç–µ—Ä '{master_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {', '.join(similar_masters)}?"
                return f"–ú–∞—Å—Ç–µ—Ä '{master_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            logger.info(f"‚úÖ [CREATE APPOINTMENT] –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: id={master.id}, name='{master.name}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
            duration_minutes = service.duration_minutes
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º date –∏ time –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                appointment_date = datetime.strptime(date, "%Y-%m-%d")
                appointment_time = datetime.strptime(time, "%H:%M")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                start_datetime = appointment_date.replace(
                    hour=appointment_time.hour,
                    minute=appointment_time.minute,
                    second=0,
                    microsecond=0
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                end_datetime = start_datetime + timedelta(minutes=duration_minutes)
                
            except ValueError as e:
                logger.error(f"‚ùå [CREATE APPOINTMENT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
                return f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}"
            
            logger.info(f"üìÖ [CREATE APPOINTMENT] –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {start_datetime} - {end_datetime} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω)")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç ISO 8601
            moscow_tz = ZoneInfo('Europe/Moscow')
            start_datetime = start_datetime.replace(tzinfo=moscow_tz)
            end_datetime = end_datetime.replace(tzinfo=moscow_tz)
            
            start_time_iso = start_datetime.strftime('%Y-%m-%dT%H:%M:%S')
            end_time_iso = end_datetime.strftime('%Y-%m-%dT%H:%M:%S')
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            description = f"–ö–ª–∏–µ–Ω—Ç: {client.first_name or client_name} | –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number or '-'} | Telegram ID: {user_telegram_id}"

            try:
                event_id = self.google_calendar_service.create_event(
                    master_name=master_name,
                    service_name=service_name,
                    start_time_iso=start_time_iso,
                    end_time_iso=end_time_iso,
                    description=description
                )
                logger.info(f"‚úÖ [CREATE APPOINTMENT] –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Google Calendar: event_id='{event_id}'")
            except Exception as calendar_error:
                # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, dev-—Å—Ä–µ–¥–∞),
                # —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π event_id –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                from uuid import uuid4
                event_id = f"LOCAL-{uuid4()}"
                logger.warning(f"‚ö†Ô∏è [CREATE APPOINTMENT] –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π event_id: {event_id}. –û—à–∏–±–∫–∞: {calendar_error}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à—É –ë–î
            appointment_data = {
                'user_telegram_id': user_telegram_id,
                'google_event_id': event_id,
                'master_id': master.id,
                'service_id': service.id,
                'start_time': start_datetime,
                'end_time': end_datetime
            }
            
            logger.info(f"üíæ [CREATE APPOINTMENT] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {appointment_data}")
            self.appointment_repository.create(appointment_data)
            logger.info(f"‚úÖ [CREATE APPOINTMENT] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î")
            
            success_message = f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª–∞ {client.first_name or client_name} –Ω–∞ {service_name} –∫ –º–∞—Å—Ç–µ—Ä—É {master_name} –Ω–∞ {date} –≤ {time}."
            logger.info(f"üéâ [CREATE APPOINTMENT] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_message}")
            return success_message
                
        except Exception as e:
            logger.error(f"‚ùå [CREATE APPOINTMENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}"

    def get_my_appointments(self, user_telegram_id: int) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
        
        Args:
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç 'id' –∏ 'details'
        """
        logger.info(f"üìã [GET MY APPOINTMENTS] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_telegram_id}")
        
        try:
            appointments = self.appointment_repository.get_future_appointments_by_user(user_telegram_id)
            
            if not appointments:
                logger.info(f"üì≠ [GET MY APPOINTMENTS] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: user_id={user_telegram_id}")
                return []
            
            logger.info(f"üìã [GET MY APPOINTMENTS] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)} –¥–ª—è user_id={user_telegram_id}")
            
            result = []
            for appointment in appointments:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                date_str = appointment.start_time.strftime("%d %B")
                time_str = appointment.start_time.strftime("%H:%M")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ —É—Å–ª—É–≥–µ
                master_name = appointment.master.name
                service_name = appointment.service.name
                
                details = f"{date_str} –≤ {time_str}: {service_name} –∫ –º–∞—Å—Ç–µ—Ä—É {master_name}"
                
                logger.info(f"üìÖ [GET MY APPOINTMENTS] –ó–∞–ø–∏—Å—å: id={appointment.id}, {details}")
                
                result.append({
                    "id": appointment.id,
                    "details": details
                })
            
            logger.info(f"‚úÖ [GET MY APPOINTMENTS] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è user_id={user_telegram_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [GET MY APPOINTMENTS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: user_id={user_telegram_id}, error={str(e)}")
            return []

    def cancel_appointment_by_id(self, appointment_id: int, user_telegram_id: int) -> str:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ –µ—ë ID.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Returns:
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        logger.info(f"üóëÔ∏è [CANCEL APPOINTMENT] –ù–∞—á–∞–ª–æ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}, user_id={user_telegram_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            appointment = self.appointment_repository.get_by_id(appointment_id)
            if not appointment or appointment.user_telegram_id != user_telegram_id:
                logger.warning(f"‚ùå [CANCEL APPOINTMENT] –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: appointment_id={appointment_id}, user_id={user_telegram_id}, appointment_user_id={appointment.user_telegram_id if appointment else 'None'}")
                return "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã."
            
            logger.info(f"‚úÖ [CANCEL APPOINTMENT] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: appointment_id={appointment_id}, user_id={user_telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            master_name = appointment.master.name
            service_name = appointment.service.name
            date_str = appointment.start_time.strftime("%d %B")
            time_str = appointment.start_time.strftime("%H:%M")
            
            logger.info(f"üìã [CANCEL APPOINTMENT] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏: master='{master_name}', service='{service_name}', date='{date_str}', time='{time_str}', google_event_id='{appointment.google_event_id}'")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è)
            try:
                self.google_calendar_service.delete_event(appointment.google_event_id)
                logger.info(f"‚úÖ [CANCEL APPOINTMENT] –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar: event_id='{appointment.google_event_id}'")
            except Exception as calendar_error:
                # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–î
                logger.warning(f"‚ö†Ô∏è [CANCEL APPOINTMENT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {calendar_error}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –Ω–∞—à–µ–π –ë–î –Ω–∞–ø—Ä—è–º—É—é –ø–æ –æ–±—ä–µ–∫—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üíæ [CANCEL APPOINTMENT] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: appointment_id={appointment_id}")
            deleted = self.appointment_repository.delete(appointment)
            if not deleted:
                logger.error(f"‚ùå [CANCEL APPOINTMENT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î: appointment_id={appointment_id}")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞."

            logger.info(f"‚úÖ [CANCEL APPOINTMENT] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î: appointment_id={appointment_id}")
            
            success_message = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {service_name} {date_str} –≤ {time_str} –∫ –º–∞—Å—Ç–µ—Ä—É {master_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            logger.info(f"üéâ [CANCEL APPOINTMENT] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_message}")
            return success_message
            
        except Exception as e:
            logger.error(f"‚ùå [CANCEL APPOINTMENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}"

    def reschedule_appointment_by_id(self, appointment_id: int, new_date: str, new_time: str, user_telegram_id: int) -> str:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ –µ—ë ID.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            new_date: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
            new_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Returns:
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        logger.info(f"üìÖ [RESCHEDULE APPOINTMENT] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}, user_id={user_telegram_id}, new_date='{new_date}', new_time='{new_time}'")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            appointment = self.appointment_repository.get_by_id(appointment_id)
            if not appointment or appointment.user_telegram_id != user_telegram_id:
                logger.warning(f"‚ùå [RESCHEDULE APPOINTMENT] –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: appointment_id={appointment_id}, user_id={user_telegram_id}, appointment_user_id={appointment.user_telegram_id if appointment else 'None'}")
                return "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –ø–µ—Ä–µ–Ω–æ—Å–∞."
            
            logger.info(f"‚úÖ [RESCHEDULE APPOINTMENT] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: appointment_id={appointment_id}, user_id={user_telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            master_name = appointment.master.name
            service_name = appointment.service.name
            old_date_str = appointment.start_time.strftime("%d %B")
            old_time_str = appointment.start_time.strftime("%H:%M")
            
            logger.info(f"üìã [RESCHEDULE APPOINTMENT] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏: master='{master_name}', service='{service_name}', old_date='{old_date_str}', old_time='{old_time_str}', google_event_id='{appointment.google_event_id}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
            duration_minutes = appointment.service.duration_minutes
            logger.info(f"‚è±Ô∏è [RESCHEDULE APPOINTMENT] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {duration_minutes} –º–∏–Ω")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                appointment_date = datetime.strptime(new_date, "%Y-%m-%d")
                appointment_time = datetime.strptime(new_time, "%H:%M")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                start_datetime = appointment_date.replace(
                    hour=appointment_time.hour,
                    minute=appointment_time.minute,
                    second=0,
                    microsecond=0
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                end_datetime = start_datetime + timedelta(minutes=duration_minutes)
                
            except ValueError as e:
                logger.error(f"‚ùå [RESCHEDULE APPOINTMENT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
                return f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}"
            
            logger.info(f"üìÖ [RESCHEDULE APPOINTMENT] –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {start_datetime} - {end_datetime} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω)")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç ISO 8601
            moscow_tz = ZoneInfo('Europe/Moscow')
            start_datetime = start_datetime.replace(tzinfo=moscow_tz)
            end_datetime = end_datetime.replace(tzinfo=moscow_tz)
            
            start_time_iso = start_datetime.strftime('%Y-%m-%dT%H:%M:%S')
            end_time_iso = end_datetime.strftime('%Y-%m-%dT%H:%M:%S')
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                summary = f"–ó–∞–ø–∏—Å—å: {master_name} - {service_name}"
                
                logger.info(f"üìÖ [RESCHEDULE APPOINTMENT] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: event_id='{appointment.google_event_id}', summary='{summary}'")
                self.google_calendar_service.update_event(
                    event_id=appointment.google_event_id,
                    summary=summary,
                    start_datetime=start_datetime,
                    end_datetime=end_datetime
                )
                logger.info(f"‚úÖ [RESCHEDULE APPOINTMENT] –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Calendar: event_id='{appointment.google_event_id}'")
            except Exception as calendar_error:
                # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                logger.warning(f"‚ö†Ô∏è [RESCHEDULE APPOINTMENT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {calendar_error}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à–µ–π –ë–î
            update_data = {
                'start_time': start_datetime,
                'end_time': end_datetime
            }
            
            logger.info(f"üíæ [RESCHEDULE APPOINTMENT] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: appointment_id={appointment_id}, update_data={update_data}")
            updated_appointment = self.appointment_repository.update(appointment.id, update_data)
            if not updated_appointment:
                logger.error(f"‚ùå [RESCHEDULE APPOINTMENT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î: appointment_id={appointment_id}")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å."

            logger.info(f"‚úÖ [RESCHEDULE APPOINTMENT] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î: appointment_id={appointment_id}")
            
            success_message = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {service_name} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å {old_date_str} –≤ {old_time_str} –Ω–∞ {new_date} –≤ {new_time} –∫ –º–∞—Å—Ç–µ—Ä—É {master_name}."
            logger.info(f"üéâ [RESCHEDULE APPOINTMENT] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_message}")
            return success_message
            
        except Exception as e:
            logger.error(f"‚ùå [RESCHEDULE APPOINTMENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏: {str(e)}"

    def _find_service_by_fuzzy_match(self, service_name: str, all_services: list) -> object:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —É—Å–ª—É–≥—É –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è.
        
        Args:
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_services: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥
            
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –∏–ª–∏ None
        """
        service_name_lower = service_name.lower().strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for service in all_services:
            if service.name.lower() == service_name_lower:
                return service
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match = None
        best_ratio = 0.0
        
        for service in all_services:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
            service_words = service.name.lower().split()
            search_words = service_name_lower.split()
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ—á–Ω–æ
            for search_word in search_words:
                for service_word in service_words:
                    if search_word in service_word or service_word in search_word:
                        return service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            ratio = SequenceMatcher(None, service_name_lower, service.name.lower()).ratio()
            if ratio > best_ratio and ratio > 0.6:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 60%
                best_ratio = ratio
                best_match = service
        
        return best_match

    def _find_similar_services(self, service_name: str, all_services: list) -> list:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.
        
        Args:
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_services: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ—Ö–æ–∂–∏—Ö —É—Å–ª—É–≥
        """
        service_name_lower = service_name.lower().strip()
        similar_services = []
        
        # –ò—â–µ–º —É—Å–ª—É–≥–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = service_name_lower.split()
        
        for service in all_services:
            service_lower = service.name.lower()
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏
            for keyword in keywords:
                if keyword in service_lower and len(keyword) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    similar_services.append(service.name)
                    break
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return list(set(similar_services))[:3]

    def _find_master_by_fuzzy_match(self, master_name: str, all_masters: list) -> object:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏.
        
        Args:
            master_name: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_masters: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∏–ª–∏ None
        """
        master_name_lower = master_name.lower().strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for master in all_masters:
            if master.name.lower() == master_name_lower:
                return master
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match = None
        best_ratio = 0.0
        
        for master in all_masters:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
            master_words = master.name.lower().split()
            search_words = master_name_lower.split()
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ—á–Ω–æ
            for search_word in search_words:
                for master_word in master_words:
                    if search_word in master_word or master_word in search_word:
                        return master
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            ratio = SequenceMatcher(None, master_name_lower, master.name.lower()).ratio()
            if ratio > best_ratio and ratio > 0.6:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 60%
                best_ratio = ratio
                best_match = master
        
        return best_match

    def _find_similar_masters(self, master_name: str, all_masters: list) -> list:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.
        
        Args:
            master_name: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_masters: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        """
        master_name_lower = master_name.lower().strip()
        similar_masters = []
        
        # –ò—â–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = master_name_lower.split()
        
        for master in all_masters:
            master_lower = master.name.lower()
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞
            for keyword in keywords:
                if keyword in master_lower and len(keyword) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    similar_masters.append(master.name)
                    break
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return list(set(similar_masters))[:3]
