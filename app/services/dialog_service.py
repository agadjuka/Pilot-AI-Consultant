from typing import List, Dict
from sqlalchemy.orm import Session
import google.generativeai as genai
from google.generativeai import protos
from datetime import datetime, timedelta
import logging
import json
import re
from app.repositories.dialog_history_repository import DialogHistoryRepository
from app.repositories.service_repository import ServiceRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.client_repository import ClientRepository
from app.services.llm_service import get_llm_service
from app.services.appointment_service import AppointmentService
from app.services.tool_service import ToolService
from app.services.google_calendar_service import GoogleCalendarService
from app.services.prompt_builder_service import PromptBuilderService
from app.core.dialogue_pattern_loader import dialogue_patterns
from app.services.dialogue_tracer_service import DialogueTracer
from app.core.logging_config import log_dialog_start, log_dialog_end, log_error

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DialogService:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ AI-–º–æ–¥–µ–ª—å—é.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (read_only_tools) -> –°–∏–Ω—Ç–µ–∑ (write_tools).
    """
    
    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
    CONTEXT_WINDOW_SIZE = 12
    
    def __init__(self, db_session: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
        """
        self.repository = DialogHistoryRepository(db_session)
        self.llm_service = get_llm_service()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptBuilderService
        self.prompt_builder = PromptBuilderService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è ToolService
        self.service_repository = ServiceRepository(db_session)
        self.master_repository = MasterRepository(db_session)
        self.appointment_repository = AppointmentRepository(db_session)
        self.client_repository = ClientRepository(db_session)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Calendar Service
        self.google_calendar_service = GoogleCalendarService()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppointmentService
        self.appointment_service = AppointmentService(
            appointment_repository=self.appointment_repository,
            client_repository=self.client_repository,
            master_repository=self.master_repository,
            service_repository=self.service_repository,
            google_calendar_service=self.google_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolService
        self.tool_service = ToolService(
            service_repository=self.service_repository,
            master_repository=self.master_repository,
            appointment_service=self.appointment_service,
            google_calendar_service=self.google_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolOrchestratorService –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        from app.services.tool_orchestrator_service import ToolOrchestratorService
        self.tool_orchestrator = ToolOrchestratorService(
            llm_service=self.llm_service,
            tool_service=self.tool_service,
            prompt_builder=self.prompt_builder,
            client_repository=self.client_repository
        )
        
        # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç: {user_id: {"appointments_in_focus": [{"id": int, "details": str}, ...], ...}}
        self.session_contexts = {}
    

    async def process_user_message(self, user_id: int, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
        1. –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ read_only_tools)
        2. –≠—Ç–∞–ø 2: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ JSON —Å write_tools)
        3. –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è JSON - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        log_dialog_start(logger, user_id, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_context = self.session_contexts.setdefault(user_id, {})
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        tracer = DialogueTracer(user_id=user_id, user_message=text)
        
        try:
            # 0. –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) –∫–ª–∏–µ–Ω—Ç–∞
            client = self.client_repository.get_or_create_by_telegram_id(user_id)
            tracer.add_event("üë§ –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω", f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client.id}, –ò–º—è: {client.first_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            history_records = self.repository.get_recent_messages(user_id, limit=self.CONTEXT_WINDOW_SIZE)
            tracer.add_event("üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history_records)} (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.CONTEXT_WINDOW_SIZE})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini
            dialog_history: List[Dict] = []
            for record in history_records:
                role = "user" if record.role == "user" else "model"
                dialog_history.append({
                    "role": role,
                    "parts": [{"text": record.message_text}]
                })
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="user",
                message_text=text
            )
            tracer.add_event("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", f"–†–æ–ª—å: user, –¢–µ–∫—Å—Ç: {text}")
            
            # –≠–¢–ê–ü 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            tracer.add_event("üîç –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ LLM")
            logger.info("üîç –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –î–û –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            hidden_context = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if 'appointments_in_focus' in session_context:
                appointments_data = session_context.get('appointments_in_focus', [])
                if appointments_data:
                    hidden_context = "# –°–ö–†–´–¢–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ó–ê–ü–ò–°–ï–ô (–ò–°–ü–û–õ–¨–ó–£–ô –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø ID):\n" + json.dumps(appointments_data, ensure_ascii=False)
                    tracer.add_event("üîç –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –î–û –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", {
                        "appointments_count": len(appointments_data),
                        "context": hidden_context
                    })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            planning_prompt = self.prompt_builder.build_planning_prompt(
                history=dialog_history,
                user_message=text,
                hidden_context=hidden_context
            )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt": planning_prompt,
                "length": len(planning_prompt)
            })
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            planning_history = [
                {
                    "role": "user",
                    "parts": [{"text": planning_prompt}]
                }
            ]
            
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ read_only_tools)
            from app.services.tool_definitions import read_only_tools_obj
            planning_response = await self.llm_service.generate_response(planning_history, read_only_tools_obj)
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω", f"–û—Ç–≤–µ—Ç: {planning_response}")
            logger.info(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM: '{planning_response}'")
            
            # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            tool_calls = []
            stage = 'fallback'  # –°—Ç–∞–¥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                cleaned_response = planning_response.strip()
                if cleaned_response.startswith('```') and cleaned_response.endswith('```'):
                    cleaned_response = cleaned_response[3:-3].strip()
                elif cleaned_response.startswith('```json'):
                    cleaned_response = cleaned_response[7:-3].strip()
                
                parsed_response = json.loads(cleaned_response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                if isinstance(parsed_response, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {"stage": "...", "tool_calls": [...]}
                    stage = parsed_response.get('stage', 'fallback')
                    tool_calls = parsed_response.get('tool_calls', [])
                elif isinstance(parsed_response, list):
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [{"tool_name": "...", "parameters": {...}}]
                    tool_calls = parsed_response
                    stage = 'fallback'  # –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                
                tracer.add_event("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞", {
                    "stage": stage,
                    "tool_calls": tool_calls,
                    "tool_calls_count": len(tool_calls),
                    "tool_calls_types": [type(tc).__name__ for tc in tool_calls] if tool_calls else []
                })
                logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç–∞–¥–∏—è: '{stage}', –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                logger.info(f"üîç –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ tool_calls: {[type(tc).__name__ for tc in tool_calls] if tool_calls else '–ø—É—Å—Ç–æ'}")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                logger.error(f"‚ùå –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: '{planning_response}'")
                tracer.add_event("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", f"–û—à–∏–±–∫–∞: {str(e)}")
                # Fallback: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                tool_calls = []
                stage = 'fallback'
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã)
            tool_results = ""
            if tool_calls:
                tracer.add_event("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                for tool_call in tool_calls:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç tool_call
                    if isinstance(tool_call, str):
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: '{tool_call}'")
                        tracer.add_event("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {tool_call}")
                        continue
                    
                    if not isinstance(tool_call, dict):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {type(tool_call)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {tool_call}")
                        tracer.add_event("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–¢–∏–ø: {type(tool_call)}, –ó–Ω–∞—á–µ–Ω–∏–µ: {tool_call}")
                        continue
                    
                    tool_name = tool_call.get('tool_name')
                    parameters = tool_call.get('parameters', {})
                    
                    if not tool_name:
                        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tool_name –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {tool_call}")
                        tracer.add_event("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tool_name", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_call}")
                        continue
                    
                    tracer.add_event(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
                    
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolService
                        result = await self.tool_service.execute_tool(tool_name, parameters, user_id)
                        tool_results += f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}: {result}\n"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ get_my_appointments
                        if tool_name == 'get_my_appointments':
                            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AppointmentService
                            appointments_data = self.appointment_service.get_my_appointments(user_id)
                            session_context['appointments_in_focus'] = appointments_data
                            logger.info(f"üîç –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å: {appointments_data}")
                            tracer.add_event("üîç –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å", {
                                "appointments_count": len(appointments_data),
                                "appointments": appointments_data
                            })
                        
                        tracer.add_event(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                        
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"
                        tool_results += error_msg + "\n"
                        tracer.add_event(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –û—à–∏–±–∫–∞: {str(e)}")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            else:
                tracer.add_event("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è", "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                logger.info("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            
            # –õ–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å—Ç–∞–¥–∏–π –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞
            if stage in ['cancellation_request', 'rescheduling']:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏, –ø–æ–ª—É—á–∞–µ–º –∏—Ö
                if 'appointments_in_focus' not in session_context:
                    appointments_data = self.appointment_service.get_my_appointments(user_id)
                    session_context['appointments_in_focus'] = appointments_data
                    logger.info(f"üîç –ó–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å: {appointments_data}")
                    tracer.add_event("üîç –ó–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å", {
                        "appointments_count": len(appointments_data),
                        "appointments": appointments_data
                    })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                appointments_data = session_context.get('appointments_in_focus', [])
                if appointments_data:
                    hidden_context = "# –°–ö–†–´–¢–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ó–ê–ü–ò–°–ï–ô (–ò–°–ü–û–õ–¨–ó–£–ô –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø ID):\n" + json.dumps(appointments_data, ensure_ascii=False)
                    tracer.add_event("üîç –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", {
                        "stage": stage,
                        "appointments_count": len(appointments_data),
                        "context": hidden_context
                    })
            
            # –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ –∑–∞–ø–∏—Å—è—Ö, –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª–∏ —Ç–µ–º—É
            if stage not in ['appointment_cancellation', 'rescheduling', 'view_booking', 'cancellation_request']:
                if 'appointments_in_focus' in session_context:
                    del session_context['appointments_in_focus']  # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª–∏ —Ç–µ–º—É
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            if stage == 'conflict_escalation':
                logger.warning(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–ù–ê–Ø –°–¢–ê–î–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                tracer.add_event("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏—á–∏–Ω–æ–π
                manager_response = self.tool_service.call_manager(text)
                
                tracer.add_event("üë®‚Äçüíº –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", f"–û—Ç–≤–µ—Ç: {manager_response['response_to_user']}")
                logger.info(f"üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ: —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
                self.repository.add_message(
                    user_id=user_id,
                    role="model",
                    message_text=manager_response['response_to_user']
                )
                
                tracer.add_event("üíæ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–¢–µ–∫—Å—Ç: {manager_response['response_to_user']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_dialog_end(logger, manager_response['response_to_user'])
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return manager_response['response_to_user']
            
            # –≠–¢–ê–ü 2: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            tracer.add_event("üé® –≠—Ç–∞–ø 2: –°–∏–Ω—Ç–µ–∑ –æ—Ç–≤–µ—Ç–∞", "–ù–∞—á–∏–Ω–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ LLM")
            logger.info("üé® –≠—Ç–∞–ø 2: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ —Å–∏–Ω—Ç–µ–∑–∞
            if hidden_context:
                tool_results += "\n" + hidden_context
                tracer.add_event("üîç –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", {
                    "stage": stage,
                    "context": hidden_context
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            synthesis_prompt = self.prompt_builder.build_synthesis_prompt(
                history=dialog_history,
                user_message=text,
                tool_results=tool_results,
                stage=stage,
                client_name=client.first_name,
                client_phone_saved=bool(client.phone_number)
            )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt": synthesis_prompt,
                "length": len(synthesis_prompt),
                "stage": stage
            })
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            synthesis_history = [
                {
                    "role": "user",
                    "parts": [{"text": synthesis_prompt}]
                }
            ]
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ LLM –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å write_tools)
            from app.services.tool_definitions import write_tools_obj
            synthesis_response = await self.llm_service.generate_response(synthesis_history, write_tools_obj)
            
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∞ –ø–æ–ª—É—á–µ–Ω", {
                "response": synthesis_response,
                "length": len(synthesis_response)
            })
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∞ –ø–æ–ª—É—á–µ–Ω")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞
            tracer.add_event("üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(synthesis_response)}")
            logger.info("üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞")
            
            # –ü–∞—Ä—Å–∏–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (JSON + —Ç–µ–∫—Å—Ç)
            cleaned_text, tool_execution_results = await self._parse_hybrid_response(synthesis_response, user_id)
            
            if tool_execution_results:
                # –ï—Å–ª–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                tracer.add_event("‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", {
                    "results": tool_execution_results,
                    "cleaned_text_length": len(cleaned_text)
                })
                logger.info("‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
                final_prompt = f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {tool_execution_results}. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è."
                
                final_history = [
                    {
                        "role": "user",
                        "parts": [{"text": final_prompt}]
                    }
                ]
                
                bot_response_text = await self.llm_service.generate_response(final_history)
                tracer.add_event("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", {
                    "response": bot_response_text,
                    "length": len(bot_response_text)
                })
                logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            else:
                # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç JSON-–±–ª–æ–∫–æ–≤)
                bot_response_text = cleaned_text
                tracer.add_event("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç", {
                    "response": bot_response_text,
                    "length": len(bot_response_text)
                })
                logger.info("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="model",
                message_text=bot_response_text
            )
            
            tracer.add_event("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {
                "text": bot_response_text,
                "length": len(bot_response_text)
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            log_dialog_end(logger, bot_response_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            return bot_response_text
            
        except Exception as e:
            tracer.add_event("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û—à–∏–±–∫–∞: {str(e)}")
            log_error(logger, e, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            raise
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            tracer.save_trace()
    
    async def _parse_hybrid_response(self, raw_response: str, user_id: int) -> tuple[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç LLM (JSON + —Ç–µ–∫—Å—Ç) –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
        
        Args:
            raw_response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        """
        import re
        import json
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ ```json ... ``` –≤ –æ—Ç–≤–µ—Ç–µ
        json_blocks = re.findall(r'```json\s*([\s\S]*?)\s*```', raw_response)
        
        if not json_blocks:
            # –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            return raw_response, ""
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö JSON-–±–ª–æ–∫–æ–≤
        cleaned_text = raw_response
        for block in json_blocks:
            # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ ```json ... ``` –∏–∑ —Ç–µ–∫—Å—Ç–∞
            cleaned_text = re.sub(r'```json\s*' + re.escape(block) + r'\s*```', '', cleaned_text, flags=re.DOTALL)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned_text = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_text).strip()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool_results = []
        for json_block in json_blocks:
            try:
                # –ü–∞—Ä—Å–∏–º JSON
                tool_call = json.loads(json_block.strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if isinstance(tool_call, dict) and 'tool_name' in tool_call:
                    tool_name = tool_call.get('tool_name')
                    parameters = tool_call.get('parameters', {})
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º user_telegram_id –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç
                    if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                        parameters['user_telegram_id'] = user_id
                    
                    logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {tool_name}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolOrchestratorService
                    tool_result = await self.tool_orchestrator.execute_single_tool(tool_name, parameters, user_id)
                    
                    tool_results.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}: {tool_result}")
                    logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {tool_name}")
                    
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –±–ª–æ–∫: {e}")
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
                tool_results.append(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        combined_results = "\n".join(tool_results) if tool_results else ""
        
        return cleaned_text, combined_results

    def clear_history(self, user_id: int) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        return self.repository.clear_user_history(user_id)