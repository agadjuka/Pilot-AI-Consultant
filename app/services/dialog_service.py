from typing import List, Dict
import asyncio
import google.generativeai as genai
from google.generativeai import protos
from datetime import datetime, timedelta
import logging
import json
import re
from app.repositories.dialog_history_repository import DialogHistoryRepository
from app.repositories.service_repository import ServiceRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.client_repository import ClientRepository
from app.repositories.master_schedule_repository import MasterScheduleRepository
from app.services.llm_service import get_llm_service
from app.services.appointment_service import AppointmentService
from app.services.tool_service import ToolService
from app.services.db_calendar_service import DBCalendarService
from app.services.prompt_builder_service import PromptBuilderService
from app.core.dialogue_pattern_loader import dialogue_patterns
from app.services.dialogue_tracer_service import DialogueTracer
from app.core.logging_config import log_dialog_start, log_dialog_end, log_error
from app.services.tool_definitions import all_tools_dict

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DialogService:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ AI-–º–æ–¥–µ–ª—å—é.
    –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è -> –ú—ã—à–ª–µ–Ω–∏–µ -> –°–∏–Ω—Ç–µ–∑.
    """
    
    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
    CONTEXT_WINDOW_SIZE = 12
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–∏–∞–ª–æ–≥–∞.
        """
        self.repository = DialogHistoryRepository()
        self.llm_service = get_llm_service()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptBuilderService
        self.prompt_builder = PromptBuilderService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è ToolService
        self.service_repository = ServiceRepository()
        self.master_repository = MasterRepository()
        self.appointment_repository = AppointmentRepository()
        self.client_repository = ClientRepository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DB Calendar Service
        self.master_schedule_repository = MasterScheduleRepository()
        self.db_calendar_service = DBCalendarService(
            appointment_repository=self.appointment_repository,
            master_repository=self.master_repository,
            master_schedule_repository=self.master_schedule_repository
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppointmentService
        self.appointment_service = AppointmentService(
            appointment_repository=self.appointment_repository,
            client_repository=self.client_repository,
            master_repository=self.master_repository,
            service_repository=self.service_repository,
            db_calendar_service=self.db_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolService
        self.tool_service = ToolService(
            service_repository=self.service_repository,
            master_repository=self.master_repository,
            appointment_service=self.appointment_service,
            db_calendar_service=self.db_calendar_service,
            client_repository=self.client_repository
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolOrchestratorService –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        from app.services.tool_orchestrator_service import ToolOrchestratorService
        self.tool_orchestrator = ToolOrchestratorService(
            llm_service=self.llm_service,
            tool_service=self.tool_service,
            prompt_builder=self.prompt_builder,
            client_repository=self.client_repository
        )
        
        # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç: {user_id: {"appointments_in_focus": [{"id": int, "details": str}, ...], ...}}
        self.session_contexts = {}
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–∏–∞–ª–æ–≥–∞
        # –§–æ—Ä–º–∞—Ç: {user_telegram_id: {"service_name": str, "date": str, "master_name": str, ...}}
        self.dialog_contexts = {}

    def _decode_string_field(self, field_value):
        """
        –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        
        Args:
            field_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if isinstance(field_value, bytes):
            return field_value.decode('utf-8')
        return field_value
    
    def _get_filtered_tools(self, available_tools: List[str]):
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏.
        
        Args:
            available_tools: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö FunctionDeclaration –æ–±—ä–µ–∫—Ç–æ–≤
        """
        if not available_tools:
            return []
        
        filtered_tools = []
        for tool_name in available_tools:
            if tool_name in all_tools_dict:
                filtered_tools.append(all_tools_dict[tool_name])
        
        return filtered_tools
    

    def parse_stage(self, stage_str: str) -> str:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –Ω–∞ —ç—Ç–∞–ø–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞–¥–∏—é.
        
        Args:
            stage_str: –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
            
        Returns:
            ID —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        cleaned_response = stage_str.strip()
        
        # –ò—â–µ–º —Å—Ç–∞–¥–∏—é –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –æ—Ç–≤–µ—Ç–∞
        first_line = cleaned_response.split('\n')[0].strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–¥–∏—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if first_line in self.prompt_builder.dialogue_patterns:
            logger.info(f"‚úÖ –°—Ç–∞–¥–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: '{first_line}'")
            return first_line
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º —Å—Ç–∞–¥–∏—é –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
        for stage in self.prompt_builder.dialogue_patterns.keys():
            if stage in cleaned_response.lower():
                logger.info(f"‚úÖ –°—Ç–∞–¥–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: '{stage}'")
                return stage
        
        # Fallback –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è –≤ –æ—Ç–≤–µ—Ç–µ '{cleaned_response}', –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: '{first_line}'")
        return 'fallback'
    
    def extract_and_save_entities(self, tool_calls: List[Dict], user_message: str, dialog_context: Dict, tracer=None) -> None:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            tool_calls: –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            user_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dialog_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ tool_calls
        extracted_entities = {}
        
        for tool_call in tool_calls:
            params = tool_call.get('parameters', {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º service_name –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'service_name' in params and params['service_name']:
                dialog_context['service_name'] = params['service_name']
                extracted_entities['service_name'] = params['service_name']
                logger.info(f"üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω service_name –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {params['service_name']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º date –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'date' in params and params['date']:
                dialog_context['date'] = params['date']
                extracted_entities['date'] = params['date']
                logger.info(f"üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ date –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {params['date']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º master_name –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'master_name' in params and params['master_name']:
                dialog_context['master_name'] = params['master_name']
                extracted_entities['master_name'] = params['master_name']
                logger.info(f"üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω master_name –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {params['master_name']}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        if tracer and extracted_entities:
            tracer.add_event("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ tool_calls", {
                "extracted_entities": extracted_entities,
                "tool_calls_count": len(tool_calls),
                "updated_context": dialog_context
            })
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç "–≤—Å–ø–æ–º–Ω–∏—Ç—å" –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–ª —Ä–∞–Ω–µ–µ
        user_message_lower = user_message.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        import re
        date_patterns = [
            r'\d{1,2}[./]\d{1,2}[./]\d{2,4}',  # 15.01.2024 –∏–ª–∏ 15/01/24
            r'\d{1,2}\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)',  # 15 —è–Ω–≤–∞—Ä—è
            r'(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)',  # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        ]
        
        extracted_from_message = {}
        for pattern in date_patterns:
            match = re.search(pattern, user_message_lower)
            if match and 'date' not in dialog_context:
                dialog_context['date'] = match.group(0)
                extracted_from_message['date'] = match.group(0)
                logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∞ –¥–∞—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {match.group(0)}")
                break
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        if tracer and extracted_from_message:
            tracer.add_event("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
                "extracted_from_message": extracted_from_message,
                "user_message": user_message,
                "updated_context": dialog_context
            })
    
    def _parse_parameters_string(self, params_string: str) -> Dict[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ param1="value1", param2=value2 –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Args:
            params_string: –°—Ç—Ä–æ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'date="2025-10-16", service_name="–º–∞–Ω–∏–∫—é—Ä"')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {"param1": "value1", "param2": "value2"}
        """
        params = {}
        if not params_string.strip():
            return params
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä –∫–ª—é—á="–∑–Ω–∞—á–µ–Ω–∏–µ" –∏–ª–∏ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        param_pattern = r'(\w+)\s*=\s*("([^"]*)"|([^,\s]+))'
        matches = re.finditer(param_pattern, params_string)
        
        for match in matches:
            param_name = match.group(1)
            # –ì—Ä—É–ø–ø–∞ 3 - –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –≥—Ä—É–ø–ø–∞ 4 - –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
            param_value = match.group(3) if match.group(3) is not None else match.group(4)
            params[param_name] = param_value
        
        return params

    def _convert_parameter_types(self, parameters: Dict[str, str]) -> Dict[str, any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            parameters: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        converted_params = {}
        
        for key, value in parameters.items():
            if key in ['appointment_id', 'id']:
                # appointment_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å integer (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ 'id' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                try:
                    converted_params['appointment_id'] = int(value)
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                    converted_params['appointment_id'] = value
            elif key in ['master_id', 'service_id', 'user_telegram_id']:
                # ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å integer
                try:
                    converted_params[key] = int(value)
                except (ValueError, TypeError):
                    converted_params[key] = value
            elif key in ['new_time']:
                # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
                cleaned_time = str(value).strip().strip('"\'')
                converted_params[key] = cleaned_time
            elif key in ['new_date', 'date']:
                # –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                cleaned_date = str(value).strip().strip('"\'')
                converted_params[key] = cleaned_date
            elif key in ['service_name', 'master_name', 'client_name']:
                # –ò–º–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏, —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                cleaned_name = str(value).strip().strip('"\'')
                converted_params[key] = cleaned_name
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                if isinstance(value, str):
                    cleaned_value = value.strip().strip('"\'')
                    converted_params[key] = cleaned_value
                else:
                    converted_params[key] = value
        
        return converted_params

    def parse_tool_calls_from_response(self, response: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ–≤–æ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"tool_name": "...", "parameters": {...}}]
        """
        tool_calls = []
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ TOOL_CALL: function_name(param="value")
        tool_call_pattern = r'TOOL_CALL:\s*(\w+)\((.*?)\)'
        matches = re.finditer(tool_call_pattern, response, re.MULTILINE | re.DOTALL)
        
        for match in matches:
            function_name = match.group(1)
            raw_params = match.group(2).strip()
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = self._parse_parameters_string(raw_params)
            
            tool_call = {
                "tool_name": function_name,
                "parameters": params
            }
            tool_calls.append(tool_call)
            
            logger.info(f"üîß [String Parser] –ù–∞–π–¥–µ–Ω –≤—ã–∑–æ–≤: {function_name}({params})")
        
        return tool_calls

    def parse_tool_calls(self, planning_response_json: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ–≤–æ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            planning_response_json: –û—Ç–≤–µ—Ç –æ—Ç LLM (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å TOOL_CALL: –∏–ª–∏ JSON)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"tool_name": "...", "parameters": {...}}]
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        tool_calls = self.parse_tool_calls_from_response(planning_response_json)
        
        if tool_calls:
            logger.info(f"üîß [String Parser] –ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return tool_calls
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π JSON (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        logger.info("üîß [Fallback] –ü—Ä–æ–±—É–µ–º JSON-–ø–∞—Ä—Å–∏–Ω–≥")
        try:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ markdown-–±–ª–æ–∫–æ–≤
            cleaned_response = planning_response_json.strip()
            
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ ```json ... ``` –∏–ª–∏ ``` ... ```
            if cleaned_response.startswith('```'):
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞
                end_pos = cleaned_response.rfind('```')
                if end_pos > 0:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
                    content = cleaned_response[3:end_pos].strip()
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "json" –µ—Å–ª–∏ –µ—Å—Ç—å
                    if content.startswith('json'):
                        content = content[4:].strip()
                    cleaned_response = content
            
            parsed_response = json.loads(cleaned_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            if isinstance(parsed_response, dict) and 'tool_calls' in parsed_response:
                return parsed_response.get('tool_calls', [])
            elif isinstance(parsed_response, list):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [{"tool_name": "...", "parameters": {...}}]
                return parsed_response
            
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –æ—Ç–≤–µ—Ç–∞: {parsed_response}")
            return []
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            logger.error(f"‚ùå –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: '{planning_response_json}'")
            return []
    
    def parse_string_format_response(self, response: str) -> tuple[str, List[Dict]]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –≤ –Ω–æ–≤–æ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ TOOL_CALL: function_name(param="value").
        
        Args:
            response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫_–≤—ã–∑–æ–≤–æ–≤_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        """
        import re
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tool_calls = self.parse_tool_calls_from_response(response)
        
        if not tool_calls:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤
            cleaned_text = response.strip('`')
            logger.info("‚ùå –°—Ç—Ä–æ–∫–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã TOOL_CALL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤")
            return cleaned_text, []
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ TOOL_CALL:
        cleaned_text = response
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å TOOL_CALL, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        tool_call_pattern = r'`?TOOL_CALL:\s*(\w+)\((.*?)\)`?'
        cleaned_text = re.sub(tool_call_pattern, '', cleaned_text, flags=re.MULTILINE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned_text = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_text).strip()
        
        # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        cleaned_text = cleaned_text.strip('`')
        
        logger.info(f"üîß [String Format] –ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤, –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return cleaned_text, tool_calls

    def parse_hybrid_response(self, hybrid_response: str) -> tuple[str, List[Dict]]:
        """
        –ü–∞—Ä—Å–∏—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç LLM (—Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç + —Ç–µ–∫—Å—Ç) –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            hybrid_response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫_–≤—ã–∑–æ–≤–æ–≤_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        tool_calls = self.parse_tool_calls_from_response(hybrid_response)
        
        if tool_calls:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ TOOL_CALL:
            cleaned_text = hybrid_response
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å TOOL_CALL, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            tool_call_pattern = r'`?TOOL_CALL:\s*(\w+)\((.*?)\)`?'
            cleaned_text = re.sub(tool_call_pattern, '', cleaned_text, flags=re.MULTILINE)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleaned_text = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_text).strip()
            
            # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            cleaned_text = cleaned_text.strip('`')
            
            logger.info(f"üîß [Hybrid String] –ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return cleaned_text, tool_calls
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π JSON (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        logger.info("üîß [Hybrid Fallback] –ü—Ä–æ–±—É–µ–º JSON-–ø–∞—Ä—Å–∏–Ω–≥")
        import re
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ ``` ... ``` –≤ –æ—Ç–≤–µ—Ç–µ (—Å json –∏–ª–∏ –±–µ–∑)
        json_blocks = re.findall(r'```(?:json)?\s*([\s\S]*?)\s*```', hybrid_response)
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON-–±–ª–æ–∫–æ–≤: {len(json_blocks)}")
        
        if not json_blocks:
            # –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.info("‚ùå JSON-–±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç")
            return hybrid_response, []
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö JSON-–±–ª–æ–∫–æ–≤
        cleaned_text = hybrid_response
        for block in json_blocks:
            # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ ``` ... ``` –∏–∑ —Ç–µ–∫—Å—Ç–∞
            cleaned_text = re.sub(r'```(?:json)?\s*' + re.escape(block) + r'\s*```', '', cleaned_text, flags=re.DOTALL)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned_text = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_text).strip()
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ JSON-–±–ª–æ–∫–∏
        tool_calls = []
        for i, json_block in enumerate(json_blocks):
            logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ {i+1}: {json_block[:100]}...")
            try:
                # –ü–∞—Ä—Å–∏–º JSON
                tool_call = json.loads(json_block.strip())
                logger.info(f"üîß –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON: {tool_call}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON
                if isinstance(tool_call, dict):
                    # –§–æ—Ä–º–∞—Ç 1: {"tool_calls": [...]}
                    if 'tool_calls' in tool_call:
                        tool_calls_list = tool_call.get('tool_calls', [])
                        logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(tool_calls_list)} –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ")
                        tool_calls.extend(tool_calls_list)
                    
                    # –§–æ—Ä–º–∞—Ç 2: {"tool_name": "...", "parameters": {...}}
                    elif 'tool_name' in tool_call:
                        logger.info(f"üîß –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_call.get('tool_name')}")
                        tool_calls.append(tool_call)
                    else:
                        logger.warning(f"‚ö†Ô∏è JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tool_calls –∏–ª–∏ tool_name: {tool_call}")
                else:
                    logger.warning(f"‚ö†Ô∏è JSON –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {tool_call}")
                    
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –±–ª–æ–∫: {e}")
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –±–ª–æ–∫–∞: {e}")
                continue
        
        return cleaned_text, tool_calls

    async def process_user_message(self, user_id: int, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
        1. –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        2. –≠—Ç–∞–ø 2: –ú—ã—à–ª–µ–Ω–∏–µ (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ read-only –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
        3. –≠—Ç–∞–ø 3: –°–∏–Ω—Ç–µ–∑ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ write-–¥–µ–π—Å—Ç–≤–∏—è–º–∏)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        logger.info("üéØ DIALOG: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.info(f"üë§ DIALOG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        logger.info(f"üí¨ DIALOG: –°–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        log_dialog_start(logger, user_id, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_context = self.session_contexts.setdefault(user_id, {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dialog_context = self.dialog_contexts.setdefault(user_id, {})
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        tracer = DialogueTracer(user_id=user_id, user_message=text)
        
        try:
            # 0. –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) –∫–ª–∏–µ–Ω—Ç–∞
            logger.debug("--- [ASYNC DB] –í—ã–∑–æ–≤ get_or_create_by_telegram_id...")
            client = await asyncio.to_thread(self.client_repository.get_or_create_by_telegram_id, user_id)
            logger.debug("--- [ASYNC DB] ...get_or_create_by_telegram_id –ó–ê–í–ï–†–®–ï–ù.")
            decoded_first_name = self._decode_string_field(client['first_name']) if client['first_name'] else None
            decoded_phone = self._decode_string_field(client['phone_number']) if client['phone_number'] else None
            tracer.add_event("üë§ –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω", f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client['id']}, –ò–º—è: {decoded_first_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {decoded_phone}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            logger.debug(f"--- [ASYNC DB] –í—ã–∑–æ–≤ get_recent_messages –¥–ª—è user_id={user_id}...")
            history_records = await asyncio.to_thread(self.repository.get_recent_messages, user_id, limit=self.CONTEXT_WINDOW_SIZE)
            logger.debug(f"--- [ASYNC DB] ...get_recent_messages –ó–ê–í–ï–†–®–ï–ù. –ù–∞–π–¥–µ–Ω–æ {len(history_records)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
            tracer.add_event("üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history_records)} (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.CONTEXT_WINDOW_SIZE})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini
            dialog_history: List[Dict] = []
            for record in history_records:
                role = "user" if record['role'] == "user" else "model"
                decoded_message_text = self._decode_string_field(record['message_text'])
                dialog_history.append({
                    "role": role,
                    "parts": [{"text": decoded_message_text}]
                })
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            logger.debug(f"--- [ASYNC DB] –í—ã–∑–æ–≤ add_message (—Ä–æ–ª—å: user) –¥–ª—è user_id={user_id}...")
            await asyncio.to_thread(self.repository.add_message, user_id=user_id, role="user", message_text=text)
            logger.debug(f"--- [ASYNC DB] ...add_message (—Ä–æ–ª—å: user) –ó–ê–í–ï–†–®–ï–ù.")
            tracer.add_event("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", f"–†–æ–ª—å: user, –¢–µ–∫—Å—Ç: {text}")
            
            # === –≠–¢–ê–ü 1: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø ===
            tracer.add_event("üîç –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞")
            logger.info("üîç DIALOG: –≠—Ç–∞–ø 1 - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            classification_prompt = self.prompt_builder.build_classification_prompt(
                history=dialog_history,
                user_message=text
            )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt": classification_prompt,
                "length": len(classification_prompt)
            })
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            classification_history = [
                {
                    "role": "user",
                    "parts": [{"text": classification_prompt}]
                }
            ]
            
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
            stage_str = await self.llm_service.generate_response(classification_history, tracer=tracer)
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω", f"–û—Ç–≤–µ—Ç: {stage_str}")
            logger.info(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: '{stage_str}'")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç–∞–¥–∏—é
            stage = self.parse_stage(stage_str)
            tracer.add_event("üìä –°—Ç–∞–¥–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", f"–°—Ç–∞–¥–∏—è: {stage}")
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç–∞–¥–∏—è: '{stage}'")
            
            # === –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê –î–õ–Ø –û–¢–ú–ï–ù–´/–ü–ï–†–ï–ù–û–°–ê ===
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
            if stage in ['cancellation_request', 'rescheduling']:
                tracer.add_event("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞", f"–°—Ç–∞–¥–∏—è: {stage}")
                logger.info(f"üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏: {stage}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö –≤ —Å–µ—Å—Å–∏–∏
                if 'appointments_in_focus' not in session_context:
                    tracer.add_event("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞", "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–µ—Å—Å–∏–∏")
                    logger.info("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö –∫–ª–∏–µ–Ω—Ç–∞")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AppointmentService
                    appointments_data = self.appointment_service.get_my_appointments(user_id)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if appointments_data:
                        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(appointments_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                        for appointment in appointments_data:
                            logger.info(f"üìÖ –ó–∞–ø–∏—Å—å: ID={appointment['id']}, {appointment['details']}")
                    else:
                        logger.info("üì≠ –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                    
                    session_context['appointments_in_focus'] = appointments_data
                    
                    tracer.add_event("‚úÖ –ó–∞–ø–∏—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å", {
                        "appointments_count": len(appointments_data),
                        "appointments_data": appointments_data
                    })
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å: {len(appointments_data)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    tracer.add_event("‚úÖ –ó–∞–ø–∏—Å–∏ —É–∂–µ –≤ –ø–∞–º—è—Ç–∏", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(session_context['appointments_in_focus'])}")
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏")
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            if stage == 'conflict_escalation':
                logger.warning(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–ù–ê–Ø –°–¢–ê–î–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                tracer.add_event("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏—á–∏–Ω–æ–π
                manager_response = self.tool_service.call_manager(text)
                
                tracer.add_event("üë®‚Äçüíº –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", f"–û—Ç–≤–µ—Ç: {manager_response['response_to_user']}")
                logger.info(f"üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ: —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
                logger.debug(f"--- [ASYNC DB] –í—ã–∑–æ–≤ add_message (—Ä–æ–ª—å: model) –¥–ª—è user_id={user_id} (manager response)...")
                await asyncio.to_thread(self.repository.add_message, user_id=user_id, role="model", message_text=manager_response['response_to_user'])
                logger.debug(f"--- [ASYNC DB] ...add_message (—Ä–æ–ª—å: model, manager) –ó–ê–í–ï–†–®–ï–ù.")
                
                tracer.add_event("üíæ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–¢–µ–∫—Å—Ç: {manager_response['response_to_user']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_dialog_end(logger, manager_response['response_to_user'])
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return manager_response['response_to_user']
            
            # === –≠–¢–ê–ü 2: –ú–´–®–õ–ï–ù–ò–ï ===
            tracer.add_event("üß† –≠—Ç–∞–ø 2: –ú—ã—à–ª–µ–Ω–∏–µ", "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ read-only –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            logger.info("üß† DIALOG: –≠—Ç–∞–ø 2 - –ú—ã—à–ª–µ–Ω–∏–µ (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
            stage_data = self.prompt_builder.dialogue_patterns.get(stage, {})
            available_tools = stage_data.get('available_tools', [])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞–¥–∏–π –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞
            hidden_context = ""
            if stage in ['cancellation_request', 'rescheduling'] and 'appointments_in_focus' in session_context:
                appointments_data = session_context['appointments_in_focus']
                if appointments_data:
                    hidden_context = f"\n\n## –°–ö–†–´–¢–´–ô –ö–û–ù–¢–ï–ö–°–¢ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è):\n"
                    hidden_context += f"–ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
                    for appointment in appointments_data:
                        hidden_context += f"- ID: {appointment['id']}, {appointment['details']}\n"
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    tracer.add_event("üîç –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                        "stage": stage,
                        "appointments_count": len(appointments_data),
                        "hidden_context": hidden_context
                    })
                    logger.info(f"üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞–¥–∏–∏ {stage}: {len(appointments_data)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    tracer.add_event("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", f"–°—Ç–∞–¥–∏—è: {stage}, –ó–∞–ø–∏—Å–µ–π: 0")
                    logger.info(f"üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ {stage}")
            else:
                tracer.add_event("‚ÑπÔ∏è –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω", f"–°—Ç–∞–¥–∏—è: {stage}")
                logger.info(f"‚ÑπÔ∏è –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞–¥–∏–∏ {stage}")
            
            thinking_prompt = self.prompt_builder.build_thinking_prompt(
                        stage_name=stage,
                        history=dialog_history,
                        user_message=text,
                        client_name=client['first_name'],
                        client_phone_saved=bool(client['phone_number']),
                        hidden_context=hidden_context
                    )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç –º—ã—à–ª–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt_length": len(thinking_prompt),
                "stage": stage,
                "hidden_context_length": len(hidden_context),
                "has_hidden_context": bool(hidden_context)
            })
                
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            thinking_history = [
                    {
                        "role": "user",
                    "parts": [{"text": thinking_prompt}]
                }
            ]
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è (—Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)
            filtered_tools = self._get_filtered_tools(available_tools)
            thinking_response = await self.llm_service.generate_response(thinking_history, filtered_tools, tracer=tracer)
            
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç –º—ã—à–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω", {
                "response_length": len(thinking_response),
                "response": thinking_response
            })
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –º—ã—à–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –º—ã—à–ª–µ–Ω–∏—è
            tracer.add_event("üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è", f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(thinking_response)}")
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ—Ç–æ–º JSON
            cleaned_text, tool_calls = self.parse_string_format_response(thinking_response)
            if not tool_calls:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º JSON
                cleaned_text, tool_calls = self.parse_hybrid_response(thinking_response)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ tool_calls –∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if tool_calls:
                self.extract_and_save_entities(tool_calls, text, dialog_context, tracer)
                tracer.add_event("üîç –°—É—â–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", {
                    "dialog_context": dialog_context,
                    "tool_calls_count": len(tool_calls)
                })
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tool_results = ""
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö
            if tool_calls:
                tracer.add_event("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", {
                    "tool_calls": tool_calls,
                    "tool_calls_count": len(tool_calls),
                    "cleaned_text_length": len(cleaned_text)
                })
                logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tool_calls)} —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                iteration_results = []
                for tool_call in tool_calls:
                    tool_name = tool_call.get('tool_name')
                    parameters = tool_call.get('parameters', {})
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    parameters = self._convert_parameter_types(parameters)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º user_telegram_id –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç
                    if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                        parameters['user_telegram_id'] = user_id
                    
                    tracer.add_event(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
                    
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolOrchestratorService —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
                        tool_result = await self.tool_orchestrator.execute_single_tool(tool_name, parameters, user_id, dialog_context, tracer)
                        iteration_results.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}: {tool_result}")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏
                        if tool_name == 'get_my_appointments':
                            # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            logger.info(f"üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_my_appointments –≤—ã–ø–æ–ª–Ω–µ–Ω (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø–∞–º—è—Ç–∏)")
                            tracer.add_event("üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_my_appointments –≤—ã–ø–æ–ª–Ω–µ–Ω", "–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å")
                        
                        tracer.add_event(f"‚úÖ –†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result}")
                        logger.info(f"‚úÖ –†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {tool_name}")
                        
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"
                        iteration_results.append(error_msg)
                        tracer.add_event(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –û—à–∏–±–∫–∞: {str(e)}")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                if iteration_results:
                    tool_results = "\n".join(iteration_results)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –º—ã—à–ª–µ–Ω–∏—è - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if cleaned_text.strip():
                bot_response_text = cleaned_text.strip()
                tracer.add_event("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ –º—ã—à–ª–µ–Ω–∏—è", {
                    "response": bot_response_text,
                    "length": len(bot_response_text)
                })
                logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ –º—ã—à–ª–µ–Ω–∏—è")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
                logger.debug(f"--- [ASYNC DB] –í—ã–∑–æ–≤ add_message (—Ä–æ–ª—å: model) –¥–ª—è user_id={user_id} (thinking stage)...")
                await asyncio.to_thread(self.repository.add_message, user_id=user_id, role="model", message_text=bot_response_text)
                logger.debug(f"--- [ASYNC DB] ...add_message (—Ä–æ–ª—å: model, thinking) –ó–ê–í–ï–†–®–ï–ù.")
                
                tracer.add_event("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {
                    "text": bot_response_text,
                    "length": len(bot_response_text)
                })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_dialog_end(logger, bot_response_text)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                return bot_response_text
            
            # === –≠–¢–ê–ü 3: –°–ò–ù–¢–ï–ó ===
            tracer.add_event("üéØ –≠—Ç–∞–ø 3: –°–∏–Ω—Ç–µ–∑", "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏")
            logger.info("üéØ DIALOG: –≠—Ç–∞–ø 3 - –°–∏–Ω—Ç–µ–∑ (—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –º—ã—à–ª–µ–Ω–∏—è
            synthesis_prompt = self.prompt_builder.build_synthesis_prompt(
                stage_name=stage,
                history=dialog_history,
                user_message=text,
                tool_results=tool_results,
                client_name=client['first_name'],
                client_phone_saved=bool(client['phone_number']),
                hidden_context=hidden_context
            )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt_length": len(synthesis_prompt),
                "tool_results_length": len(tool_results),
                "stage": stage,
                "hidden_context_length": len(hidden_context),
                "has_hidden_context": bool(hidden_context)
            })
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            synthesis_history = [
                {
                    "role": "user",
                    "parts": [{"text": synthesis_prompt}]
                }
            ]
            
            # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ LLM –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (—Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)
            filtered_tools = self._get_filtered_tools(available_tools)
            synthesis_response = await self.llm_service.generate_response(synthesis_history, filtered_tools, tracer=tracer)
            
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∞ –ø–æ–ª—É—á–µ–Ω", {
                "response_length": len(synthesis_response),
                "response": synthesis_response
            })
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∞ –ø–æ–ª—É—á–µ–Ω")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∞
            tracer.add_event("üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞", f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(synthesis_response)}")
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ—Ç–æ–º JSON
            cleaned_text, tool_calls = self.parse_string_format_response(synthesis_response)
            if not tool_calls:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º JSON
                cleaned_text, tool_calls = self.parse_hybrid_response(synthesis_response)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ tool_calls –∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if tool_calls:
                self.extract_and_save_entities(tool_calls, text, dialog_context, tracer)
                tracer.add_event("üîç –°—É—â–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Å–∏–Ω—Ç–µ–∑)", {
                    "dialog_context": dialog_context,
                    "tool_calls_count": len(tool_calls)
                })
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö
            if tool_calls:
                tracer.add_event("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", {
                    "tool_calls": tool_calls,
                    "tool_calls_count": len(tool_calls),
                    "cleaned_text_length": len(cleaned_text)
                })
                logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tool_calls)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                for tool_call in tool_calls:
                    tool_name = tool_call.get('tool_name')
                    parameters = tool_call.get('parameters', {})
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    parameters = self._convert_parameter_types(parameters)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º user_telegram_id –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç
                    if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                        parameters['user_telegram_id'] = user_id
                    
                    tracer.add_event(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
                    
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolOrchestratorService —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
                        tool_result = await self.tool_orchestrator.execute_single_tool(tool_name, parameters, user_id, dialog_context, tracer)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                            if "–û—à–∏–±–∫–∞:" in tool_result or "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in tool_result or "–Ω–µ—Ç –ø—Ä–∞–≤" in tool_result:
                                tracer.add_event(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result}")
                                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {tool_result}")
                                # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                                bot_response_text = tool_result
                                break
                        
                        tracer.add_event(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result}")
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {tool_name}")
                        
                    except Exception as e:
                        tracer.add_event(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –û—à–∏–±–∫–∞: {str(e)}")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
                        # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                            bot_response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
                            break
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —ç—Ç–æ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            bot_response_text = cleaned_text.strip()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback
            if not bot_response_text:
                tracer.add_event("‚ö†Ô∏è Fallback –æ—Ç–≤–µ—Ç", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–∏–Ω—Ç–µ–∑–∞")
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–∏–Ω—Ç–µ–∑–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏ view_booking —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                if stage == 'view_booking':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω get_my_appointments –∏ –≤–µ—Ä–Ω—É–ª –ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if 'appointments_in_focus' in session_context:
                        appointments_data = session_context['appointments_in_focus']
                        if not appointments_data:  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
                            tracer.add_event("üì≠ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
                            logger.info("üì≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
                            bot_response_text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π."
                        else:
                            # –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Å–∏–Ω—Ç–µ–∑–æ–º
                            fallback_prompt = f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª –µ–≥–æ –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
                            fallback_history = [
                                {
                                    "role": "user",
                                    "parts": [{"text": fallback_prompt}]
                                }
                            ]
                            bot_response_text = await self.llm_service.generate_response(fallback_history, tracer=tracer)
                    else:
                        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å—è—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fallback
                        fallback_prompt = f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª –µ–≥–æ –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
                        fallback_history = [
                            {
                                "role": "user",
                                "parts": [{"text": fallback_prompt}]
                            }
                        ]
                        bot_response_text = await self.llm_service.generate_response(fallback_history, tracer=tracer)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–¥–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fallback
                    fallback_prompt = f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª –µ–≥–æ –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
                    fallback_history = [
                        {
                            "role": "user",
                            "parts": [{"text": fallback_prompt}]
                        }
                    ]
                    bot_response_text = await self.llm_service.generate_response(fallback_history, tracer=tracer)
                
                tracer.add_event("‚úÖ Fallback –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", {
                    "response": bot_response_text,
                    "length": len(bot_response_text)
                })
                logger.info("‚úÖ Fallback –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            logger.debug(f"--- [ASYNC DB] –í—ã–∑–æ–≤ add_message (—Ä–æ–ª—å: model) –¥–ª—è user_id={user_id} (final stage)...")
            await asyncio.to_thread(self.repository.add_message, user_id=user_id, role="model", message_text=bot_response_text)
            logger.debug(f"--- [ASYNC DB] ...add_message (—Ä–æ–ª—å: model, final) –ó–ê–í–ï–†–®–ï–ù.")
            
            tracer.add_event("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {
                "text": bot_response_text,
                "length": len(bot_response_text)
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            log_dialog_end(logger, bot_response_text)
            logger.info("‚úÖ DIALOG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üì§ DIALOG: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{bot_response_text[:100]}...'")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            return bot_response_text
            
        except Exception as e:
            logger.error("üí• DIALOG: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.error(f"‚ùå DIALOG: –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå DIALOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
            
            tracer.add_event("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û—à–∏–±–∫–∞: {str(e)}")
            log_error(logger, e, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            raise
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            tracer.save_trace()
    

    def clear_history(self, user_id: int) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        return self.repository.clear_user_history(user_id)