from typing import List, Dict
from sqlalchemy.orm import Session
import google.generativeai as genai
from google.generativeai import protos
from datetime import datetime, timedelta
import logging
from app.repositories.dialog_history_repository import DialogHistoryRepository
from app.repositories.service_repository import ServiceRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.client_repository import ClientRepository
from app.services.llm_service import get_llm_service
from app.services.appointment_service import AppointmentService
from app.services.tool_service import ToolService
from app.services.google_calendar_service import GoogleCalendarService
from app.services.classification_service import ClassificationService
from app.services.prompt_builder_service import PromptBuilderService
from app.services.tool_orchestrator_service import ToolOrchestratorService
from app.core.dialogue_pattern_loader import dialogue_patterns
from app.services.dialogue_tracer_service import DialogueTracer
from app.core.logging_config import log_dialog_start, log_dialog_end, log_error

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DialogService:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ AI-–º–æ–¥–µ–ª—å—é.
    """
    
    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
    CONTEXT_WINDOW_SIZE = 12
    
    def __init__(self, db_session: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
        """
        self.repository = DialogHistoryRepository(db_session)
        self.llm_service = get_llm_service()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ClassificationService
        self.classification_service = ClassificationService(self.llm_service)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptBuilderService
        self.prompt_builder = PromptBuilderService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è ToolService
        self.service_repository = ServiceRepository(db_session)
        self.master_repository = MasterRepository(db_session)
        self.appointment_repository = AppointmentRepository(db_session)
        self.client_repository = ClientRepository(db_session)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Calendar Service
        self.google_calendar_service = GoogleCalendarService()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppointmentService
        self.appointment_service = AppointmentService(
            appointment_repository=self.appointment_repository,
            client_repository=self.client_repository,
            master_repository=self.master_repository,
            service_repository=self.service_repository,
            google_calendar_service=self.google_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolService
        self.tool_service = ToolService(
            service_repository=self.service_repository,
            master_repository=self.master_repository,
            appointment_service=self.appointment_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolOrchestratorService
        self.tool_orchestrator = ToolOrchestratorService(
            llm_service=self.llm_service,
            tool_service=self.tool_service,
            prompt_builder=self.prompt_builder,
            client_repository=self.client_repository
        )
        
        # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç: {user_id: [{"id": int, "details": str}, ...]}
        self.last_shown_appointments = {}
    
    def _build_dialog_context(self, dialogue_stage: str, user_id: int, client) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–¥–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            dialogue_stage: –°—Ç–∞–¥–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client: –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è —Å—Ç–∞–¥–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –æ—Ç–º–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞
        if dialogue_stage in ['view_booking', 'cancellation_request', 'rescheduling']:
            try:
                appointments_data = self.tool_service.get_my_appointments(user_id)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
                self.last_shown_appointments[user_id] = appointments_data
                
                if appointments_data:
                    if dialogue_stage == 'view_booking':
                        appointments_text = "–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                        for appointment in appointments_data:
                            appointments_text += f"- {appointment['details']}\n"
                        return (
                            f"–î–ê–ù–ù–´–ï_–ó–ê–ü–ò–°–ï–ô: {appointments_text}. "
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π ‚Äî –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. "
                            "–ï—Å–ª–∏ —Ç–∞–º —Å–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å —Å –∑–∞–ø–∏—Å—å—é."
                        )
                    else:  # cancellation_request –∏–ª–∏ rescheduling
                        appointments_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                        for appointment in appointments_data:
                            appointments_text += f"- {appointment['details']}\n"
                        return (
                            f"–°–ö–†–´–¢–´–ô_–ö–û–ù–¢–ï–ö–°–¢_–ó–ê–ü–ò–°–ï–ô: {appointments_text} "
                            f"–û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –∏ –≤—ã–∑–æ–≤–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "
                            f"({'cancel_appointment_by_id' if dialogue_stage == 'cancellation_request' else 'reschedule_appointment_by_id'}) "
                            "—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π ID –∫–ª–∏–µ–Ω—Ç—É."
                        )
                else:
                    if dialogue_stage == 'view_booking':
                        return "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π."
                    else:
                        return "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞."
            except Exception:
                self.last_shown_appointments[user_id] = []
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π."
        
        return ""

    async def process_user_message(self, user_id: int, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤:
        1. –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î
        2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        3. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞
        4. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç–∞–¥–∏–∏
        5. –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        6. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        7. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ë–î
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        log_dialog_start(logger, user_id, text)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        tracer = DialogueTracer(user_id=user_id, user_message=text)
        
        try:
            # 0. –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) –∫–ª–∏–µ–Ω—Ç–∞
            client = self.client_repository.get_or_create_by_telegram_id(user_id)
            tracer.add_event("üë§ –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω", f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client.id}, –ò–º—è: {client.first_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number}")
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            history_records = self.repository.get_recent_messages(user_id, limit=self.CONTEXT_WINDOW_SIZE)
            tracer.add_event("üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history_records)} (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.CONTEXT_WINDOW_SIZE})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini
            dialog_history: List[Dict] = []
            for record in history_records:
                role = "user" if record.role == "user" else "model"
                dialog_history.append({
                    "role": role,
                    "parts": [{"text": record.message_text}]
                })
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="user",
                message_text=text
            )
            tracer.add_event("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", f"–†–æ–ª—å: user, –¢–µ–∫—Å—Ç: {text}")
            
            # 3. –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            stages_list = ", ".join(list(dialogue_patterns.keys()))
            classification_prompt = self.prompt_builder.build_classification_prompt(
                stages_list=stages_list,
                history=dialog_history,
                user_message=text
            )
            
            tracer.add_event("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é", {
                "prompt": classification_prompt,
                "available_stages": list(dialogue_patterns.keys())
            })
            
            stage_and_pd_and_raw = await self.classification_service.get_dialogue_stage(
                history=dialog_history,
                user_message=text,
                user_id=user_id
            )
            dialogue_stage, extracted_pd, raw_response = stage_and_pd_and_raw

            tracer.add_event("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", {
                "stage": dialogue_stage,
                "extracted_pd": extracted_pd,
                "raw_response": raw_response
            })
            logger.info(f"üéØ Gemini –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å—Ç–∞–¥–∏—é: '{dialogue_stage}'")

            # –ï—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–≤–ª–µ–∫ –ü–î–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –ë–î
            if extracted_pd:
                update_data = {}
                if extracted_pd.get('name') and not client.first_name:
                    update_data['first_name'] = extracted_pd['name']
                if extracted_pd.get('phone') and not client.phone_number:
                    update_data['phone_number'] = extracted_pd['phone']
                if update_data:
                    client = self.client_repository.update(client.id, update_data)
                    tracer.add_event("üìù –ü–î –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î", f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {list(update_data.keys())}")
            
            # 4. –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ü–ª–∞–Ω –ê –∏–ª–∏ –ü–ª–∞–Ω –ë)
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            if dialogue_stage == 'conflict_escalation':
                logger.warning(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–ù–ê–Ø –°–¢–ê–î–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                tracer.add_event("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏—á–∏–Ω–æ–π
                manager_response = self.tool_service.call_manager(text)
                
                tracer.add_event("üë®‚Äçüíº –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", f"–û—Ç–≤–µ—Ç: {manager_response['response_to_user']}")
                logger.info(f"üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ: —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
                self.repository.add_message(
                    user_id=user_id,
                    role="model",
                    message_text=manager_response['response_to_user']
                )
                
                tracer.add_event("üíæ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–¢–µ–∫—Å—Ç: {manager_response['response_to_user']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_dialog_end(logger, manager_response['response_to_user'])
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return manager_response['response_to_user']
            
            if dialogue_stage is not None:
                # –ü–ª–∞–Ω –ê: –í–∞–ª–∏–¥–Ω–∞—è —Å—Ç–∞–¥–∏—è –Ω–∞–π–¥–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–ª–æ–≥–∞
                logger.info(f"üìã –ü–ª–∞–Ω –ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–¥–∏—é '{dialogue_stage}'")
                
                tracer.add_event("üìã –ü–ª–∞–Ω –ê: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", f"–°—Ç–∞–¥–∏—è: {dialogue_stage}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                dialog_context = self._build_dialog_context(dialogue_stage, user_id, client)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptBuilderService
                system_prompt = self.prompt_builder.build_generation_prompt(
                    stage=dialogue_stage,
                    dialog_history=dialog_history,
                    dialog_context=dialog_context,
                    client_name=client.first_name,
                    client_phone_saved=bool(client.phone_number)
                )
                
                tracer.add_event("üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", {
                    "prompt": system_prompt,
                    "length": len(system_prompt),
                    "stage": dialogue_stage
                })
            else:
                # –ü–ª–∞–Ω –ë: Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                logger.info(f"üîÑ –ü–ª–∞–Ω –ë: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–º–ø—Ç")
                
                tracer.add_event("üîÑ –ü–ª–∞–Ω –ë: Fallback –ø—Ä–æ–º–ø—Ç", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptBuilderService
                system_prompt = self.prompt_builder.build_fallback_prompt(
                    dialog_context="",
                    client_name=client.first_name,
                    client_phone_saved=bool(client.phone_number)
                )
                
                tracer.add_event("üìù Fallback –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                    "prompt": system_prompt,
                    "length": len(system_prompt),
                    "type": "fallback"
                })
            
            # 5. –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tracer.add_event("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ToolOrchestrator")
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
            bot_response_text, intermediate_history = await self.tool_orchestrator.execute_tool_cycle(
                system_prompt=system_prompt,
                history=dialog_history,
                user_message=text,
                user_id=user_id,
                tracer=tracer
            )
            
            tracer.add_event("‚úÖ –¶–∏–∫–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω", {
                "final_response": bot_response_text,
                "response_length": len(bot_response_text)
            })
            logger.info("‚úÖ –¶–∏–∫–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="model",
                message_text=bot_response_text
            )
            
            tracer.add_event("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {
                "text": bot_response_text,
                "length": len(bot_response_text)
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            log_dialog_end(logger, bot_response_text)
            
            # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            return bot_response_text
            
        except Exception as e:
            tracer.add_event("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û—à–∏–±–∫–∞: {str(e)}")
            log_error(logger, e, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            raise
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            tracer.save_trace()
    
    def clear_history(self, user_id: int) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        return self.repository.clear_user_history(user_id)
    
    
    
    
    
    





