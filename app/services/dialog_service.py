from typing import List, Dict
from sqlalchemy.orm import Session
import google.generativeai as genai
from google.generativeai import protos
from datetime import datetime, timedelta
import logging
import json
import re
from app.repositories.dialog_history_repository import DialogHistoryRepository
from app.repositories.service_repository import ServiceRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.client_repository import ClientRepository
from app.services.llm_service import get_llm_service
from app.services.appointment_service import AppointmentService
from app.services.tool_service import ToolService
from app.services.google_calendar_service import GoogleCalendarService
from app.services.prompt_builder_service import PromptBuilderService
from app.core.dialogue_pattern_loader import dialogue_patterns
from app.services.dialogue_tracer_service import DialogueTracer
from app.core.logging_config import log_dialog_start, log_dialog_end, log_error

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DialogService:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ AI-–º–æ–¥–µ–ª—å—é.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è -> –ú—ã—à–ª–µ–Ω–∏–µ –∏ –†–µ—á—å (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª).
    """
    
    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
    CONTEXT_WINDOW_SIZE = 12
    
    def __init__(self, db_session: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
        """
        self.repository = DialogHistoryRepository(db_session)
        self.llm_service = get_llm_service()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptBuilderService
        self.prompt_builder = PromptBuilderService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è ToolService
        self.service_repository = ServiceRepository(db_session)
        self.master_repository = MasterRepository(db_session)
        self.appointment_repository = AppointmentRepository(db_session)
        self.client_repository = ClientRepository(db_session)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Calendar Service
        self.google_calendar_service = GoogleCalendarService()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppointmentService
        self.appointment_service = AppointmentService(
            appointment_repository=self.appointment_repository,
            client_repository=self.client_repository,
            master_repository=self.master_repository,
            service_repository=self.service_repository,
            google_calendar_service=self.google_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolService
        self.tool_service = ToolService(
            service_repository=self.service_repository,
            master_repository=self.master_repository,
            appointment_service=self.appointment_service,
            google_calendar_service=self.google_calendar_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ToolOrchestratorService –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        from app.services.tool_orchestrator_service import ToolOrchestratorService
        self.tool_orchestrator = ToolOrchestratorService(
            llm_service=self.llm_service,
            tool_service=self.tool_service,
            prompt_builder=self.prompt_builder,
            client_repository=self.client_repository
        )
        
        # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç: {user_id: {"appointments_in_focus": [{"id": int, "details": str}, ...], ...}}
        self.session_contexts = {}
    

    def parse_stage(self, stage_str: str) -> str:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –Ω–∞ —ç—Ç–∞–ø–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞–¥–∏—é.
        
        Args:
            stage_str: –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
            
        Returns:
            ID —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        cleaned_response = stage_str.strip()
        
        # –ò—â–µ–º —Å—Ç–∞–¥–∏—é –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –æ—Ç–≤–µ—Ç–∞
        first_line = cleaned_response.split('\n')[0].strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–¥–∏—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if first_line in self.prompt_builder.dialogue_patterns:
            logger.info(f"‚úÖ –°—Ç–∞–¥–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: '{first_line}'")
            return first_line
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º —Å—Ç–∞–¥–∏—é –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
        for stage in self.prompt_builder.dialogue_patterns.keys():
            if stage in cleaned_response.lower():
                logger.info(f"‚úÖ –°—Ç–∞–¥–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: '{stage}'")
                return stage
        
        # Fallback –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è –≤ –æ—Ç–≤–µ—Ç–µ '{cleaned_response}', –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: '{first_line}'")
        return 'fallback'
    
    def parse_tool_calls(self, planning_response_json: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç JSON-–æ—Ç–≤–µ—Ç –æ—Ç LLM –Ω–∞ —ç—Ç–∞–ø–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            planning_response_json: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        try:
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            cleaned_response = planning_response_json.strip()
            if cleaned_response.startswith('```') and cleaned_response.endswith('```'):
                cleaned_response = cleaned_response[3:-3].strip()
            elif cleaned_response.startswith('```json'):
                cleaned_response = cleaned_response[7:-3].strip()
            
            parsed_response = json.loads(cleaned_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            if isinstance(parsed_response, dict) and 'tool_calls' in parsed_response:
                return parsed_response.get('tool_calls', [])
            elif isinstance(parsed_response, list):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [{"tool_name": "...", "parameters": {...}}]
                return parsed_response
            
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {parsed_response}")
            return []
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            logger.error(f"‚ùå –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: '{planning_response_json}'")
            return []
    
    def parse_hybrid_response(self, hybrid_response: str) -> tuple[str, List[Dict]]:
        """
        –ü–∞—Ä—Å–∏—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç LLM (JSON + —Ç–µ–∫—Å—Ç) –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            hybrid_response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫_–≤—ã–∑–æ–≤–æ–≤_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        """
        import re
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ ``` ... ``` –≤ –æ—Ç–≤–µ—Ç–µ (—Å json –∏–ª–∏ –±–µ–∑)
        json_blocks = re.findall(r'```(?:json)?\s*([\s\S]*?)\s*```', hybrid_response)
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON-–±–ª–æ–∫–æ–≤: {len(json_blocks)}")
        
        if not json_blocks:
            # –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.info("‚ùå JSON-–±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç")
            return hybrid_response, []
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö JSON-–±–ª–æ–∫–æ–≤
        cleaned_text = hybrid_response
        for block in json_blocks:
            # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ ``` ... ``` –∏–∑ —Ç–µ–∫—Å—Ç–∞
            cleaned_text = re.sub(r'```(?:json)?\s*' + re.escape(block) + r'\s*```', '', cleaned_text, flags=re.DOTALL)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned_text = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_text).strip()
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ JSON-–±–ª–æ–∫–∏
        tool_calls = []
        for i, json_block in enumerate(json_blocks):
            logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ {i+1}: {json_block[:100]}...")
            try:
                # –ü–∞—Ä—Å–∏–º JSON
                tool_call = json.loads(json_block.strip())
                logger.info(f"üîß –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON: {tool_call}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON
                if isinstance(tool_call, dict):
                    # –§–æ—Ä–º–∞—Ç 1: {"tool_calls": [...]}
                    if 'tool_calls' in tool_call:
                        tool_calls_list = tool_call.get('tool_calls', [])
                        logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(tool_calls_list)} –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ")
                        tool_calls.extend(tool_calls_list)
                    
                    # –§–æ—Ä–º–∞—Ç 2: {"tool_name": "...", "parameters": {...}}
                    elif 'tool_name' in tool_call:
                        logger.info(f"üîß –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_call.get('tool_name')}")
                        tool_calls.append(tool_call)
                    else:
                        logger.warning(f"‚ö†Ô∏è JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tool_calls –∏–ª–∏ tool_name: {tool_call}")
                else:
                    logger.warning(f"‚ö†Ô∏è JSON –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {tool_call}")
                    
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –±–ª–æ–∫: {e}")
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –±–ª–æ–∫–∞: {e}")
                continue
        
        return cleaned_text, tool_calls

    async def process_user_message(self, user_id: int, text: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
        1. –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        2. –≠—Ç–∞–ø 2: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª "–ú—ã—à–ª–µ–Ω–∏—è –∏ –†–µ—á–∏" —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        log_dialog_start(logger, user_id, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_context = self.session_contexts.setdefault(user_id, {})
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        tracer = DialogueTracer(user_id=user_id, user_message=text)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ —Ü–∏–∫–ª–µ –º—ã—à–ª–µ–Ω–∏—è
        MAX_ITERATIONS = 5
        
        try:
            # 0. –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) –∫–ª–∏–µ–Ω—Ç–∞
            client = self.client_repository.get_or_create_by_telegram_id(user_id)
            tracer.add_event("üë§ –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω", f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client.id}, –ò–º—è: {client.first_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            history_records = self.repository.get_recent_messages(user_id, limit=self.CONTEXT_WINDOW_SIZE)
            tracer.add_event("üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history_records)} (–æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.CONTEXT_WINDOW_SIZE})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini
            dialog_history: List[Dict] = []
            for record in history_records:
                role = "user" if record.role == "user" else "model"
                dialog_history.append({
                    "role": role,
                    "parts": [{"text": record.message_text}]
                })
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="user",
                message_text=text
            )
            tracer.add_event("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", f"–†–æ–ª—å: user, –¢–µ–∫—Å—Ç: {text}")
            
            # --- –≠–¢–ê–ü 1: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø ---
            tracer.add_event("üîç –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞")
            logger.info("üîç –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            classification_prompt = self.prompt_builder.build_classification_prompt(
                history=dialog_history,
                user_message=text
            )
            
            tracer.add_event("üìù –ü—Ä–æ–º–ø—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                "prompt": classification_prompt,
                "length": len(classification_prompt)
            })
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
            classification_history = [
                {
                    "role": "user",
                    "parts": [{"text": classification_prompt}]
                }
            ]
            
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
            stage_str = await self.llm_service.generate_response(classification_history, tracer=tracer)
            tracer.add_event("‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω", f"–û—Ç–≤–µ—Ç: {stage_str}")
            logger.info(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: '{stage_str}'")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç–∞–¥–∏—é
            stage = self.parse_stage(stage_str)
            tracer.add_event("üìä –°—Ç–∞–¥–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", f"–°—Ç–∞–¥–∏—è: {stage}")
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç–∞–¥–∏—è: '{stage}'")
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
            if stage == 'conflict_escalation':
                logger.warning(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–ù–ê–Ø –°–¢–ê–î–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                tracer.add_event("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏—á–∏–Ω–æ–π
                manager_response = self.tool_service.call_manager(text)
                
                tracer.add_event("üë®‚Äçüíº –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", f"–û—Ç–≤–µ—Ç: {manager_response['response_to_user']}")
                logger.info(f"üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ: —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
                self.repository.add_message(
                    user_id=user_id,
                    role="model",
                    message_text=manager_response['response_to_user']
                )
                
                tracer.add_event("üíæ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–¢–µ–∫—Å—Ç: {manager_response['response_to_user']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                log_dialog_end(logger, manager_response['response_to_user'])
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return manager_response['response_to_user']
            
            # --- –≠–¢–ê–ü 2: –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ "–ú–´–®–õ–ï–ù–ò–Ø –ò –†–ï–ß–ò" ---
            tracer.add_event("üß† –≠—Ç–∞–ø 2: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è", f"–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {MAX_ITERATIONS}")
            logger.info("üß† –≠—Ç–∞–ø 2: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è –∏ —Ä–µ—á–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã patterns
            stage_data = self.prompt_builder.dialogue_patterns.get(stage, {})
            stage_goal = stage_data.get('goal', '–ü–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É')
            stage_scenario = stage_data.get('scenario', [])
            available_tools = stage_data.get('available_tools', [])
            
            tracer.add_event("üìã –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", {
                "stage": stage,
                "goal": stage_goal,
                "scenario_steps": len(stage_scenario),
                "available_tools": available_tools
            })
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ü–∏–∫–ª–∞ –º—ã—à–ª–µ–Ω–∏—è
            tool_results = ""
            bot_response_text = ""
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è
            for iteration in range(MAX_ITERATIONS):
                tracer.add_event(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}", f"–¶–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è")
                logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}/{MAX_ITERATIONS} —Ü–∏–∫–ª–∞ –º—ã—à–ª–µ–Ω–∏—è")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if iteration == 0:
                    # –ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)
                    main_prompt = self.prompt_builder.build_planning_prompt(
                        stage_name=stage,
                        stage_scenario=stage_scenario,
                        available_tools=available_tools,
                        history=dialog_history,
                        user_message=text,
                        client_name=client.first_name,
                        client_phone_saved=bool(client.phone_number)
                    )
                else:
                    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ - —Å–∏–Ω—Ç–µ–∑
                    main_prompt = self.prompt_builder.build_synthesis_prompt(
                        stage_name=stage,
                        stage_scenario=stage_scenario,
                        available_tools=available_tools,
                        history=dialog_history,
                        user_message=text,
                        tool_results=tool_results,
                        client_name=client.first_name,
                        client_phone_saved=bool(client.phone_number)
                    )
                
                tracer.add_event(f"üìù –ü—Ä–æ–º–ø—Ç –º—ã—à–ª–µ–Ω–∏—è {iteration + 1} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", {
                    "prompt_length": len(main_prompt),
                    "tool_results_length": len(tool_results),
                    "stage": stage
                })
                
                # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM
                main_history = [
                    {
                        "role": "user",
                        "parts": [{"text": main_prompt}]
                    }
                ]
                
                # –í—ã–∑–æ–≤ LLM —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
                from app.services.tool_definitions import all_tools_dict
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Å—Ç–∞–¥–∏–∏
                stage_tools = []
                if available_tools:
                    for tool_name in available_tools:
                        if tool_name in all_tools_dict:
                            stage_tools.append(all_tools_dict[tool_name])
                
                tracer.add_event(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–∞–¥–∏–∏ {iteration + 1}", {
                    "available_tools": available_tools,
                    "filtered_tools_count": len(stage_tools),
                    "tool_names": [tool.name for tool in stage_tools]
                })
                
                main_response = await self.llm_service.generate_response(main_history, stage_tools, tracer=tracer)
                
                tracer.add_event(f"‚úÖ –û—Ç–≤–µ—Ç –º—ã—à–ª–µ–Ω–∏—è {iteration + 1} –ø–æ–ª—É—á–µ–Ω", {
                    "response_length": len(main_response),
                    "iteration": iteration + 1
                })
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –º—ã—à–ª–µ–Ω–∏—è {iteration + 1} –ø–æ–ª—É—á–µ–Ω")
                
                # –ü–∞—Ä—Å–∏–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (JSON + —Ç–µ–∫—Å—Ç)
                tracer.add_event(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ {iteration + 1}", f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(main_response)}")
                logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è {iteration + 1}")
                
                cleaned_text, tool_calls = self.parse_hybrid_response(main_response)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
                if tool_calls:
                    # –ï—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö
                    tracer.add_event(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ {iteration + 1}", {
                        "tool_calls": tool_calls,
                        "tool_calls_count": len(tool_calls),
                        "cleaned_text_length": len(cleaned_text)
                    })
                    logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    iteration_results = []
                    for tool_call in tool_calls:
                        tool_name = tool_call.get('tool_name')
                        parameters = tool_call.get('parameters', {})
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º user_telegram_id –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç
                        if tool_name in ['cancel_appointment_by_id', 'reschedule_appointment_by_id']:
                            parameters['user_telegram_id'] = user_id
                        
                        tracer.add_event(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {iteration + 1}", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
                        
                        try:
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolOrchestratorService
                            tool_result = await self.tool_orchestrator.execute_single_tool(tool_name, parameters, user_id)
                            iteration_results.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}: {tool_result}")
                            
                            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏
                            if tool_name == 'get_my_appointments':
                                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AppointmentService
                                appointments_data = self.appointment_service.get_my_appointments(user_id)
                                session_context['appointments_in_focus'] = appointments_data
                                logger.info(f"üîç –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å: {appointments_data}")
                                tracer.add_event("üîç –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å", {
                                    "appointments_count": len(appointments_data),
                                    "appointments": appointments_data
                                })
                            
                            tracer.add_event(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {iteration + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result}")
                            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {tool_name}")
                            
                        except Exception as e:
                            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"
                            iteration_results.append(error_msg)
                            tracer.add_event(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {iteration + 1}", f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –û—à–∏–±–∫–∞: {str(e)}")
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name} –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if iteration_results:
                        tool_results += f"\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1} ---\n" + "\n".join(iteration_results) + "\n"
                    
                    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)
                    if iteration == 0:  # –ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è (iteration + 1 = 1)
                        tracer.add_event(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}", {
                            "ignored_text": cleaned_text.strip(),
                            "reason": "–ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"
                        })
                        logger.info(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1} - —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                    elif cleaned_text.strip():
                        # –ù–∞ –≤—Ç–æ—Ä–æ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        bot_response_text = cleaned_text.strip()
                        tracer.add_event(f"üìù –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ {iteration + 1}", {
                            "text": bot_response_text,
                            "length": len(bot_response_text)
                        })
                        logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    continue
                    
                elif cleaned_text.strip():
                    # –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    bot_response_text = cleaned_text.strip()
                    tracer.add_event(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}", {
                        "response": bot_response_text,
                        "length": len(bot_response_text),
                        "iteration": iteration + 1
                    })
                    logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    break
                    
                else:
                    # –ù–µ—Ç –Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –Ω–∏ —Ç–µ–∫—Å—Ç–∞ - —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                    tracer.add_event(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}", "–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞")
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    break
            
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback
            if not bot_response_text.strip():
                tracer.add_event("‚ö†Ô∏è Fallback –æ—Ç–≤–µ—Ç", "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                logger.warning("‚ö†Ô∏è –¶–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback")
                
                fallback_prompt = f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª –µ–≥–æ –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
                fallback_history = [
                    {
                        "role": "user",
                        "parts": [{"text": fallback_prompt}]
                    }
                ]
                
                bot_response_text = await self.llm_service.generate_response(fallback_history, tracer=tracer)
                tracer.add_event("‚úÖ Fallback –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", {
                    "response": bot_response_text,
                    "length": len(bot_response_text)
                })
                logger.info("‚úÖ Fallback –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            self.repository.add_message(
                user_id=user_id,
                role="model",
                message_text=bot_response_text
            )
            
            tracer.add_event("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {
                "text": bot_response_text,
                "length": len(bot_response_text)
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            log_dialog_end(logger, bot_response_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            return bot_response_text
            
        except Exception as e:
            tracer.add_event("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û—à–∏–±–∫–∞: {str(e)}")
            log_error(logger, e, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            raise
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            tracer.save_trace()
    

    def clear_history(self, user_id: int) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        return self.repository.clear_user_history(user_id)