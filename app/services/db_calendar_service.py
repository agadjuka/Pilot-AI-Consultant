"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–º–µ–Ω—è–µ—Ç Google Calendar Service –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
from datetime import datetime, timedelta, time, date
from typing import List, Dict, Optional, Tuple
from zoneinfo import ZoneInfo
import logging

from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.master_repository import MasterRepository
from app.repositories.schedule_repository import WorkScheduleRepository, ScheduleExceptionRepository

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DBCalendarService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AppointmentRepository –∏ MasterRepository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏.
    """
    
    def __init__(
        self,
        appointment_repository: AppointmentRepository,
        master_repository: MasterRepository,
        work_schedule_repository: WorkScheduleRepository,
        schedule_exception_repository: ScheduleExceptionRepository
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
            master_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
            work_schedule_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ä–∞–±–æ—Ç—ã
            schedule_exception_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
        """
        self.appointment_repository = appointment_repository
        self.master_repository = master_repository
        self.work_schedule_repository = work_schedule_repository
        self.schedule_exception_repository = schedule_exception_repository
    
    def create_event(
        self,
        master_id: int,
        service_id: int,
        user_telegram_id: int,
        start_time: datetime,
        end_time: datetime,
        description: str
    ) -> int:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
        
        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            service_id: ID —É—Å–ª—É–≥–∏
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Returns:
            int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìù [DB CALENDAR] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: master_id={master_id}, service_id={service_id}, user_id={user_telegram_id}, start={start_time}, end={end_time}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            appointment_data = {
                'user_telegram_id': user_telegram_id,
                'master_id': master_id,
                'service_id': service_id,
                'start_time': start_time,
                'end_time': end_time
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            appointment = self.appointment_repository.create(appointment_data)
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {appointment['id']}")
            return appointment['id']
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def delete_event(self, appointment_id: int) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üóëÔ∏è [DB CALENDAR] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            deleted = self.appointment_repository.delete_by_id(appointment_id)
            
            if not deleted:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def update_event(
        self,
        appointment_id: int,
        new_start_time: datetime,
        new_end_time: datetime
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_start_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            new_end_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìÖ [DB CALENDAR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}, new_start={new_start_time}, new_end={new_end_time}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                'start_time': new_start_time,
                'end_time': new_end_time
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            updated_appointment = self.appointment_repository.update(appointment_id, update_data)
            
            if not updated_appointment:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def get_free_slots(
        self,
        date: str,
        duration_minutes: int,
        master_names: List[str]
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
            duration_minutes: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            master_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'start': '10:15', 'end': '13:45'}, ...]
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        """
        try:
            logger.info(f"üîç [DB CALENDAR] –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: date={date}, duration={duration_minutes} –º–∏–Ω, masters={master_names}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                target_date = datetime.strptime(date, "%Y-%m-%d").date()
            except ValueError:
                raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            
            # –ù–∞—Ö–æ–¥–∏–º master_ids –ø–æ –∏–º–µ–Ω–∞–º –º–∞—Å—Ç–µ—Ä–æ–≤
            master_ids = self._get_master_ids_by_names(master_names)
            if not master_ids:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: {master_names}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            all_free_slots = []
            for master_id in master_ids:
                master_slots = self._get_free_slots_for_master(target_date, duration_minutes, master_id)
                all_free_slots.extend(master_slots)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            unique_slots = self._deduplicate_and_sort_slots(all_free_slots)
            
            logger.info(f"‚úÖ [DB CALENDAR] –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {len(unique_slots)}")
            return unique_slots
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
    
    def _get_master_ids_by_names(self, master_names: List[str]) -> List[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç ID –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º.
        
        Args:
            master_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤
        
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤
        """
        master_ids = []
        if master_names:
            all_masters = self.master_repository.get_all()
            for master_name in master_names:
                master = next((m for m in all_masters if master_name.lower() in m['name'].lower()), None)
                if master:
                    master_ids.append(master['id'])
                    logger.info(f"‚úÖ [DB CALENDAR] –ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä: {master_name} -> ID {master['id']}")
                else:
                    logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {master_name}")
        return master_ids
    
    def _get_free_slots_for_master(
        self, 
        target_date: date, 
        duration_minutes: int, 
        master_id: int
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            duration_minutes: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        """
        # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É
        work_time = self._get_master_work_time(target_date, master_id)
        if not work_time:
            logger.info(f"üìÖ [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä {master_id} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç {target_date}")
            return []
        
        start_time, end_time = work_time
        logger.info(f"‚è∞ [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä {master_id} —Ä–∞–±–æ—Ç–∞–µ—Ç {target_date}: {start_time} - {end_time}")
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–∏–¥–µ–∞–ª—å–Ω–æ–π" —Å–µ—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
        timeslot_grid = self._generate_timeslot_grid(start_time, end_time, target_date)
        logger.info(f"üìä [DB CALENDAR] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(timeslot_grid)} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ "–≤—ã—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ" –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        occupied_slots = self._get_occupied_slots(target_date, master_id)
        free_slots = self._filter_occupied_slots(timeslot_grid, occupied_slots)
        logger.info(f"üÜì [DB CALENDAR] –û—Å—Ç–∞–ª–æ—Å—å {len(free_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
        
        # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        contiguous_intervals = self._find_contiguous_intervals(free_slots, duration_minutes)
        logger.info(f"üîó [DB CALENDAR] –ù–∞–π–¥–µ–Ω–æ {len(contiguous_intervals)} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
        
        return contiguous_intervals
    
    def _get_master_work_time(self, target_date: date, master_id: int) -> Optional[Tuple[time, time]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        
        Returns:
            Optional[Tuple[time, time]]: –ö–æ—Ä—Ç–µ–∂ (start_time, end_time) –∏–ª–∏ None –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
        exception = self.schedule_exception_repository.find_by_master_and_date(master_id, target_date)
        
        if exception:
            if exception['is_day_off']:
                logger.info(f"üö´ [DB CALENDAR] –£ –º–∞—Å—Ç–µ—Ä–∞ {master_id} –≤—ã—Ö–æ–¥–Ω–æ–π {target_date}")
                return None
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                start_time = exception['start_time']
                end_time = exception['end_time']
                logger.info(f"üìù [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä {master_id} –∏–º–µ–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {target_date}: {start_time} - {end_time}")
                return (start_time, end_time)
        
        # –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        day_of_week = target_date.weekday()  # 0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        schedule = self.work_schedule_repository.find_by_master_and_day(master_id, day_of_week)
        
        if not schedule:
            logger.info(f"üìÖ [DB CALENDAR] –£ –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ {target_date} (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ {day_of_week})")
            return None
        
        start_time = schedule['start_time']
        end_time = schedule['end_time']
        logger.info(f"üìã [DB CALENDAR] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {target_date}: {start_time} - {end_time}")
        
        return (start_time, end_time)
    
    def _generate_timeslot_grid(self, start_time: time, end_time: time, target_date: date) -> List[time]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ—Ç–∫—É 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞.
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
        
        Returns:
            List[time]: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        slots = []
        current_time = start_time
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        moscow_tz = ZoneInfo('Europe/Moscow')
        now = datetime.now(moscow_tz)
        if target_date == now.date():
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ = —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å
            min_booking_time = now + timedelta(hours=1)
            min_time = min_booking_time.time()
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–ª—É—á–∞—Å–∞ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if min_booking_time.minute > 30:
                min_time = time(min_booking_time.hour + 1, 0)
            elif min_booking_time.minute > 0:
                min_time = time(min_booking_time.hour, 30)
            else:
                min_time = time(min_booking_time.hour, 0)
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            if min_time > start_time:
                current_time = min_time
        
        while current_time < end_time:
            slots.append(current_time)
            # –î–æ–±–∞–≤–ª—è–µ–º 15 –º–∏–Ω—É—Ç
            current_datetime = datetime.combine(target_date, current_time)
            current_datetime += timedelta(minutes=15)
            current_time = current_datetime.time()
        
        return slots
    
    def _get_occupied_slots(self, target_date: date, master_id: int) -> List[Tuple[time, time]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        
        Returns:
            List[Tuple[time, time]]: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (start_time, end_time)
        """
        moscow_tz = ZoneInfo('Europe/Moscow')
        day_start = datetime.combine(target_date, time.min).replace(tzinfo=moscow_tz)
        day_end = datetime.combine(target_date, time.max).replace(tzinfo=moscow_tz)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        occupied_appointments = self._get_appointments_for_master_on_date(master_id, day_start, day_end)
        
        occupied_slots = []
        for appointment in occupied_appointments:
            start_time = appointment.start_time.time()
            end_time = appointment.end_time.time()
            occupied_slots.append((start_time, end_time))
        
        return occupied_slots
    
    def _filter_occupied_slots(self, timeslot_grid: List[time], occupied_slots: List[Tuple[time, time]]) -> List[time]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Å–µ—Ç–∫–∏.
        
        Args:
            timeslot_grid: –°–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            occupied_slots: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        
        Returns:
            List[time]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        free_slots = []
        
        for slot_time in timeslot_grid:
            is_occupied = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –∑–∞–Ω—è—Ç—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            for occupied_start, occupied_end in occupied_slots:
                # –°–ª–æ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∑–∞–Ω—è—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if occupied_start <= slot_time < occupied_end:
                    is_occupied = True
                    break
            
            if not is_occupied:
                free_slots.append(slot_time)
        
        return free_slots
    
    def _find_contiguous_intervals(self, free_slots: List[time], duration_minutes: int) -> List[Dict[str, str]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            free_slots: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            duration_minutes: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'start': '10:00', 'end': '11:30'}, ...]
        """
        if not free_slots:
            return []
        
        intervals = []
        current_start = free_slots[0]
        current_end = free_slots[0]
        
        for i in range(1, len(free_slots)):
            slot_time = free_slots[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å–ª–µ–¥—É—é—â–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç)
            expected_time = datetime.combine(date.today(), current_end) + timedelta(minutes=15)
            if slot_time == expected_time.time():
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                current_end = slot_time
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                interval_duration = self._calculate_interval_duration(current_start, current_end)
                if interval_duration >= duration_minutes:
                    intervals.append({
                        'start': current_start.strftime('%H:%M'),
                        'end': (datetime.combine(date.today(), current_end) + timedelta(minutes=15)).strftime('%H:%M')
                    })
                
                current_start = slot_time
                current_end = slot_time
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        interval_duration = self._calculate_interval_duration(current_start, current_end)
        if interval_duration >= duration_minutes:
            intervals.append({
                'start': current_start.strftime('%H:%M'),
                'end': (datetime.combine(date.today(), current_end) + timedelta(minutes=15)).strftime('%H:%M')
            })
        
        return intervals
    
    def _calculate_interval_duration(self, start_time: time, end_time: time) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö.
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        
        Returns:
            int: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        start_datetime = datetime.combine(date.today(), start_time)
        end_datetime = datetime.combine(date.today(), end_time)
        duration = end_datetime - start_datetime
        return int(duration.total_seconds() // 60) + 15  # +15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ—Ç–∞
    
    def _deduplicate_and_sort_slots(self, all_slots: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """
        –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã.
        
        Args:
            all_slots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
        
        Returns:
            List[Dict[str, str]]: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        """
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_slots = []
        seen = set()
        
        for slot in all_slots:
            slot_key = f"{slot['start']}-{slot['end']}"
            if slot_key not in seen:
                seen.add(slot_key)
                unique_slots.append(slot)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        unique_slots.sort(key=lambda x: x['start'])
        
        return unique_slots
    
    def _get_appointments_for_master_on_date(
        self,
        master_id: int,
        day_start: datetime,
        day_end: datetime
    ) -> List:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            day_start: –ù–∞—á–∞–ª–æ –¥–Ω—è
            day_end: –ö–æ–Ω–µ—Ü –¥–Ω—è
        
        Returns:
            List: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        """
        from sqlalchemy import and_
        
        return (
            self.appointment_repository.db.query(self.appointment_repository.model)
            .filter(
                and_(
                    self.appointment_repository.model.master_id == master_id,
                    self.appointment_repository.model.start_time >= day_start,
                    self.appointment_repository.model.start_time <= day_end
                )
            )
            .all()
        )
