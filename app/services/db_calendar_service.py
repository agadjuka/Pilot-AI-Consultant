"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–º–µ–Ω—è–µ—Ç Google Calendar Service –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
from datetime import datetime, timedelta, time, date
from typing import List, Dict, Optional, Tuple, Any
from zoneinfo import ZoneInfo
import logging

from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.master_repository import MasterRepository

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DBCalendarService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AppointmentRepository –∏ MasterRepository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏.
    """
    
    def __init__(
        self,
        appointment_repository: AppointmentRepository,
        master_repository: MasterRepository
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
            master_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
        """
        self.appointment_repository = appointment_repository
        self.master_repository = master_repository
    
    def create_event(
        self,
        master_id: int,
        service_id: int,
        user_telegram_id: int,
        start_time: datetime,
        end_time: datetime,
        description: str
    ) -> int:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
        
        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            service_id: ID —É—Å–ª—É–≥–∏
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Returns:
            int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìù [DB CALENDAR] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: master_id={master_id}, service_id={service_id}, user_id={user_telegram_id}, start={start_time}, end={end_time}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            appointment_data = {
                'user_telegram_id': user_telegram_id,
                'master_id': master_id,
                'service_id': service_id,
                'start_time': start_time,
                'end_time': end_time
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            appointment = self.appointment_repository.create(appointment_data)
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {appointment['id']}")
            return appointment['id']
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def delete_event(self, appointment_id: int) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üóëÔ∏è [DB CALENDAR] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            deleted = self.appointment_repository.delete_by_id(appointment_id)
            
            if not deleted:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def update_event(
        self,
        appointment_id: int,
        new_start_time: datetime,
        new_end_time: datetime
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_start_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            new_end_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìÖ [DB CALENDAR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}, new_start={new_start_time}, new_end={new_end_time}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                'start_time': new_start_time,
                'end_time': new_end_time
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            updated_appointment = self.appointment_repository.update(appointment_id, update_data)
            
            if not updated_appointment:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def get_free_slots(
        self,
        date: str,
        duration_minutes: int,
        master_ids: List[int],
        tracer=None
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º "–¢–∞–π–º–ª–∞–π–Ω –∑–∞–Ω—è—Ç–æ—Å—Ç–∏" –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
            duration_minutes: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            master_ids: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            tracer: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'start': '10:15', 'end': '13:45'}, ...]
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        """
        try:
            logger.info(f"üîç [TRACE] –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤: {date}, {duration_minutes}–º–∏–Ω, –º–∞—Å—Ç–µ—Ä–∞ {master_ids}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if tracer:
                tracer.add_event("–ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê –°–õ–û–¢–û–í", f"–î–∞—Ç–∞: {date}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω, ID –ú–∞—Å—Ç–µ—Ä–æ–≤: {master_ids}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                target_date = datetime.strptime(date, "%Y-%m-%d").date()
            except ValueError:
                raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            
            if not master_ids:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
                if tracer:
                    tracer.add_event("–ü–£–°–¢–û–ô –°–ü–ò–°–û–ö –ú–ê–°–¢–ï–†–û–í", "–ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
                return []
            
            # –®–∞–≥ 1: –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            work_intervals = self._get_work_intervals_for_masters(target_date, master_ids)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
            if tracer:
                tracer.add_event("–†–ê–ë–û–ß–ò–ï –ì–†–ê–§–ò–ö–ò –ù–ê–ô–î–ï–ù–´", f"–ì—Ä–∞—Ñ–∏–∫–∏: {work_intervals}")
            
            if not work_intervals:
                logger.info(f"üìÖ [DB CALENDAR] –ù–∏ –æ–¥–∏–Ω –∏–∑ –º–∞—Å—Ç–µ—Ä–æ–≤ {master_ids} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç {target_date}")
                if tracer:
                    tracer.add_event("–ú–ê–°–¢–ï–†–ê –ù–ï –†–ê–ë–û–¢–ê–Æ–¢", f"–î–∞—Ç–∞: {target_date}, –ú–∞—Å—Ç–µ—Ä–∞: {master_ids}")
                return []
            
            # –®–∞–≥ 2: –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            appointments = self._get_appointments_for_masters_on_date(target_date, master_ids)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            if tracer:
                tracer.add_event("–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò", f"–ù–∞–π–¥–µ–Ω–æ {len(appointments)} –∑–∞–ø–∏—Å–µ–π: {appointments}")
            
            # –®–∞–≥ 3: –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —á–µ—Ä–µ–∑ —Ç–∞–π–º–ª–∞–π–Ω
            free_intervals = self._calculate_free_intervals_timeline(target_date, work_intervals, appointments, tracer)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if tracer:
                tracer.add_event("–ù–ê–ô–î–ï–ù–ù–´–ï –°–í–û–ë–û–î–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´", f"{free_intervals}")
            
            # –®–∞–≥ 4: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            filtered_intervals = self._filter_intervals_by_duration(free_intervals, duration_minutes)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if tracer:
                tracer.add_event("–§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–ü–û–°–õ–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò)", f"{filtered_intervals}")
            
            logger.info(f"‚úÖ [TRACE] –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(filtered_intervals)} —Å–ª–æ—Ç–æ–≤")
            
            return filtered_intervals
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
            if tracer:
                tracer.add_event("–û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –°–õ–û–¢–û–í", f"–û—à–∏–±–∫–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
    
    def _get_work_intervals_for_masters(self, target_date: date, master_ids: List[int]) -> Dict[int, Tuple[time, time]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            master_ids: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤
        
        Returns:
            Dict[int, Tuple[time, time]]: –°–ª–æ–≤–∞—Ä—å {master_id: (start_time, end_time)}
        """
        work_intervals = {}
        working_masters = []
        
        for master_id in master_ids:
            work_time = self._get_master_work_time(target_date, master_id)
            if work_time:
                start_time, end_time = work_time
                work_intervals[master_id] = (start_time, end_time)
                working_masters.append(f"{master_id}({start_time}-{end_time})")
        
        logger.info(f"üë• [TRACE] –†–∞–±–æ—á–∏–µ –º–∞—Å—Ç–µ—Ä–∞: {', '.join(working_masters) if working_masters else '–Ω–µ—Ç'}")
        return work_intervals
    
    def _get_appointments_for_masters_on_date(self, target_date: date, master_ids: List[int]) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            master_ids: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        """
        from app.core.database import execute_query
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
        master_ids_str = ','.join(map(str, master_ids))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        query = f"""
            SELECT * FROM appointments 
            WHERE master_id IN ({master_ids_str})
            AND CAST(start_time AS Date) = CAST('{target_date}' AS Date)
            ORDER BY start_time
        """
        
        rows = execute_query(query)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        appointments = []
        for row in rows:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            appointment = self.appointment_repository._row_to_dict(row)
            appointments.append(appointment)
        
        logger.info(f"üìÖ [TRACE] –ó–∞–ø–∏—Å–∏: {len(appointments)}—à—Ç")
        return appointments
    
    def _calculate_free_intervals_timeline(self, target_date: date, work_intervals: Dict[int, Tuple[time, time]], appointments: List[Dict[str, Any]], tracer=None) -> List[Dict[str, str]]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º "–¢–∞–π–º–ª–∞–π–Ω –∑–∞–Ω—è—Ç–æ—Å—Ç–∏".
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
            work_intervals: –°–ª–æ–≤–∞—Ä—å —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
            appointments: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        """
        timeline = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤
        for master_id, (start_time, end_time) in work_intervals.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º time –≤ datetime, –æ–±—ä–µ–¥–∏–Ω—è—è —Å —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–æ–π
            start_datetime = datetime.combine(target_date, start_time)
            end_datetime = datetime.combine(target_date, end_time)
            
            timeline.append((start_datetime, 1, 'work_start', master_id))  # +1 —Å–≤–æ–±–æ–¥–µ–Ω
            timeline.append((end_datetime, -1, 'work_end', master_id))     # -1 —É—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–µ–π
        for appointment in appointments:
            start_time = appointment['start_time']
            end_time = appointment['end_time']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            if isinstance(start_time, datetime):
                start_datetime = start_time
            elif hasattr(start_time, 'time'):
                start_datetime = datetime.combine(target_date, start_time.time())
            elif isinstance(start_time, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                try:
                    start_datetime = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å
                    logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {start_time}")
                    continue
            else:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞: {type(start_time)}")
                continue
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            if isinstance(end_time, datetime):
                end_datetime = end_time
            elif hasattr(end_time, 'time'):
                end_datetime = datetime.combine(target_date, end_time.time())
            elif isinstance(end_time, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                try:
                    end_datetime = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å
                    logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {end_time}")
                    continue
            else:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {type(end_time)}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if isinstance(start_datetime, datetime) and isinstance(end_datetime, datetime):
                timeline.append((start_datetime, -1, 'appointment_start', appointment['master_id']))  # -1 –∑–∞–Ω—è—Ç
                timeline.append((end_datetime, 1, 'appointment_end', appointment['master_id']))       # +1 –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è
            else:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: start={type(start_datetime)}, end={type(end_datetime)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π —Ç–∞–π–º–ª–∞–π–Ω –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if tracer:
            tracer.add_event("–°–´–†–û–ô –¢–ê–ô–ú–õ–ê–ô–ù (–î–û –°–û–†–¢–ò–†–û–í–ö–ò)", f"{timeline}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–ª–∞–π–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        timeline.sort(key=lambda x: x[0])
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç [DEBUG] –¢–∞–π–º–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏–π:")
        for timestamp, delta, event_type, master_id in timeline:
            logger.info(f"  {timestamp.strftime('%H:%M')} | {event_type} | –ú–∞—Å—Ç–µ—Ä {master_id} | Delta: {delta}")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–∞–π–º–ª–∞–π–Ω—É –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        free_intervals = []
        available_masters = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        current_start = None
        
        for timestamp, delta, event_type, master_id in timeline:
            if event_type in ['work_start', 'appointment_end']:
                # –ú–∞—Å—Ç–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º
                available_masters.add(master_id)
            elif event_type in ['work_end', 'appointment_start']:
                # –ú–∞—Å—Ç–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
                available_masters.discard(master_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
            has_available_masters = len(available_masters) > 0
            
            if has_available_masters and current_start is None:
                # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                current_start = timestamp
            elif not has_available_masters and current_start is not None:
                # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                free_intervals.append({
                    'start': current_start.strftime('%H:%M'),
                    'end': timestamp.strftime('%H:%M')
                })
                current_start = None
        
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        if current_start is not None:
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            max_end_time = max(end_time for _, end_time in work_intervals.values())
            max_end_datetime = datetime.combine(target_date, max_end_time)
            free_intervals.append({
                'start': current_start.strftime('%H:%M'),
                'end': max_end_datetime.strftime('%H:%M')
            })
        
        logger.info(f"üîó [TRACE] –°–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: {len(free_intervals)}—à—Ç")
        return free_intervals
    
    def _filter_intervals_by_duration(self, intervals: List[Dict[str, str]], duration_minutes: int) -> List[Dict[str, str]]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            intervals: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            duration_minutes: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        Returns:
            List[Dict[str, str]]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        """
        filtered_intervals = []
        
        for interval in intervals:
            start_time = datetime.strptime(interval['start'], '%H:%M').time()
            end_time = datetime.strptime(interval['end'], '%H:%M').time()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            start_datetime = datetime.combine(date.today(), start_time)
            end_datetime = datetime.combine(date.today(), end_time)
            duration = (end_datetime - start_datetime).total_seconds() / 60
            
            if duration >= duration_minutes:
                filtered_intervals.append(interval)
        
        logger.info(f"‚è±Ô∏è [TRACE] –§–∏–ª—å—Ç—Ä {duration_minutes}–º–∏–Ω: {len(filtered_intervals)}—à—Ç")
        return filtered_intervals
    
    def _get_master_ids_by_names(self, master_names: List[str]) -> List[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç ID –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
        
        Args:
            master_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤
        
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤
        """
        master_ids = []
        if master_names:
            all_masters = self.master_repository.get_all()
            for master_name in master_names:
                master = next((m for m in all_masters if master_name.lower() in m['name'].lower()), None)
                if master:
                    master_ids.append(master['id'])
                    logger.info(f"‚úÖ [DB CALENDAR] –ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä: {master_name} -> ID {master['id']}")
                else:
                    logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {master_name}")
        return master_ids
    
    def _get_master_work_time(self, target_date: date, master_id: int) -> Optional[Tuple[time, time]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00-18:00, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π.
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        
        Returns:
            Optional[Tuple[time, time]]: –ö–æ—Ä—Ç–µ–∂ (start_time, end_time) –∏–ª–∏ None –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ —ç—Ç–æ
        day_of_week = target_date.weekday()
        if day_of_week == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            logger.info(f"üö´ [DB CALENDAR] –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
            return None
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00 - 18:00
        start_time = time(9, 0)
        end_time = time(18, 0)
        
        logger.info(f"‚è∞ [DB CALENDAR] –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {target_date}: {start_time} - {end_time}")
        return (start_time, end_time)
    
