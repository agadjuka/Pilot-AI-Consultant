"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–º–µ–Ω—è–µ—Ç Google Calendar Service –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from zoneinfo import ZoneInfo
import logging

from app.repositories.appointment_repository import AppointmentRepository
from app.repositories.master_repository import MasterRepository

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DBCalendarService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AppointmentRepository –∏ MasterRepository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏.
    """
    
    def __init__(
        self,
        appointment_repository: AppointmentRepository,
        master_repository: MasterRepository
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
            master_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
        """
        self.appointment_repository = appointment_repository
        self.master_repository = master_repository
    
    def create_event(
        self,
        master_id: int,
        service_id: int,
        user_telegram_id: int,
        start_time: datetime,
        end_time: datetime,
        description: str
    ) -> int:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
        
        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            service_id: ID —É—Å–ª—É–≥–∏
            user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Returns:
            int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìù [DB CALENDAR] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: master_id={master_id}, service_id={service_id}, user_id={user_telegram_id}, start={start_time}, end={end_time}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            appointment_data = {
                'user_telegram_id': user_telegram_id,
                'master_id': master_id,
                'service_id': service_id,
                'start_time': start_time,
                'end_time': end_time
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            appointment = self.appointment_repository.create(appointment_data)
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {appointment.id}")
            return appointment.id
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def delete_event(self, appointment_id: int) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üóëÔ∏è [DB CALENDAR] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            deleted = self.appointment_repository.delete_by_id(appointment_id)
            
            if not deleted:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def update_event(
        self,
        appointment_id: int,
        new_start_time: datetime,
        new_end_time: datetime
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏.
        
        Args:
            appointment_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_start_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            new_end_time: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            logger.info(f"üìÖ [DB CALENDAR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: appointment_id={appointment_id}, new_start={new_start_time}, new_end={new_end_time}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                'start_time': new_start_time,
                'end_time': new_end_time
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            updated_appointment = self.appointment_repository.update(appointment_id, update_data)
            
            if not updated_appointment:
                raise Exception(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            logger.info(f"‚úÖ [DB CALENDAR] –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: appointment_id={appointment_id}")
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def get_free_slots(
        self,
        date: str,
        duration_minutes: int,
        master_names: List[str]
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        –ò—â–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
            duration_minutes: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            master_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'start': '10:15', 'end': '13:45'}, ...]
        
        Raises:
            Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        """
        try:
            logger.info(f"üîç [DB CALENDAR] –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: date={date}, duration={duration_minutes} –º–∏–Ω, masters={master_names}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                target_date = datetime.strptime(date, "%Y-%m-%d")
            except ValueError:
                raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–∞–ª–æ–Ω–∞ (10:00 - 20:00)
            WORK_START_HOUR = 10
            WORK_END_HOUR = 20
            
            # –ù–∞—Ö–æ–¥–∏–º master_ids –ø–æ –∏–º–µ–Ω–∞–º –º–∞—Å—Ç–µ—Ä–æ–≤
            master_ids = []
            if master_names:
                all_masters = self.master_repository.get_all()
                for master_name in master_names:
                    master = next((m for m in all_masters if master_name.lower() in m.name.lower()), None)
                    if master:
                        master_ids.append(master.id)
                        logger.info(f"‚úÖ [DB CALENDAR] –ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä: {master_name} -> ID {master.id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {master_name}")
            
            if not master_ids:
                logger.warning(f"‚ö†Ô∏è [DB CALENDAR] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: {master_names}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            moscow_tz = ZoneInfo('Europe/Moscow')
            day_start = target_date.replace(hour=0, minute=0, second=0, microsecond=0, tzinfo=moscow_tz)
            day_end = target_date.replace(hour=23, minute=59, second=59, microsecond=999999, tzinfo=moscow_tz)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            occupied_appointments = self._get_appointments_for_masters_on_date(master_ids, day_start, day_end)
            
            logger.info(f"üìã [DB CALENDAR] –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(occupied_appointments)}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –±–ª–æ–∫–æ–≤
            occupied_blocks = []
            for appointment in occupied_appointments:
                occupied_blocks.append({
                    'start': appointment.start_time,
                    'end': appointment.end_time
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ –±–ª–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            occupied_blocks.sort(key=lambda x: x['start'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            work_start = target_date.replace(
                hour=WORK_START_HOUR, 
                minute=0, 
                second=0, 
                microsecond=0,
                tzinfo=moscow_tz
            )
            work_end = target_date.replace(
                hour=WORK_END_HOUR, 
                minute=0, 
                second=0, 
                microsecond=0,
                tzinfo=moscow_tz
            )
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –±—É—Ñ–µ—Ä 1 —á–∞—Å
            now = datetime.now(moscow_tz)
            if target_date.date() == now.date():
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ = —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å
                min_booking_time = now + timedelta(hours=1)
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–ª—É—á–∞—Å–∞ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
                min_hour = min_booking_time.hour
                min_minute = 30 if min_booking_time.minute > 0 else 0
                if min_booking_time.minute > 30:
                    min_hour += 1
                    min_minute = 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                adjusted_work_start = target_date.replace(
                    hour=min_hour,
                    minute=min_minute,
                    second=0,
                    microsecond=0,
                    tzinfo=moscow_tz
                )
                
                if adjusted_work_start > work_start:
                    work_start = adjusted_work_start
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–µ–Ω)
            capacity = len(master_ids)
            
            # –°—Ç—Ä–æ–∏–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            timeline: List[tuple[datetime, int]] = []
            for b in occupied_blocks:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–º–∫–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
                s = max(b['start'], work_start)
                e = min(b['end'], work_end)
                if s < e:
                    timeline.append((s, +1))
                    timeline.append((e, -1))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            timeline.append((work_start, 0))
            timeline.append((work_end, 0))
            timeline.sort(key=lambda x: (x[0], -x[1]))

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–∞–π–º–ª–∞–π–Ω—É, —Å–æ–±–∏—Ä–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –≥–¥–µ –∑–∞–Ω—è—Ç–æ—Å—Ç—å < capacity
            free_segments: List[tuple[datetime, datetime]] = []
            busy_count = 0
            segment_start: Optional[datetime] = None
            prev_time: Optional[datetime] = None
            
            for t, delta in timeline:
                if prev_time is not None and prev_time < t:
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª [prev_time, t)
                    if busy_count < capacity:
                        # –≠—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        if segment_start is None:
                            segment_start = prev_time
                    else:
                        # –ë—ã–ª –∑–∞–Ω—è—Ç—ã–π –ø–µ—Ä–∏–æ–¥, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
                        if segment_start is not None and segment_start < prev_time:
                            free_segments.append((segment_start, prev_time))
                            segment_start = None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–µ
                busy_count += delta
                prev_time = t
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
            if segment_start is not None and segment_start < work_end:
                free_segments.append((segment_start, work_end))

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            free_intervals: List[Dict[str, str]] = []
            for s, e in free_segments:
                minutes = int((e - s).total_seconds() // 60)
                if minutes >= duration_minutes:
                    free_intervals.append({'start': s.strftime('%H:%M'), 'end': e.strftime('%H:%M')})
            
            logger.info(f"‚úÖ [DB CALENDAR] –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {len(free_intervals)}")
            return free_intervals
            
        except Exception as e:
            logger.error(f"‚ùå [DB CALENDAR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}")
    
    def _get_appointments_for_masters_on_date(
        self,
        master_ids: List[int],
        day_start: datetime,
        day_end: datetime
    ) -> List:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            master_ids: –°–ø–∏—Å–æ–∫ ID –º–∞—Å—Ç–µ—Ä–æ–≤
            day_start: –ù–∞—á–∞–ª–æ –¥–Ω—è
            day_end: –ö–æ–Ω–µ—Ü –¥–Ω—è
        
        Returns:
            List: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        """
        from sqlalchemy import and_
        
        return (
            self.appointment_repository.db.query(self.appointment_repository.model)
            .filter(
                and_(
                    self.appointment_repository.model.master_id.in_(master_ids),
                    self.appointment_repository.model.start_time >= day_start,
                    self.appointment_repository.model.start_time <= day_end
                )
            )
            .all()
        )
