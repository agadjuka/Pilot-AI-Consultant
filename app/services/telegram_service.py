import httpx
from typing import List
import logging
from app.core.config import settings
from app.schemas.telegram import Update

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self, token: str):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{self.token}"

    async def send_message(self, chat_id: int, text: str) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram."""
        logger.info(f"üì§ TELEGRAM: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
        logger.info(f"üìù TELEGRAM: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{text[:100]}...'")
        
        url = f"{self.api_url}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
        }
        
        logger.info(f"üåê TELEGRAM: URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
        logger.info(f"üì¶ TELEGRAM: Payload: {payload}")
        
        async with httpx.AsyncClient() as client:
            try:
                logger.info("üöÄ TELEGRAM: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞")
                response = await client.post(url, json=payload)
                logger.info(f"üìä TELEGRAM: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
                
                response.raise_for_status()
                logger.info("‚úÖ TELEGRAM: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            except httpx.HTTPStatusError as e:
                logger.error(f"‚ùå TELEGRAM: HTTP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.response.status_code}")
                logger.error(f"‚ùå TELEGRAM: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
                return False
            except Exception as e:
                logger.error(f"‚ùå TELEGRAM: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                return False

    async def delete_webhook(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º long polling.
        Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –∏ polling.
        
        Returns:
            True –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        url = f"{self.api_url}/deleteWebhook"
        async with httpx.AsyncClient(timeout=10.0) as client:
            try:
                response = await client.post(url)
                response.raise_for_status()
                data = response.json()
                return data.get("ok", False)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
                return False

    async def get_updates(self, offset: int = 0) -> List[Update]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —á–µ—Ä–µ–∑ Long Polling.
        
        Args:
            offset: ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + 1
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Update
        """
        url = f"{self.api_url}/getUpdates"
        params = {
            "offset": offset,
            "timeout": 30,  # Long polling timeout
        }
        async with httpx.AsyncClient(timeout=35.0) as client:
            try:
                response = await client.get(url, params=params)
                response.raise_for_status()
                data = response.json()
                
                if data.get("ok"):
                    updates = [Update.parse_obj(update) for update in data.get("result", [])]
                    return updates
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {data}")
                    return []
            except httpx.HTTPError as e:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                return []
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                return []

telegram_service = TelegramService(token=settings.TELEGRAM_BOT_TOKEN)

