from typing import List, Dict, Tuple
import asyncio
import json
import re
import google.generativeai as genai
import logging
from app.services.llm_service import LLMService
from app.services.tool_service import ToolService
from app.services.prompt_builder_service import PromptBuilderService
from app.repositories.client_repository import ClientRepository

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class ToolOrchestratorService:
    """
    –°–µ—Ä–≤–∏—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏–∫–ª–æ–≤ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Function Calling).
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å LLM:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ function_call
    - –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ ToolService
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ LLM
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    
    def __init__(self, llm_service: LLMService, tool_service: ToolService, 
                 prompt_builder: PromptBuilderService, client_repository: ClientRepository):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        
        Args:
            llm_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            tool_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            prompt_builder: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            client_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        """
        self.llm_service = llm_service
        self.tool_service = tool_service
        self.prompt_builder = prompt_builder
        self.client_repository = client_repository
    
    def _serialize_message_for_tracer(self, message) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è tracer.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Part)
            
        Returns:
            –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if isinstance(message, str):
            return message
        elif isinstance(message, list):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Part
            parts_info = []
            for i, part in enumerate(message):
                if hasattr(part, 'text') and part.text:
                    parts_info.append(f"–ß–∞—Å—Ç—å {i+1}: —Ç–µ–∫—Å—Ç '{part.text[:100]}...'")
                elif hasattr(part, 'function_response') and part.function_response:
                    func_name = part.function_response.name
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º response
                    try:
                        func_response = part.function_response.response
                        if hasattr(func_response, '__dict__'):
                            func_response = str(func_response)
                        elif isinstance(func_response, dict):
                            func_response = str(func_response)
                        else:
                            func_response = str(func_response)
                    except:
                        func_response = "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å"
                    parts_info.append(f"–ß–∞—Å—Ç—å {i+1}: –æ—Ç–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ '{func_name}' -> {func_response}")
                else:
                    parts_info.append(f"–ß–∞—Å—Ç—å {i+1}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
            return f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {len(message)} —á–∞—Å—Ç–µ–π: " + "; ".join(parts_info)
        else:
            return str(message)
    
    def parse_tool_calls_from_string(self, text: str, dialog_context: Dict = None, tracer=None) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç TOOL_CALL: function_name(param="value") –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TOOL_CALL:
            dialog_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            tracer: –¢—Ä–µ–π—Å–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"tool_name": "...", "parameters": {...}}]
        """
        tool_calls = []
        
        # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º TOOL_CALL: function_name(param="value")
        tool_call_pattern = r'TOOL_CALL:\s*(\w+)\((.*?)\)'
        matches = re.finditer(tool_call_pattern, text, re.MULTILINE)
        
        for match in matches:
            function_name = match.group(1)
            raw_params = match.group(2).strip()
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ param="value"
            params = {}
            if raw_params:
                param_pattern = r'(\w+)\s*=\s*"([^"]*)"'
                param_matches = re.finditer(param_pattern, raw_params)
                for param_match in param_matches:
                    param_name = param_match.group(1)
                    param_value = param_match.group(2)
                    params[param_name] = param_value
            
            tool_call = {
                "tool_name": function_name,
                "parameters": params
            }
            tool_calls.append(tool_call)
            
            if tracer:
                tracer.log(f"üîß [String Format] –ù–∞–π–¥–µ–Ω –≤—ã–∑–æ–≤: {function_name}({params})")
        
        # –û–±–æ–≥–∞—â–∞–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
        if dialog_context and tool_calls:
            enriched_calls = self.enrich_tool_calls(tool_calls, dialog_context, tracer)
            return enriched_calls
        
        return tool_calls

    def enrich_tool_calls(self, tool_calls: List[Dict], dialog_context: Dict, tracer=None) -> List[Dict]:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            tool_calls: –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            dialog_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        if not dialog_context:
            return tool_calls
        
        enriched_calls = []
        enrichment_log = []
        
        for call in tool_calls:
            tool_name = call.get('tool_name', '')
            original_parameters = call.get('parameters', {}).copy()
            parameters = original_parameters.copy()
            
            # –û–±–æ–≥–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            enrichments = []
            
            if tool_name == 'get_available_slots':
                # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç service_name, –Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if not parameters.get('service_name') and dialog_context.get('service_name'):
                    parameters['service_name'] = dialog_context['service_name']
                    enrichments.append(f"service_name = {dialog_context['service_name']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω get_available_slots: –¥–æ–±–∞–≤–ª–µ–Ω service_name = {dialog_context['service_name']}")
                
                # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç date, –Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if not parameters.get('date') and dialog_context.get('date'):
                    parameters['date'] = dialog_context['date']
                    enrichments.append(f"date = {dialog_context['date']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω get_available_slots: –¥–æ–±–∞–≤–ª–µ–Ω–∞ date = {dialog_context['date']}")
            
            elif tool_name == 'get_masters_for_service':
                # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç service_name, –Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if not parameters.get('service_name') and dialog_context.get('service_name'):
                    parameters['service_name'] = dialog_context['service_name']
                    enrichments.append(f"service_name = {dialog_context['service_name']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω get_masters_for_service: –¥–æ–±–∞–≤–ª–µ–Ω service_name = {dialog_context['service_name']}")
            
            elif tool_name == 'create_appointment':
                # –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                if 'appointment_date' in parameters and 'date' not in parameters:
                    parameters['date'] = parameters.pop('appointment_date')
                    enrichments.append(f"appointment_date -> date")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω appointment_date –≤ date")
                
                if 'appointment_time' in parameters and 'time' not in parameters:
                    parameters['time'] = parameters.pop('appointment_time')
                    enrichments.append(f"appointment_time -> time")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω appointment_time –≤ time")
                
                if 'service' in parameters and 'service_name' not in parameters:
                    parameters['service_name'] = parameters.pop('service')
                    enrichments.append(f"service -> service_name")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω service –≤ service_name")
                
                # –û–±–æ–≥–∞—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
                if not parameters.get('service_name') and dialog_context.get('service_name'):
                    parameters['service_name'] = dialog_context['service_name']
                    enrichments.append(f"service_name = {dialog_context['service_name']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –¥–æ–±–∞–≤–ª–µ–Ω service_name = {dialog_context['service_name']}")
                
                if not parameters.get('master_name') and dialog_context.get('master_name'):
                    parameters['master_name'] = dialog_context['master_name']
                    enrichments.append(f"master_name = {dialog_context['master_name']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –¥–æ–±–∞–≤–ª–µ–Ω master_name = {dialog_context['master_name']}")
                
                if not parameters.get('date') and dialog_context.get('date'):
                    parameters['date'] = dialog_context['date']
                    enrichments.append(f"date = {dialog_context['date']}")
                    logger.info(f"üîß –û–±–æ–≥–∞—â–µ–Ω create_appointment: –¥–æ–±–∞–≤–ª–µ–Ω–∞ date = {dialog_context['date']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            if enrichments:
                enrichment_log.append({
                    "tool_name": tool_name,
                    "original_parameters": original_parameters,
                    "enriched_parameters": parameters,
                    "enrichments": enrichments
                })
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            enriched_call = {
                'tool_name': tool_name,
                'parameters': parameters
            }
            enriched_calls.append(enriched_call)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        if tracer and enrichment_log:
            tracer.add_event("üîß –û–±–æ–≥–∞—â–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", {
                "enrichment_log": enrichment_log,
                "dialog_context": dialog_context,
                "total_enriched": len(enrichment_log)
            })
        
        return enriched_calls
    
    async def execute_tool_cycle(self, system_prompt: str, history: List[Dict], 
                               user_message: str, user_id: int, tracer=None, dialog_context: Dict = None) -> Tuple[str, List[Dict]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å LLM.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç–æ–≤—ã–π_–æ—Ç–≤–µ—Ç_–æ—Ç_LLM, –≤—Å—è_–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_–∏—Å—Ç–æ—Ä–∏—è_—Ü–∏–∫–ª–∞)
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        full_history = self.prompt_builder.build_full_history_with_system_prompt(history, system_prompt)
        
        if tracer:
            tracer.add_event("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ToolOrchestrator", f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤, –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
        chat = self.llm_service.create_chat(full_history)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Function Calling
        max_iterations = 5
        iteration = 0
        bot_response_text = None
        current_message = user_message
        
        # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        debug_iterations = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        debug_iterations.append({
            "iteration": 0,
            "request": f"–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:\n{system_prompt}\n\n–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n{self._format_dialog_history(history)}",
            "response": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å LLM",
            "function_calls": [],
            "final_answer": ""
        })
        
        while iteration < max_iterations:
            iteration += 1
            
            if tracer:
                tracer.add_event(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}", f"–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            iteration_log = {
                "iteration": iteration,
                "request": "",
                "response": "",
                "function_calls": [],
                "final_answer": ""
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if isinstance(current_message, str):
                iteration_log["request"] = f"–¢–µ–∫—Å—Ç: {current_message}"
            else:
                iteration_log["request"] = f"Function Response (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {len(current_message)} —Ñ—É–Ω–∫—Ü–∏–π)"
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π
                for i, part in enumerate(current_message):
                    if hasattr(part, 'function_response'):
                        func_name = part.function_response.name
                        func_result = part.function_response.response
                        iteration_log["request"] += f"\n  –§—É–Ω–∫—Ü–∏—è {i+1}: {func_name} -> {func_result}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            if tracer:
                tracer.add_event(f"üì§ –í—ã–∑–æ–≤ LLM (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration})", {
                    "history": history,
                    "message": self._serialize_message_for_tracer(current_message),
                    "iteration": iteration
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response_content = await self.llm_service.send_message_to_chat(
                chat=chat,
                message=current_message,
                user_id=user_id
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            if tracer:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
                raw_text_parts = []
                for part in response_content.parts:
                    if hasattr(part, 'text') and part.text:
                        raw_text_parts.append(part.text)
                    elif hasattr(part, 'function_call') and part.function_call:
                        raw_text_parts.append(f"Function call: {part.function_call.name}")
                
                tracer.add_event(f"üì• –û—Ç–≤–µ—Ç LLM (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration})", {
                    "raw_response": "\n".join(raw_text_parts) if raw_text_parts else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç",
                    "parts_count": len(response_content.parts),
                    "iteration": iteration
                })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            has_function_call = False
            has_text = False
            function_calls = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞
            for part in response_content.parts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                if hasattr(part, 'function_call') and part.function_call:
                    has_function_call = True
                    function_calls.append(part.function_call)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
                elif hasattr(part, 'text') and part.text:
                    text_payload = part.text.strip()
                    
                    # –ù–û–í–´–ô –§–û–†–ú–ê–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç TOOL_CALL:
                    string_tool_calls = self.parse_tool_calls_from_string(text_payload, dialog_context, tracer)
                    if string_tool_calls:
                        has_function_call = True
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        for tool_call in string_tool_calls:
                            if isinstance(tool_call, dict) and "tool_name" in tool_call:
                                function_name = tool_call["tool_name"]
                                function_args = tool_call.get("parameters", {})
                                
                                # –°–æ–∑–¥–∞–µ–º mock function_call –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                class MockFunctionCall:
                                    def __init__(self, name, args):
                                        self.name = name
                                        self.args = args
                                
                                function_calls.append(MockFunctionCall(function_name, function_args))
                        
                        iteration_log["response"] = f"–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å {len(string_tool_calls)} –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
                        logger.info(f"üîß [String Format] {len(string_tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ function_calls
                    
                    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON —Å –æ—á–∏—Å—Ç–∫–æ–π (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                    cleaned_json_str = text_payload.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Markdown-–±–ª–æ–∫–∞ —Å JSON
                    if "```json" in cleaned_json_str or "```" in cleaned_json_str:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –±–ª–æ–∫–∞ ```json ... ``` –∏–ª–∏ ``` ... ```
                        json_match = re.search(r"```(?:json)?\s*([\s\S]*?)\s*```", cleaned_json_str)
                        if json_match:
                            cleaned_json_str = json_match.group(1).strip()
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã
                    cleaned_json_str = cleaned_json_str.strip()
                    if cleaned_json_str.startswith('json'):
                        cleaned_json_str = cleaned_json_str[4:].strip()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                    try:
                        tool_calls_data = json.loads(cleaned_json_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        if isinstance(tool_calls_data, list) and len(tool_calls_data) > 0:
                            has_function_call = True
                            
                            # –û–±–æ–≥–∞—â–∞–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                            enriched_tool_calls = self.enrich_tool_calls(tool_calls_data, dialog_context, tracer)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                            for tool_call in enriched_tool_calls:
                                if isinstance(tool_call, dict) and "tool_name" in tool_call:
                                    function_name = tool_call["tool_name"]
                                    function_args = tool_call.get("parameters", {})
                                    
                                    # –°–æ–∑–¥–∞–µ–º mock function_call –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                    class MockFunctionCall:
                                        def __init__(self, name, args):
                                            self.name = name
                                            self.args = args
                                    
                                    function_calls.append(MockFunctionCall(function_name, function_args))
                            
                            iteration_log["response"] = f"JSON —Å {len(tool_calls_data)} –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
                            logger.info(f"üîß [JSON Tools] {len(tool_calls_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ JSON")
                            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ function_calls
                        else:
                            # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–µ —Å–ø–∏—Å–æ–∫ - —Å—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                            has_text = True
                            bot_response_text = text_payload
                            iteration_log["response"] = text_payload
                            logger.info(f"üí¨ [Answer] {bot_response_text[:140]}")
                            break
                    
                    except json.JSONDecodeError as e:
                        # –≠—Ç–æ –Ω–µ JSON, —Å—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
                        has_text = True
                        bot_response_text = text_payload
                        iteration_log["response"] = text_payload
                        logger.info(f"üí¨ [Answer] {bot_response_text[:140]}")
                        break
                    
                    # –î–æ–ø. –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç [TOOL: func(arg="val", ...)]
                    # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ function_call (–Ω–∞–ø—Ä–∏–º–µ—Ä, Yandex)
                    tool_match = re.search(r"\[TOOL:\s*(\w+)\((.*?)\)\]", text_payload)
                    if tool_match:
                        has_function_call = True
                        function_name = tool_match.group(1)
                        raw_args = tool_match.group(2).strip()
                        args: Dict[str, str] = {}
                        if raw_args:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã key="value" (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–π)
                            for m in re.finditer(r"(\w+)\s*=\s*\"([^\"]*)\"", raw_args):
                                args[m.group(1)] = m.group(2)
                        
                        # –û–±–æ–≥–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
                        if dialog_context:
                            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π tool_call –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
                            temp_tool_call = {
                                'tool_name': function_name,
                                'parameters': args
                            }
                            enriched_calls = self.enrich_tool_calls([temp_tool_call], dialog_context, tracer)
                            if enriched_calls:
                                args = enriched_calls[0]['parameters']
                        
                        # –°–æ–∑–¥–∞–µ–º mock function_call –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        class MockFunctionCall:
                            def __init__(self, name, args):
                                self.name = name
                                self.args = args
                        
                        function_calls.append(MockFunctionCall(function_name, args))
                    else:
                        has_text = True
                        bot_response_text = text_payload
                        iteration_log["response"] = text_payload
                        logger.info(f"üí¨ [Answer] {bot_response_text[:140]}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ç–µ—Ä–∞—Ü–∏–∏
            debug_iterations.append(iteration_log)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            if has_function_call and function_calls:
                if tracer:
                    tracer.add_event(f"‚öôÔ∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(function_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", {
                        "tools": [fc.name for fc in function_calls],
                        "iteration": iteration
                    })
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                tasks = []
                for function_call in function_calls:
                    function_name = function_call.name
                    function_args = dict(function_call.args)
                    
                    logger.info(f"üîß [ORCHESTRATOR] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {function_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {function_args}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
                    task = self._execute_function_async(function_name, function_args, user_id)
                    tasks.append(task)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                try:
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è LLM
                    tool_results_message = []
                    
                    for i, (function_call, result) in enumerate(zip(function_calls, results)):
                        function_name = function_call.name
                        function_args = dict(function_call.args)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                        if isinstance(result, Exception):
                            result = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {str(result)}"
                        
                        if tracer:
                            tracer.add_event(f"‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {function_name}", {
                                "tool_name": function_name,
                                "args": function_args,
                                "result": result,
                                "iteration": iteration
                            })
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                        iteration_log["function_calls"].append({
                            "name": function_name,
                            "args": function_args,
                            "result": result
                        })
                        iteration_log["response"] = f"Model –≤—ã–∑–≤–∞–ª–∞ {len(function_calls)} —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è call_manager - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                        if function_name == "call_manager":
                            bot_response_text = result
                            iteration_log["final_answer"] = bot_response_text
                            break
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã –ü–î–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
                        if function_name == "create_appointment" and isinstance(result, str) and result.startswith("–¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"):
                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–¥–∏—é contact_info_request –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª
                            contact_stage = 'contact_info_request'
                            client = self.client_repository.get_or_create_by_telegram_id(user_id)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptBuilderService
                            contact_prompt = self.prompt_builder.build_generation_prompt(
                                stage=contact_stage,
                                dialog_history=history,
                                dialog_context="",
                                client_name=client.first_name,
                                client_phone_saved=bool(client.phone_number)
                            )
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                            final_text, _ = await self.execute_tool_cycle(contact_prompt, history, user_message, user_id, tracer)
                            return final_text, debug_iterations
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è LLM
                        result_str = str(result) if result is not None else "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
                        tool_result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{function_name}':\n{result_str}"
                        tool_results_message.append(tool_result_text)
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    combined_results = "\n\n".join(tool_results_message)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è LLM
                    final_instruction = "\n\n–¢—ã –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –¢–µ–ø–µ—Ä—å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LLM
                    current_message = combined_results + final_instruction
                    
                    if tracer:
                        tracer.add_event(f"üì§ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ LLM", {
                            "results_count": len(tool_results_message),
                            "message_length": len(current_message),
                            "iteration": iteration
                        })
                    
                    continue
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
                    bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
                    iteration_log["final_answer"] = bot_response_text
                    break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if has_text and not has_function_call:
                iteration_log["final_answer"] = bot_response_text
                if tracer:
                    tracer.add_event(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", {
                        "text": bot_response_text,
                        "iteration": iteration,
                        "length": len(bot_response_text)
                    })
                break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏ —Ç–µ–∫—Å—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
            if not has_function_call and not has_text:
                bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
                iteration_log["final_answer"] = bot_response_text
                break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
        if iteration >= max_iterations and not bot_response_text:
            # –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ,
            # –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if debug_iterations and any(iter_log.get("function_calls") for iter_log in debug_iterations):
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                all_results = []
                for iter_log in debug_iterations:
                    for func_call in iter_log.get("function_calls", []):
                        if "get_available_slots" in func_call.get("name", ""):
                            all_results.append(func_call.get("result", ""))
                
                if all_results:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    bot_response_text = self._generate_summary_response(all_results)
                else:
                    bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            else:
                bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        return bot_response_text, debug_iterations
    
    async def execute_single_tool(self, tool_name: str, parameters: Dict, user_id: int, dialog_context: Dict = None, tracer=None) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        try:
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
            if dialog_context:
                temp_tool_call = {
                    'tool_name': tool_name,
                    'parameters': parameters
                }
                enriched_calls = self.enrich_tool_calls([temp_tool_call], dialog_context, tracer)
                if enriched_calls:
                    parameters = enriched_calls[0]['parameters']
                    logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–±–æ–≥–∞—â–µ–Ω—ã: {parameters}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ ToolService
            result = await self._execute_function_async(tool_name, parameters, user_id)
            
            logger.info(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {tool_name}")
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            return error_msg
    
    def _format_dialog_history(self, dialog_history: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            dialog_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        """
        if not dialog_history:
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞"
        
        formatted_history = []
        for i, msg in enumerate(dialog_history, 1):
            role = msg.get("role", "unknown")
            parts = msg.get("parts", [])
            text_content = ""
            for part in parts:
                if isinstance(part, dict) and "text" in part:
                    text_content += part["text"]
                elif hasattr(part, 'text'):
                    text_content += part.text
            
            formatted_history.append(f"[{i}] {role.upper()}: {text_content}")
        
        return "\n".join(formatted_history)
    
    async def _execute_function_async(self, function_name: str, function_args: Dict, user_id: int = None) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ToolService.
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞
            function_args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–≥–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –≤ ToolService
        if not hasattr(self.tool_service, function_name):
            return f"–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ToolService"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        method = getattr(self.tool_service, function_name)
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        if function_name == "get_all_services":
            return method()
        
        elif function_name == "get_masters_for_service":
            service_name = function_args.get("service_name", "")
            return method(service_name)
        
        elif function_name == "get_available_slots":
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            return method(service_name, date)
        
        elif function_name == "create_appointment":
            master_name = function_args.get("master_name", "")
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            time = function_args.get("time", "")
            client_name = function_args.get("client_name", "")
            return method(master_name, service_name, date, time, client_name, user_id)
        
        elif function_name == "get_my_appointments":
            return method(user_id)
        
        elif function_name == "cancel_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            return method(appointment_id, user_id)
        
        elif function_name == "reschedule_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            new_date = function_args.get("new_date", "")
            new_time = function_args.get("new_time", "")
            return method(appointment_id, new_date, new_time, user_id)
        
        elif function_name == "call_manager":
            reason = function_args.get("reason", "")
            result = method(reason)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ response_to_user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
            return result.get("response_to_user", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        elif function_name == "get_full_history":
            return method()
        
        elif function_name == "save_client_name":
            name = function_args.get("name", "")
            return method(name, user_id)
        
        elif function_name == "save_client_phone":
            phone = function_args.get("phone", "")
            return method(phone, user_id)
        
        else:
            return f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è '{function_name}'"
    
    def _execute_function(self, function_name: str, function_args: Dict, user_id: int = None) -> str:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ToolService.
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞
            function_args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–≥–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –≤ ToolService
        if not hasattr(self.tool_service, function_name):
            return f"–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ToolService"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        method = getattr(self.tool_service, function_name)
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        if function_name == "get_all_services":
            return method()
        
        elif function_name == "get_masters_for_service":
            service_name = function_args.get("service_name", "")
            return method(service_name)
        
        elif function_name == "get_available_slots":
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            return method(service_name, date)
        
        elif function_name == "create_appointment":
            master_name = function_args.get("master_name", "")
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            time = function_args.get("time", "")
            client_name = function_args.get("client_name", "")
            return method(master_name, service_name, date, time, client_name, user_id)
        
        elif function_name == "get_my_appointments":
            return method(user_id)
        
        elif function_name == "cancel_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            return method(appointment_id, user_id)
        
        elif function_name == "reschedule_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            new_date = function_args.get("new_date", "")
            new_time = function_args.get("new_time", "")
            return method(appointment_id, new_date, new_time, user_id)
        
        elif function_name == "call_manager":
            reason = function_args.get("reason", "")
            result = method(reason)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ response_to_user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
            return result.get("response_to_user", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        elif function_name == "get_full_history":
            return method()
        
        elif function_name == "save_client_name":
            name = function_args.get("name", "")
            return method(name, user_id)
        
        elif function_name == "save_client_phone":
            phone = function_args.get("phone", "")
            return method(phone, user_id)
        
        else:
            return f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è '{function_name}'"
    
    def _generate_summary_response(self, results: List[str]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π get_available_slots
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        available_slots = []
        no_slots = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if "–µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞" in result or "—Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞" in result:
                available_slots.append(result)
            elif "–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω" in result:
                no_slots.append(result)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if available_slots:
            response = "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏:\n\n"
            for slot_info in available_slots:
                response += f"‚Ä¢ {slot_info}\n\n"
            
            if no_slots:
                response += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            
            response += "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            response += "‚Ä¢ –ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n"
            response += "‚Ä¢ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?\n"
            response += "‚Ä¢ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?"
            
            return response
        else:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω —É –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–ª–æ–Ω–∞."
