from typing import List, Dict, Tuple
import google.generativeai as genai
from google.generativeai import protos
import logging
from app.services.llm_service import LLMService
from app.services.tool_service import ToolService
from app.services.prompt_builder_service import PromptBuilderService
from app.repositories.client_repository import ClientRepository

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class ToolOrchestratorService:
    """
    –°–µ—Ä–≤–∏—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏–∫–ª–æ–≤ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Function Calling).
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å LLM:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ function_call
    - –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ ToolService
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ LLM
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    
    def __init__(self, llm_service: LLMService, tool_service: ToolService, 
                 prompt_builder: PromptBuilderService, client_repository: ClientRepository):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        
        Args:
            llm_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            tool_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            prompt_builder: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            client_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        """
        self.llm_service = llm_service
        self.tool_service = tool_service
        self.prompt_builder = prompt_builder
        self.client_repository = client_repository
    
    async def execute_tool_cycle(self, system_prompt: str, history: List[Dict], 
                               user_message: str, user_id: int, tracer=None) -> Tuple[str, List[Dict]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å LLM.
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç–æ–≤—ã–π_–æ—Ç–≤–µ—Ç_–æ—Ç_LLM, –≤—Å—è_–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_–∏—Å—Ç–æ—Ä–∏—è_—Ü–∏–∫–ª–∞)
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        full_history = self.prompt_builder.build_full_history_with_system_prompt(history, system_prompt)
        
        if tracer:
            tracer.add_event("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ToolOrchestrator", f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤, –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
        chat = self.llm_service.create_chat(full_history)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Function Calling
        max_iterations = 5
        iteration = 0
        bot_response_text = None
        current_message = user_message
        
        # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        debug_iterations = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        debug_iterations.append({
            "iteration": 0,
            "request": f"–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:\n{system_prompt}\n\n–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n{self._format_dialog_history(history)}",
            "response": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å Gemini",
            "function_calls": [],
            "final_answer": ""
        })
        
        while iteration < max_iterations:
            iteration += 1
            
            if tracer:
                tracer.add_event(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}", f"–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            iteration_log = {
                "iteration": iteration,
                "request": "",
                "response": "",
                "function_calls": [],
                "final_answer": ""
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if isinstance(current_message, str):
                iteration_log["request"] = f"–¢–µ–∫—Å—Ç: {current_message}"
            else:
                iteration_log["request"] = f"Function Response (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {len(current_message)} —Ñ—É–Ω–∫—Ü–∏–π)"
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π
                for i, part in enumerate(current_message):
                    if hasattr(part, 'function_response'):
                        func_name = part.function_response.name
                        func_result = part.function_response.response
                        iteration_log["request"] += f"\n  –§—É–Ω–∫—Ü–∏—è {i+1}: {func_name} -> {func_result}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response_content = await self.llm_service.send_message_to_chat(
                chat=chat,
                message=current_message,
                user_id=user_id
            )
            
            if tracer:
                tracer.add_event(f"ü§ñ –û—Ç–≤–µ—Ç LLM (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration})", f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏", is_json=True)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            has_function_call = False
            has_text = False
            function_response_parts = []
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
            precomputed_tool_result: str | None = None
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç–∞–¥–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏)
                # –∏ –µ—Å–ª–∏ —ç—Ç–æ view_booking, –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
                if "view_booking" in system_prompt:
                    precomputed_tool_result = self.tool_service.get_my_appointments(user_id)
            except Exception:
                precomputed_tool_result = None
            
            for part in response_content.parts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                if hasattr(part, 'function_call') and part.function_call:
                    has_function_call = True
                    function_call = part.function_call
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
                    function_name = function_call.name
                    function_args = dict(function_call.args)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ ToolService
                    try:
                        result = self._execute_function(function_name, function_args, user_id)
                    except Exception as e:
                        result = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}"
                    
                    if tracer:
                        tracer.add_event(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {function_name}", f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {function_args}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ª–æ–≥ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    def _short(v):
                        try:
                            s = str(v)
                            return (s[:120] + '‚Ä¶') if len(s) > 120 else s
                        except Exception:
                            return '‚Äî'
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                    iteration_log["function_calls"].append({
                        "name": function_name,
                        "args": function_args,
                        "result": result
                    })
                    iteration_log["response"] = f"Model –≤—ã–∑–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é: {function_name}"
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è call_manager - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                    if function_name == "call_manager":
                        bot_response_text = result
                        iteration_log["final_answer"] = bot_response_text
                        break

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã –ü–î–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
                    if function_name == "create_appointment" and isinstance(result, str) and result.startswith("–¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"):
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–¥–∏—é contact_info_request –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª
                        contact_stage = 'contact_info_request'
                        client = self.client_repository.get_or_create_by_telegram_id(user_id)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptBuilderService
                        contact_prompt = self.prompt_builder.build_generation_prompt(
                            stage=contact_stage,
                            dialog_history=history,
                            dialog_context="",
                            client_name=client.first_name,
                            client_phone_saved=bool(client.phone_number)
                        )
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                        final_text, _ = await self.execute_tool_cycle(contact_prompt, history, user_message, user_id, tracer)
                        return final_text, debug_iterations
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å
                    function_response_part = protos.Part(
                        function_response=protos.FunctionResponse(
                            name=function_name,
                            response={"result": result}
                        )
                    )
                    function_response_parts.append(function_response_part)
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
                elif hasattr(part, 'text') and part.text:
                    text_payload = part.text.strip()
                    # –î–æ–ø. –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç [TOOL: func(arg="val", ...)]
                    # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ function_call (–Ω–∞–ø—Ä–∏–º–µ—Ä, Yandex)
                    import re
                    tool_match = re.search(r"\[TOOL:\s*(\w+)\((.*?)\)\]", text_payload)
                    if tool_match:
                        has_function_call = True
                        function_name = tool_match.group(1)
                        raw_args = tool_match.group(2).strip()
                        args: Dict[str, str] = {}
                        if raw_args:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã key="value" (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–π)
                            for m in re.finditer(r"(\w+)\s*=\s*\"([^\"]*)\"", raw_args):
                                args[m.group(1)] = m.group(2)
                        try:
                            result = self._execute_function(function_name, args, user_id)
                        except Exception as e:
                            result = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}"
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                        iteration_log["function_calls"].append({
                            "name": function_name,
                            "args": args,
                            "result": result
                        })
                        iteration_log["response"] = f"Model –≤—ã–∑–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é (text): {function_name}"

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ü–î–Ω
                        if function_name == "create_appointment" and isinstance(result, str) and result.startswith("–¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"):
                            contact_stage = 'contact_info_request'
                            client = self.client_repository.get_or_create_by_telegram_id(user_id)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptBuilderService
                            contact_prompt = self.prompt_builder.build_generation_prompt(
                                stage=contact_stage,
                                dialog_history=history,
                                dialog_context="",
                                client_name=client.first_name,
                                client_phone_saved=bool(client.phone_number)
                            )
                            final_text, _ = await self.execute_tool_cycle(contact_prompt, history, user_message, user_id, tracer)
                            return final_text, debug_iterations

                        # –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        function_response_part = protos.Part(
                            function_response=protos.FunctionResponse(
                                name=function_name,
                                response={"result": result}
                            )
                        )
                        function_response_parts.append(function_response_part)
                        # –ù–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–¥–∞–¥–∏–º —à–∞–Ω—Å –º–æ–¥–µ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞–¥–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–∑–≤–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî
                        # –º—è–≥–∫–æ –≤—Å—Ç–∞–≤–∏–º –≤ –æ—Ç–≤–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM:
                        if precomputed_tool_result is not None and "get_my_appointments" not in text_payload:
                            text_payload = (
                                f"–ö–û–ù–¢–ï–ö–°–¢_–ó–ê–ü–ò–°–ï–ô: {precomputed_tool_result}\n\n"
                                f"–°–§–û–†–ú–ò–†–£–ô –û–¢–í–ï–¢: {text_payload}"
                            )
                        has_text = True
                        bot_response_text = text_payload
                        iteration_log["response"] = text_payload
                        logger.info(f"üí¨ [Answer] {bot_response_text[:140]}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ç–µ—Ä–∞—Ü–∏–∏
            debug_iterations.append(iteration_log)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if has_text and not has_function_call:
                iteration_log["final_answer"] = bot_response_text
                if tracer:
                    tracer.add_event(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", f"–¢–µ–∫—Å—Ç: {bot_response_text}")
                break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if has_function_call:
                current_message = function_response_parts
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏ Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç, 
                # –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                if iteration == max_iterations - 1:
                    # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    current_message = function_response_parts + [
                        protos.Part(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö.")
                    ]
                continue
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏ —Ç–µ–∫—Å—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
            if not has_function_call and not has_text:
                bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
                iteration_log["final_answer"] = bot_response_text
                break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
        if iteration >= max_iterations and not bot_response_text:
            # –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ,
            # –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if debug_iterations and any(iter_log.get("function_calls") for iter_log in debug_iterations):
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                all_results = []
                for iter_log in debug_iterations:
                    for func_call in iter_log.get("function_calls", []):
                        if "get_available_slots" in func_call.get("name", ""):
                            all_results.append(func_call.get("result", ""))
                
                if all_results:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    bot_response_text = self._generate_summary_response(all_results)
                else:
                    bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            else:
                bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        return bot_response_text, debug_iterations
    
    
    def _format_dialog_history(self, dialog_history: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            dialog_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        """
        if not dialog_history:
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞"
        
        formatted_history = []
        for i, msg in enumerate(dialog_history, 1):
            role = msg.get("role", "unknown")
            parts = msg.get("parts", [])
            text_content = ""
            for part in parts:
                if isinstance(part, dict) and "text" in part:
                    text_content += part["text"]
                elif hasattr(part, 'text'):
                    text_content += part.text
            
            formatted_history.append(f"[{i}] {role.upper()}: {text_content}")
        
        return "\n".join(formatted_history)
    
    def _execute_function(self, function_name: str, function_args: Dict, user_id: int = None) -> str:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ToolService.
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞
            function_args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–≥–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –≤ ToolService
        if not hasattr(self.tool_service, function_name):
            return f"–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ToolService"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        method = getattr(self.tool_service, function_name)
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        if function_name == "get_all_services":
            return method()
        
        elif function_name == "get_masters_for_service":
            service_name = function_args.get("service_name", "")
            return method(service_name)
        
        elif function_name == "get_available_slots":
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            return method(service_name, date)
        
        elif function_name == "create_appointment":
            master_name = function_args.get("master_name", "")
            service_name = function_args.get("service_name", "")
            date = function_args.get("date", "")
            time = function_args.get("time", "")
            client_name = function_args.get("client_name", "")
            return method(master_name, service_name, date, time, client_name, user_id)
        
        elif function_name == "get_my_appointments":
            return method(user_id)
        
        elif function_name == "cancel_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            return method(appointment_id)
        
        elif function_name == "reschedule_appointment_by_id":
            appointment_id = function_args.get("appointment_id", 0)
            new_date = function_args.get("new_date", "")
            new_time = function_args.get("new_time", "")
            return method(appointment_id, new_date, new_time)
        
        elif function_name == "call_manager":
            reason = function_args.get("reason", "")
            result = method(reason)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ response_to_user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
            return result.get("response_to_user", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        else:
            return f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è '{function_name}'"
    
    def _generate_summary_response(self, results: List[str]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π get_available_slots
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        available_slots = []
        no_slots = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if "–µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞" in result or "—Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞" in result:
                available_slots.append(result)
            elif "–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω" in result:
                no_slots.append(result)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if available_slots:
            response = "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏:\n\n"
            for slot_info in available_slots:
                response += f"‚Ä¢ {slot_info}\n\n"
            
            if no_slots:
                response += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            
            response += "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            response += "‚Ä¢ –ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n"
            response += "‚Ä¢ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?\n"
            response += "‚Ä¢ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?"
            
            return response
        else:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω —É –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–ª–æ–Ω–∞."
