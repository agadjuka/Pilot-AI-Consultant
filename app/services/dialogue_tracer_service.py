import os
import shutil
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional
import logging

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class DialogueTracer:
    """
    –ú–æ—â–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤.
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å—é —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –µ–¥–∏–Ω—ã–π Markdown-—Ñ–∞–π–ª.
    """
    
    def __init__(self, user_id: int, user_message: str, debug_dir: str = "debug_logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–π—Å–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            debug_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é debug_logs)
        """
        self.user_id = user_id
        self.user_message = user_message
        self.debug_dir = Path(debug_dir)
        self.trace_events: List[Dict[str, Any]] = []
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.filename = f"{timestamp}_user{user_id}.md"
        self.filepath = self.debug_dir / self.filename
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        self.add_event(
            "üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** {user_id}\n**–°–æ–æ–±—â–µ–Ω–∏–µ:** {user_message}\n**–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    
    def add_event(self, title: str, content: str, is_json: bool = False) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–±—ã—Ç–∏—è
            is_json: –ï—Å–ª–∏ True, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ JSON
        """
        event = {
            "timestamp": datetime.now().strftime("%H:%M:%S.%f")[:-3],  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            "title": title,
            "content": content,
            "is_json": is_json
        }
        self.trace_events.append(event)
    
    def save_trace(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤ Markdown-—Ñ–∞–π–ª.
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.debug_dir.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content_lines = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            content_lines.append(f"# –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            content_lines.append("")
            content_lines.append(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** {self.user_id}")
            content_lines.append(f"**–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {self.user_message}")
            content_lines.append("")
            content_lines.append("---")
            content_lines.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            for i, event in enumerate(self.trace_events, 1):
                content_lines.append(f"## {i}. {event['title']}")
                content_lines.append("")
                content_lines.append(f"**–í—Ä–µ–º—è:** {event['timestamp']}")
                content_lines.append("")
                
                if event['is_json']:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ JSON –±–ª–æ–∫
                    content_lines.append("```json")
                    content_lines.append(event['content'])
                    content_lines.append("```")
                else:
                    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    content_lines.append(event['content'])
                
                content_lines.append("")
                content_lines.append("---")
                content_lines.append("")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            content_lines.append("## ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
            content_lines.append("")
            content_lines.append(f"**–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:** {len(self.trace_events)}")
            content_lines.append(f"**–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(self.filepath, "w", encoding="utf-8") as f:
                f.write("\n".join(content_lines))
            
            # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {e}")


def clear_debug_logs(debug_dir: str = "debug_logs") -> None:
    """
    –û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ.
    
    Args:
        debug_dir: –ü–∞–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é debug_logs)
    """
    debug_path = Path(debug_dir)
    
    if debug_path.exists():
        shutil.rmtree(debug_path)
        # –ü–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞
    
    debug_path.mkdir(parents=True, exist_ok=True)
    # –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
